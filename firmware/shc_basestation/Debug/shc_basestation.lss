
shc_basestation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000052a4  000053a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052a4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f3  00800116  00800116  000053ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000053ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00005418  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006d75  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eaf  00000000  00000000  0000c47d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000323b  00000000  00000000  0000d32c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c5c  00000000  00000000  00010568  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000bfc1  00000000  00000000  000111c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000050e3  00000000  00000000  0001d185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000378  00000000  00000000  00022268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000043e6  00000000  00000000  000225e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c6       	rjmp	.+3134   	; 0xc40 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_1>
       8:	38 c6       	rjmp	.+3184   	; 0xc7a <__bad_interrupt>
       a:	00 00       	nop
       c:	36 c6       	rjmp	.+3180   	; 0xc7a <__bad_interrupt>
       e:	00 00       	nop
      10:	34 c6       	rjmp	.+3176   	; 0xc7a <__bad_interrupt>
      12:	00 00       	nop
      14:	32 c6       	rjmp	.+3172   	; 0xc7a <__bad_interrupt>
      16:	00 00       	nop
      18:	30 c6       	rjmp	.+3168   	; 0xc7a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2e c6       	rjmp	.+3164   	; 0xc7a <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c6       	rjmp	.+3160   	; 0xc7a <__bad_interrupt>
      22:	00 00       	nop
      24:	2a c6       	rjmp	.+3156   	; 0xc7a <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c6       	rjmp	.+3152   	; 0xc7a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c6       	rjmp	.+3148   	; 0xc7a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c6       	rjmp	.+3144   	; 0xc7a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c6       	rjmp	.+3140   	; 0xc7a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c6       	rjmp	.+3136   	; 0xc7a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c6       	rjmp	.+3132   	; 0xc7a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c6       	rjmp	.+3128   	; 0xc7a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c6       	rjmp	.+3124   	; 0xc7a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_18>
      4c:	16 c6       	rjmp	.+3116   	; 0xc7a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c6       	rjmp	.+3112   	; 0xc7a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__vector_21>
      58:	10 c6       	rjmp	.+3104   	; 0xc7a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c6       	rjmp	.+3100   	; 0xc7a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c c6       	rjmp	.+3096   	; 0xc7a <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c6       	rjmp	.+3092   	; 0xc7a <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	57 61       	ori	r21, 0x17	; 23
      6a:	72 6e       	ori	r23, 0xE2	; 226
      6c:	69 6e       	ori	r22, 0xE9	; 233
      6e:	67 3a       	cpi	r22, 0xA7	; 167
      70:	20 41       	sbci	r18, 0x10	; 16
      72:	63 6b       	ori	r22, 0xB3	; 179
      74:	6e 6f       	ori	r22, 0xFE	; 254
      76:	77 6c       	ori	r23, 0xC7	; 199
      78:	65 64       	ori	r22, 0x45	; 69
      7a:	67 65       	ori	r22, 0x57	; 87
      7c:	64 20       	and	r6, r4
      7e:	72 65       	ori	r23, 0x52	; 82
      80:	71 75       	andi	r23, 0x51	; 81
      82:	65 73       	andi	r22, 0x35	; 53
      84:	74 20       	and	r7, r4
      86:	6e 6f       	ori	r22, 0xFE	; 254
      88:	74 20       	and	r7, r4
      8a:	66 6f       	ori	r22, 0xF6	; 246
      8c:	75 6e       	ori	r23, 0xE5	; 229
      8e:	64 20       	and	r6, r4
      90:	69 6e       	ori	r22, 0xE9	; 233
      92:	20 71       	andi	r18, 0x10	; 16
      94:	75 65       	ori	r23, 0x55	; 85
      96:	75 65       	ori	r23, 0x55	; 85
      98:	20 28       	or	r2, r0
      9a:	63 6f       	ori	r22, 0xF3	; 243
      9c:	75 6c       	ori	r23, 0xC5	; 197
      9e:	64 20       	and	r6, r4
      a0:	68 61       	ori	r22, 0x18	; 24
      a2:	76 65       	ori	r23, 0x56	; 86
      a4:	20 62       	ori	r18, 0x20	; 32
      a6:	65 65       	ori	r22, 0x55	; 85
      a8:	6e 20       	and	r6, r14
      aa:	74 68       	ori	r23, 0x84	; 132
      ac:	65 20       	and	r6, r5
      ae:	6c 61       	ori	r22, 0x1C	; 28
      b0:	73 74       	andi	r23, 0x43	; 67
      b2:	20 72       	andi	r18, 0x20	; 32
      b4:	65 74       	andi	r22, 0x45	; 69
      b6:	72 79       	andi	r23, 0x92	; 146
      b8:	29 2e       	mov	r2, r25
      ba:	0d 0a       	sbc	r0, r29
	...

000000bd <__c.2624>:
      bd:	57 61 72 6e 69 6e 67 3a 20 53 65 6e 64 65 72 49     Warning: SenderI
      cd:	44 20 66 72 6f 6d 20 61 63 6b 20 66 6f 75 6e 64     D from ack found
      dd:	20 69 6e 20 71 75 65 75 65 2c 20 62 75 74 20 50      in queue, but P
      ed:	61 63 6b 65 74 43 6f 75 6e 74 65 72 20 64 6f 65     acketCounter doe
      fd:	73 20 6e 6f 74 20 6d 61 74 63 68 2e 0d 0a 00        s not match....

0000010c <__c.2622>:
     10c:	52 65 71 75 65 73 74 20 71 75 65 75 65 20 25 75     Request queue %u
     11c:	20 69 73 20 6e 6f 77 20 65 6d 70 74 79 2e 0d 0a      is now empty...
	...

0000012d <__c.2617>:
     12d:	52 65 6d 6f 76 69 6e 67 20 72 65 71 75 65 73 74     Removing request
     13d:	20 66 72 6f 6d 20 72 65 71 75 65 73 74 20 62 75      from request bu
     14d:	66 66 65 72 20 73 6c 6f 74 20 25 75 2e 0d 0a 00     ffer slot %u....

0000015d <__c.2612>:
     15d:	49 67 6e 6f 72 69 6e 67 20 61 63 6b 20 28 72 65     Ignoring ack (re
     16d:	71 75 65 73 74 20 6e 6f 74 20 66 72 6f 6d 20 74     quest not from t
     17d:	68 69 73 20 64 65 76 69 63 65 29 2e 0d 0a 00        his device)....

0000018c <__c.2592>:
     18c:	0d 0a 00                                            ...

0000018f <__c.2590>:
     18f:	52 65 71 75 65 73 74 20 51 75 65 75 65 20 65 6d     Request Queue em
     19f:	70 74 79 00                                         pty.

000001a3 <__c.2585>:
     1a3:	0d 0a 00                                            ...

000001a6 <__c.2580>:
     1a6:	20 25 75 00                                          %u.

000001aa <__c.2578>:
     1aa:	20 2d 00                                             -.

000001ad <__c.2576>:
     1ad:	52 65 63 65 69 76 65 72 49 44 20 25 75 2c 20 42     ReceiverID %u, B
     1bd:	75 66 66 65 72 20 73 6c 6f 74 73 00                 uffer slots.

000001c9 <__c.2574>:
     1c9:	52 65 71 75 65 73 74 20 51 75 65 75 65 20 25 75     Request Queue %u
     1d9:	3a 20 00                                            : .

000001dc <__c.2569>:
     1dc:	0d 0a 00                                            ...

000001df <__c.2564>:
     1df:	20 25 30 32 78 00                                    %02x.

000001e5 <__c.2562>:
     1e5:	4d 65 73 73 61 67 65 54 79 70 65 20 25 75 2c 20     MessageType %u, 
     1f5:	50 61 63 6b 65 74 43 6f 75 6e 74 65 72 20 25 6c     PacketCounter %l
     205:	75 2c 20 54 69 6d 65 6f 75 74 20 25 75 2c 20 52     u, Timeout %u, R
     215:	65 74 72 79 20 25 75 2c 20 44 61 74 61 00           etry %u, Data.

00000223 <__c.2560>:
     223:	52 65 71 75 65 73 74 20 42 75 66 66 65 72 20 25     Request Buffer %
     233:	75 3a 20 00                                         u: .

00000237 <__c.3019>:
     237:	2a 2a 2a 20 55 41 52 54 20 75 73 65 72 20 74 69     *** UART user ti
     247:	6d 65 6f 75 74 2e 20 49 6e 70 75 74 20 77 61 73     meout. Input was
     257:	20 69 67 6e 6f 72 65 64 2e 20 2a 2a 2a 0d 0a 00      ignored. ***...

00000267 <__c.3017>:
     267:	52 65 70 65 61 74 69 6e 67 20 72 65 71 75 65 73     Repeating reques
     277:	74 2e 0d 0a 00                                      t....

0000027c <__c.3014>:
     27c:	57 61 72 6e 69 6e 67 21 20 52 65 71 75 65 73 74     Warning! Request
     28c:	20 71 75 65 75 65 20 66 75 6c 6c 2e 20 50 61 63      queue full. Pac
     29c:	6b 65 74 20 77 69 6c 6c 20 6e 6f 74 20 62 65 20     ket will not be 
     2ac:	73 65 6e 74 2e 0d 0a 00                             sent....

000002b4 <__c.3012>:
     2b4:	52 65 71 75 65 73 74 20 61 64 64 65 64 20 74 6f     Request added to
     2c4:	20 71 75 65 75 65 20 28 25 75 20 62 79 74 65 73      queue (%u bytes
     2d4:	20 70 61 63 6b 65 74 29 2e 0d 0a 00                  packet)....

000002e0 <__c.3010>:
     2e0:	53 65 6e 64 69 6e 67 20 62 72 6f 61 64 63 61 73     Sending broadcas
     2f0:	74 20 72 65 71 75 65 73 74 20 77 69 74 68 6f 75     t request withou
     300:	74 20 75 73 69 6e 67 20 71 75 65 75 65 2e 0d 0a     t using queue...
	...

00000311 <__c.3007>:
     311:	54 72 75 6e 63 61 74 65 20 4d 65 73 73 61 67 65     Truncate Message
     321:	44 61 74 61 20 66 72 6f 6d 20 25 75 20 74 6f 20     Data from %u to 
     331:	25 75 20 62 79 74 65 73 2e 0d 0a 00                 %u bytes....

0000033d <__c.2988>:
     33d:	0d 0a 00                                            ...

00000340 <__c.2986>:
     340:	52 65 63 65 69 76 65 64 20 67 61 72 62 61 67 65     Received garbage
     350:	20 28 43 52 43 20 77 72 6f 6e 67 20 61 66 74 65      (CRC wrong afte
     360:	72 20 64 65 63 72 79 70 74 69 6f 6e 29 3a 20 00     r decryption): .

00000370 <__c.2981>:
     370:	52 65 63 65 69 76 65 64 20 28 41 45 53 20 6b 65     Received (AES ke
     380:	79 20 25 75 29 3a 20 00                             y %u): .

00000388 <__c.2978>:
     388:	52 65 63 65 69 76 65 64 20 67 61 72 62 61 67 65     Received garbage
     398:	20 28 25 75 20 62 79 74 65 73 20 6e 6f 74 20 6d      (%u bytes not m
     3a8:	75 6c 74 69 70 6c 65 20 6f 66 20 31 36 29 3a 20     ultiple of 16): 
	...

000003b9 <__c.2975>:
     3b9:	57 61 69 74 69 6e 67 20 66 6f 72 20 69 6e 63 6f     Waiting for inco
     3c9:	6d 69 6e 67 20 64 61 74 61 2e 20 50 72 65 73 73     ming data. Press
     3d9:	20 68 20 66 6f 72 20 68 65 6c 70 2e 0d 0a 0d 0a      h for help.....
	...

000003ea <__c.2973>:
     3ea:	41 45 53 20 6b 65 79 20 63 6f 75 6e 74 3a 20 25     AES key count: %
     3fa:	75 0d 0a 00                                         u...

000003fe <__c.2971>:
     3fe:	50 61 63 6b 65 74 20 63 6f 75 6e 74 65 72 3a 20     Packet counter: 
     40e:	25 6c 75 0d 0a 00                                   %lu...

00000414 <__c.2969>:
     414:	44 65 76 69 63 65 20 49 44 3a 20 25 75 0d 0a 00     Device ID: %u...

00000424 <__c.2967>:
     424:	28 63 29 20 32 30 31 32 2e 2e 32 30 31 34 20 55     (c) 2012..2014 U
     434:	77 65 20 46 72 65 65 73 65 2c 20 77 77 77 2e 73     we Freese, www.s
     444:	6d 61 72 74 68 6f 6d 61 74 69 63 2e 6f 72 67 0d     marthomatic.org.
     454:	0a 00                                               ..

00000456 <__c.2965>:
     456:	73 6d 61 72 74 68 6f 6d 61 74 69 63 20 42 61 73     smarthomatic Bas
     466:	65 20 53 74 61 74 69 6f 6e 20 76 25 75 2e 25 75     e Station v%u.%u
     476:	2e 25 75 20 28 25 30 38 6c 78 29 0d 0a 00           .%u (%08lx)...

00000484 <__c.2963>:
     484:	0d 0a 00                                            ...

00000487 <__c.2951>:
     487:	0d 0a 00                                            ...

0000048a <__c.2946>:
     48a:	54 69 6d 65 6f 75 74 53 65 63 3d 25 75 3b 00        TimeoutSec=%u;.

00000499 <__c.2944>:
     499:	4f 6e 3d 25 75 3b 00                                On=%u;.

000004a0 <__c.2939>:
     4a0:	3b 00                                               ;.

000004a2 <__c.2937>:
     4a2:	50 72 65 73 73 75 72 65 3d 25 6c 64 3b 54 65 6d     Pressure=%ld;Tem
     4b2:	70 65 72 61 74 75 72 65 3d 00                       perature=.

000004bc <__c.2934>:
     4bc:	3b 00                                               ;.

000004be <__c.2932>:
     4be:	48 75 6d 69 64 69 74 79 3d 25 75 2e 25 75 3b 54     Humidity=%u.%u;T
     4ce:	65 6d 70 65 72 61 74 75 72 65 3d 00                 emperature=.

000004da <__c.2928>:
     4da:	3b 00                                               ;.

000004dc <__c.2926>:
     4dc:	54 65 6d 70 65 72 61 74 75 72 65 3d 00              Temperature=.

000004e9 <__c.2920>:
     4e9:	50 65 72 63 65 6e 74 61 67 65 3d 25 75 3b 00        Percentage=%u;.

000004f8 <__c.2916>:
     4f8:	48 61 73 68 3d 25 30 38 6c 78 3b 00                 Hash=%08lx;.

00000504 <__c.2914>:
     504:	50 61 74 63 68 3d 25 75 3b 00                       Patch=%u;.

0000050e <__c.2912>:
     50e:	4d 69 6e 6f 72 3d 25 75 3b 00                       Minor=%u;.

00000518 <__c.2910>:
     518:	4d 61 6a 6f 72 3d 25 75 3b 00                       Major=%u;.

00000522 <__c.2906>:
     522:	3b 00                                               ;.

00000524 <__c.2901>:
     524:	25 30 32 78 00                                      %02x.

00000529 <__c.2899>:
     529:	4d 65 73 73 61 67 65 44 61 74 61 3d 00              MessageData=.

00000536 <__c.2895>:
     536:	4d 65 73 73 61 67 65 49 44 3d 25 75 3b 00           MessageID=%u;.

00000544 <__c.2893>:
     544:	4d 65 73 73 61 67 65 47 72 6f 75 70 49 44 3d 25     MessageGroupID=%
     554:	75 3b 00                                            u;.

00000557 <__c.2891>:
     557:	45 72 72 6f 72 3d 25 75 3b 00                       Error=%u;.

00000561 <__c.2889>:
     561:	41 63 6b 50 61 63 6b 65 74 43 6f 75 6e 74 65 72     AckPacketCounter
     571:	3d 25 6c 75 3b 00                                   =%lu;.

00000577 <__c.2887>:
     577:	41 63 6b 53 65 6e 64 65 72 49 44 3d 25 75 3b 00     AckSenderID=%u;.

00000587 <__c.2882>:
     587:	52 65 63 65 69 76 65 72 49 44 3d 25 75 3b 00        ReceiverID=%u;.

00000596 <__c.2879>:
     596:	4d 65 73 73 61 67 65 54 79 70 65 3d 25 75 3b 00     MessageType=%u;.

000005a6 <__c.2877>:
     5a6:	50 61 63 6b 65 74 43 6f 75 6e 74 65 72 3d 25 6c     PacketCounter=%l
     5b6:	75 3b 00                                            u;.

000005b9 <__c.2875>:
     5b9:	50 61 63 6b 65 74 20 44 61 74 61 3a 20 53 65 6e     Packet Data: Sen
     5c9:	64 65 72 49 44 3d 25 75 3b 00                       derID=%u;.

000005d3 <__c.2429>:
     5d3:	2a 2a 2a 20 43 68 61 72 61 63 74 65 72 20 69 67     *** Character ig
     5e3:	6e 6f 72 65 64 2e 20 50 72 65 73 73 20 68 20 66     nored. Press h f
     5f3:	6f 72 20 68 65 6c 70 2e 20 2a 2a 2a 0d 0a 00        or help. ***...

00000602 <__c.2427>:
     602:	2a 2a 2a 20 45 6e 74 65 72 20 41 45 53 20 6b 65     *** Enter AES ke
     612:	79 20 6e 72 2c 20 4d 65 73 73 61 67 65 54 79 70     y nr, MessageTyp
     622:	65 2c 20 68 65 61 64 65 72 20 65 78 74 65 6e 73     e, header extens
     632:	69 6f 6e 20 2b 20 64 61 74 61 20 69 6e 20 68 65     ion + data in he
     642:	78 20 66 6f 72 6d 61 74 20 74 6f 20 73 65 6e 64     x format to send
     652:	2c 20 66 69 6e 69 73 68 20 77 69 74 68 20 45 4e     , finish with EN
     662:	54 45 52 2e 20 2a 2a 2a 0d 0a 00                    TER. ***...

0000066d <__c.2425>:
     66d:	2a 2a 2a 20 57 72 69 74 65 20 74 6f 20 45 45 50     *** Write to EEP
     67d:	52 4f 4d 2e 20 45 6e 74 65 72 20 61 64 64 72 65     ROM. Enter addre
     68d:	73 73 20 61 6e 64 20 64 61 74 61 20 28 34 20 63     ss and data (4 c
     69d:	68 61 72 61 63 74 65 72 73 29 2e 20 2a 2a 2a 0d     haracters). ***.
     6ad:	0a 00                                               ..

000006af <__c.2423>:
     6af:	2a 2a 2a 20 52 65 61 64 20 66 72 6f 6d 20 45 45     *** Read from EE
     6bf:	50 52 4f 4d 2e 20 45 6e 74 65 72 20 61 64 64 72     PROM. Enter addr
     6cf:	65 73 73 20 28 32 20 63 68 61 72 61 63 74 65 72     ess (2 character
     6df:	73 29 2e 20 2a 2a 2a 0d 0a 00                       s). ***...

000006e9 <__c.2421>:
     6e9:	2a 2a 2a 20 57 72 69 74 69 6e 67 20 74 6f 20 45     *** Writing to E
     6f9:	45 50 52 4f 4d 20 69 73 20 6e 6f 77 20 44 49 53     EPROM is now DIS
     709:	41 42 4c 45 44 2e 20 2a 2a 2a 0d 0a 00              ABLED. ***...

00000716 <__c.2419>:
     716:	2a 2a 2a 20 57 72 69 74 69 6e 67 20 74 6f 20 45     *** Writing to E
     726:	45 50 52 4f 4d 20 69 73 20 6e 6f 77 20 45 4e 41     EPROM is now ENA
     736:	42 4c 45 44 2e 20 2a 2a 2a 0d 0a 00                 BLED. ***...

00000742 <__c.2417>:
     742:	73 4b 4b 30 41 53 53 53 53 50 50 50 50 50 50 45     sKK0ASSSSPPPPPPE
     752:	45 47 47 4d 4d 44 44 2e 2e 2e 41 63 6b 53 74 61     EGGMMDD...AckSta
     762:	74 75 73 0d 0a 00                                   tus...

00000768 <__c.2415>:
     768:	73 4b 4b 30 39 53 53 53 53 50 50 50 50 50 50 45     sKK09SSSSPPPPPPE
     778:	45 2e 2e 2e 2e 2e 2e 2e 2e 2e 41 63 6b 0d 0a 00     E.........Ack...

00000788 <__c.2413>:
     788:	73 4b 4b 30 38 47 47 4d 4d 44 44 2e 2e 2e 2e 2e     sKK08GGMMDD.....
     798:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 53 74 61 74 75 73     ..........Status
     7a8:	0d 0a 00                                            ...

000007ab <__c.2411>:
     7ab:	73 4b 4b 30 32 52 52 52 52 47 47 4d 4d 44 44 2e     sKK02RRRRGGMMDD.
     7bb:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 53 65 74 47 65 74     ..........SetGet
     7cb:	0d 0a 00                                            ...

000007ce <__c.2409>:
     7ce:	73 4b 4b 30 31 52 52 52 52 47 47 4d 4d 44 44 2e     sKK01RRRRGGMMDD.
     7de:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 53 65 74 0d 0a 00     ..........Set...

000007ee <__c.2407>:
     7ee:	73 4b 4b 30 30 52 52 52 52 47 47 4d 4d 44 44 2e     sKK00RRRRGGMMDD.
     7fe:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 47 65 74 0d 0a 00     ..........Get...

0000080e <__c.2405>:
     80e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 45                    E
     81e:	6e 64 20 64 61 74 61 20 77 69 74 68 20 45 4e 54     nd data with ENT
     82e:	45 52 2e 20 53 65 6e 64 65 72 49 44 2c 20 50 61     ER. SenderID, Pa
     83e:	63 6b 65 74 43 6f 75 6e 74 65 72 20 61 6e 64 20     cketCounter and 
     84e:	43 52 43 20 61 72 65 20 61 75 74 6f 6d 61 74 69     CRC are automati
     85e:	63 61 6c 6c 79 20 61 64 64 65 64 2e 0d 0a 00        cally added....

0000086d <__c.2403>:
     86d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 4d                    M
     87d:	65 73 73 61 67 65 44 61 74 61 20 28 44 44 29 20     essageData (DD) 
     88d:	63 61 6e 20 62 65 20 30 2e 2e 31 37 20 62 79 74     can be 0..17 byt
     89d:	65 73 20 77 69 74 68 20 62 69 74 73 20 6d 6f 76     es with bits mov
     8ad:	65 64 20 74 6f 20 74 68 65 20 6c 65 66 74 2e 0d     ed to the left..
     8bd:	0a 00                                               ..

000008bf <__c.2401>:
     8bf:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 41                    A
     8cf:	63 6b 53 65 6e 64 65 72 49 44 20 28 53 53 53 53     ckSenderID (SSSS
     8df:	29 2c 20 41 63 6b 50 61 63 6b 65 74 43 6f 75 6e     ), AckPacketCoun
     8ef:	74 65 72 20 28 50 50 50 50 50 50 29 2c 20 45 72     ter (PPPPPP), Er
     8ff:	72 6f 72 20 28 45 45 29 2e 0d 0a 00                 ror (EE)....

0000090b <__c.2399>:
     90b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 46                    F
     91b:	69 65 6c 64 73 20 61 72 65 3a 20 52 65 63 65 69     ields are: Recei
     92b:	76 65 72 49 44 20 28 52 52 52 52 29 2c 20 4d 65     verID (RRRR), Me
     93b:	73 73 61 67 65 47 72 6f 75 70 20 28 47 47 29 2c     ssageGroup (GG),
     94b:	20 4d 65 73 73 61 67 65 49 44 20 28 4d 4d 29 0d      MessageID (MM).
     95b:	0a 00                                               ..

0000095d <__c.2397>:
     95d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 62                    b
     96d:	79 20 61 6c 6c 20 6e 65 63 65 73 73 61 72 79 20     y all necessary 
     97d:	65 78 74 65 6e 73 69 6f 6e 20 68 65 61 64 65 72     extension header
     98d:	20 66 69 65 6c 64 73 20 61 6e 64 20 6d 65 73 73      fields and mess
     99d:	61 67 65 20 64 61 74 61 2e 0d 0a 00                 age data....

000009a9 <__c.2395>:
     9a9:	73 4b 4b 7b 54 7d 7b 58 7d 7b 44 7d 2e 2e 2e 55     sKK{T}{X}{D}...U
     9b9:	73 65 20 41 45 53 20 6b 65 79 20 4b 4b 20 74 6f     se AES key KK to
     9c9:	20 73 65 6e 64 20 61 20 70 61 63 6b 65 74 20 77      send a packet w
     9d9:	69 74 68 20 4d 65 73 73 61 67 65 54 79 70 65 20     ith MessageType 
     9e9:	54 2c 20 66 6f 6c 6c 6f 77 65 64 0d 0a 00           T, followed...

000009f7 <__c.2393>:
     9f7:	7a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 64     z..............d
     a07:	69 73 61 62 6c 65 20 77 72 69 74 69 6e 67 20 74     isable writing t
     a17:	6f 20 45 45 50 52 4f 4d 0d 0a 00                    o EEPROM...

00000a22 <__c.2391>:
     a22:	78 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 65     x..............e
     a32:	6e 61 62 6c 65 20 77 72 69 74 69 6e 67 20 74 6f     nable writing to
     a42:	20 45 45 50 52 4f 4d 0d 0a 00                        EEPROM...

00000a4c <__c.2389>:
     a4c:	77 41 41 58 58 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 77     wAAXX..........w
     a5c:	72 69 74 65 20 45 45 50 52 4f 4d 20 61 74 20 68     rite EEPROM at h
     a6c:	65 78 20 61 64 64 72 65 73 73 20 41 41 20 74 6f     ex address AA to
     a7c:	20 68 65 78 20 76 61 6c 75 65 20 58 58 0d 0a 00      hex value XX...

00000a8c <__c.2387>:
     a8c:	72 41 41 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 72     rAA............r
     a9c:	65 61 64 20 45 45 50 52 4f 4d 20 61 74 20 68 65     ead EEPROM at he
     aac:	78 20 61 64 64 72 65 73 73 20 41 41 0d 0a 00        x address AA...

00000abb <__c.2385>:
     abb:	68 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 74     h..............t
     acb:	68 69 73 20 68 65 6c 70 0d 0a 00                    his help...

00000ad6 <__c.2383>:
     ad6:	2a 2a 2a 20 48 65 6c 70 20 2a 2a 2a 0d 0a 00        *** Help ***...

00000ae5 <__c.2381>:
     ae5:	2a 2a 2a 20 49 6c 6c 65 67 61 6c 20 63 68 61 72     *** Illegal char
     af5:	61 63 74 65 72 2e 20 55 73 65 20 6f 6e 6c 79 20     acter. Use only 
     b05:	30 2e 2e 39 2c 20 61 2e 2e 66 2c 20 41 2e 2e 46     0..9, a..f, A..F
     b15:	2e 20 2a 2a 2a 0d 0a 00                             . ***...

00000b1d <__c.2379>:
     b1d:	2a 2a 2a 20 52 65 63 65 69 76 65 64 20 63 68 61     *** Received cha
     b2d:	72 61 63 74 65 72 20 25 63 20 28 41 53 43 49 49     racter %c (ASCII
     b3d:	20 25 75 29 20 3d 20 76 61 6c 75 65 20 30 78 25      %u) = value 0x%
     b4d:	78 2c 20 25 75 20 62 79 74 65 73 20 74 6f 20 67     x, %u bytes to g
     b5d:	6f 2e 20 2a 2a 2a 0d 0a 00                          o. ***...

00000b66 <__c.2373>:
     b66:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 2e     Unknown command.
     b76:	0d 0a 00                                            ...

00000b79 <__c.2371>:
     b79:	45 45 50 52 4f 4d 20 76 61 6c 75 65 20 61 74 20     EEPROM value at 
     b89:	70 6f 73 69 74 69 6f 6e 20 30 78 25 78 20 69 73     position 0x%x is
     b99:	20 30 78 25 78 2e 0d 0a 00                           0x%x....

00000ba2 <__c.2367>:
     ba2:	49 67 6e 6f 72 69 6e 67 20 45 45 50 52 4f 4d 20     Ignoring EEPROM 
     bb2:	77 72 69 74 65 2c 20 73 69 6e 63 65 20 77 72 69     write, since wri
     bc2:	74 65 20 6d 6f 64 65 20 69 73 20 44 49 53 41 42     te mode is DISAB
     bd2:	4c 45 44 2e 0d 0a 00                                LED....

00000bd9 <__c.2365>:
     bd9:	57 72 69 74 69 6e 67 20 64 61 74 61 20 30 78 25     Writing data 0x%
     be9:	78 20 74 6f 20 45 45 50 52 4f 4d 20 70 6f 73 20     x to EEPROM pos 
     bf9:	30 78 25 78 2e 0d 0a 00                             0x%x....

00000c01 <__c.2361>:
     c01:	0d 0a 00                                            ...

00000c04 <__c.2356>:
     c04:	0d 0a 00                                            ...

00000c07 <__c.2351>:
     c07:	25 30 32 78 20 00                                   %02x .

00000c0d <__c.2344>:
     c0d:	25 64 2e 25 30 32 64 00                             %d.%02d.

00000c15 <__c.2342>:
     c15:	2d 00                                               -.

00000c17 <__c.2684>:
     c17:	41 66 74 65 72 20 65 6e 63 72 79 70 74 69 6f 6e     After encryption
     c27:	3a 20 20 00                                         :  .

00000c2b <__c.2681>:
     c2b:	42 65 66 6f 72 65 20 65 6e 63 72 79 70 74 69 6f     Before encryptio
     c3b:	6e 3a 20 00 00                                      n: ..

00000c40 <__ctors_end>:
     c40:	11 24       	eor	r1, r1
     c42:	1f be       	out	0x3f, r1	; 63
     c44:	cf ef       	ldi	r28, 0xFF	; 255
     c46:	d8 e0       	ldi	r29, 0x08	; 8
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	cd bf       	out	0x3d, r28	; 61

00000c4c <__do_copy_data>:
     c4c:	11 e0       	ldi	r17, 0x01	; 1
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b1 e0       	ldi	r27, 0x01	; 1
     c52:	e4 ea       	ldi	r30, 0xA4	; 164
     c54:	f2 e5       	ldi	r31, 0x52	; 82
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__do_copy_data+0x10>
     c58:	05 90       	lpm	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	a6 31       	cpi	r26, 0x16	; 22
     c5e:	b1 07       	cpc	r27, r17
     c60:	d9 f7       	brne	.-10     	; 0xc58 <__do_copy_data+0xc>

00000c62 <__do_clear_bss>:
     c62:	25 e0       	ldi	r18, 0x05	; 5
     c64:	a6 e1       	ldi	r26, 0x16	; 22
     c66:	b1 e0       	ldi	r27, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <.do_clear_bss_start>

00000c6a <.do_clear_bss_loop>:
     c6a:	1d 92       	st	X+, r1

00000c6c <.do_clear_bss_start>:
     c6c:	a9 30       	cpi	r26, 0x09	; 9
     c6e:	b2 07       	cpc	r27, r18
     c70:	e1 f7       	brne	.-8      	; 0xc6a <.do_clear_bss_loop>
     c72:	0e 94 38 19 	call	0x3270	; 0x3270 <main>
     c76:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <_exit>

00000c7a <__bad_interrupt>:
     c7a:	c2 c9       	rjmp	.-3196   	; 0x0 <__vectors>
	...

00000d00 <aes256_dec>:
P = 0
xREDUCER = 25 

.global aes256_dec
aes256_dec:
	ldi r20, 14
     d00:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_decrypt_core
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <aes_decrypt_core>

00000d04 <aes192_dec>:

.global aes192_dec
aes192_dec:
	ldi r20, 12
     d04:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_decrypt_core
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <aes_decrypt_core>

00000d08 <aes128_dec>:

.global aes128_dec
aes128_dec:
	ldi r20, 10
     d08:	4a e0       	ldi	r20, 0x0A	; 10

00000d0a <aes_decrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_decrypt_core
aes_decrypt_core:
	push_range 2, 17
     d0a:	2f 92       	push	r2
     d0c:	3f 92       	push	r3
     d0e:	4f 92       	push	r4
     d10:	5f 92       	push	r5
     d12:	6f 92       	push	r6
     d14:	7f 92       	push	r7
     d16:	8f 92       	push	r8
     d18:	9f 92       	push	r9
     d1a:	af 92       	push	r10
     d1c:	bf 92       	push	r11
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
	push r28
     d2a:	cf 93       	push	r28
	push r29
     d2c:	df 93       	push	r29
	push r24
     d2e:	8f 93       	push	r24
	push r25
     d30:	9f 93       	push	r25
	movw r26, r22
     d32:	db 01       	movw	r26, r22
	movw r30, r24
     d34:	fc 01       	movw	r30, r24
	mov  CTR, r20
     d36:	84 2f       	mov	r24, r20
	inc r20
     d38:	43 95       	inc	r20
	swap r20 /* r20*16 */
     d3a:	42 95       	swap	r20
	add r26, r20
     d3c:	a4 0f       	add	r26, r20
	adc r27, r1
     d3e:	b1 1d       	adc	r27, r1
	clt
     d40:	e8 94       	clt
	.irp param, ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld \param, Z+
	.endr
     d42:	81 90       	ld	r8, Z+
     d44:	91 90       	ld	r9, Z+
     d46:	a1 90       	ld	r10, Z+
     d48:	b1 90       	ld	r11, Z+
     d4a:	c1 90       	ld	r12, Z+
     d4c:	d1 90       	ld	r13, Z+
     d4e:	e1 90       	ld	r14, Z+
     d50:	f1 90       	ld	r15, Z+
     d52:	01 91       	ld	r16, Z+
     d54:	11 91       	ld	r17, Z+
     d56:	21 91       	ld	r18, Z+
     d58:	31 91       	ld	r19, Z+
     d5a:	41 91       	ld	r20, Z+
     d5c:	51 91       	ld	r21, Z+
     d5e:	61 91       	ld	r22, Z+
     d60:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
     d62:	9b e1       	ldi	r25, 0x1B	; 27
	

	.irp param, ST33, ST32, ST31, ST30, ST23, ST22, ST21, ST20, ST13, ST12, ST11, ST10, ST03, ST02, ST01, ST00
		ld r0, -X
		eor \param, r0
	.endr
     d64:	0e 90       	ld	r0, -X
     d66:	70 25       	eor	r23, r0
     d68:	0e 90       	ld	r0, -X
     d6a:	60 25       	eor	r22, r0
     d6c:	0e 90       	ld	r0, -X
     d6e:	50 25       	eor	r21, r0
     d70:	0e 90       	ld	r0, -X
     d72:	40 25       	eor	r20, r0
     d74:	0e 90       	ld	r0, -X
     d76:	30 25       	eor	r19, r0
     d78:	0e 90       	ld	r0, -X
     d7a:	20 25       	eor	r18, r0
     d7c:	0e 90       	ld	r0, -X
     d7e:	10 25       	eor	r17, r0
     d80:	0e 90       	ld	r0, -X
     d82:	00 25       	eor	r16, r0
     d84:	0e 90       	ld	r0, -X
     d86:	f0 24       	eor	r15, r0
     d88:	0e 90       	ld	r0, -X
     d8a:	e0 24       	eor	r14, r0
     d8c:	0e 90       	ld	r0, -X
     d8e:	d0 24       	eor	r13, r0
     d90:	0e 90       	ld	r0, -X
     d92:	c0 24       	eor	r12, r0
     d94:	0e 90       	ld	r0, -X
     d96:	b0 24       	eor	r11, r0
     d98:	0e 90       	ld	r0, -X
     d9a:	a0 24       	eor	r10, r0
     d9c:	0e 90       	ld	r0, -X
     d9e:	90 24       	eor	r9, r0
     da0:	0e 90       	ld	r0, -X
     da2:	80 24       	eor	r8, r0
1:
	dec CTR
     da4:	8a 95       	dec	r24
	brne 2f
     da6:	09 f4       	brne	.+2      	; 0xdaa <aes_decrypt_core+0xa0>
	set
     da8:	68 94       	set
2:	
	ldi r31, hi8(aes_invsbox)
     daa:	f5 e1       	ldi	r31, 0x15	; 21
	/* substitute and invShift */
	.irp param, ST00, ST10, ST20, ST30
		mov r30, \param
		lpm \param, Z
	.endr
     dac:	e8 2d       	mov	r30, r8
     dae:	84 90       	lpm	r8, Z
     db0:	ec 2d       	mov	r30, r12
     db2:	c4 90       	lpm	r12, Z
     db4:	e0 2f       	mov	r30, r16
     db6:	04 91       	lpm	r16, Z
     db8:	e4 2f       	mov	r30, r20
     dba:	44 91       	lpm	r20, Z
	mov r30, ST31
     dbc:	e5 2f       	mov	r30, r21
	lpm T0, Z
     dbe:	24 90       	lpm	r2, Z
	mov r30, ST21
     dc0:	e1 2f       	mov	r30, r17
	lpm ST31, Z
     dc2:	54 91       	lpm	r21, Z
	mov r30, ST11
     dc4:	ed 2d       	mov	r30, r13
	lpm ST21, Z
     dc6:	14 91       	lpm	r17, Z
	mov r30, ST01
     dc8:	e9 2d       	mov	r30, r9
	lpm ST11, Z
     dca:	d4 90       	lpm	r13, Z
	mov ST01, T0
     dcc:	92 2c       	mov	r9, r2
	
	mov r30, ST32
     dce:	e6 2f       	mov	r30, r22
	lpm T0, Z
     dd0:	24 90       	lpm	r2, Z
	mov r30, ST22
     dd2:	e2 2f       	mov	r30, r18
	lpm T1,Z
     dd4:	34 90       	lpm	r3, Z
	mov r30, ST12
     dd6:	ee 2d       	mov	r30, r14
	lpm ST32, Z
     dd8:	64 91       	lpm	r22, Z
	mov r30, ST02
     dda:	ea 2d       	mov	r30, r10
	lpm ST22, Z
     ddc:	24 91       	lpm	r18, Z
	mov ST12, T0
     dde:	e2 2c       	mov	r14, r2
	mov ST02, T1
     de0:	a3 2c       	mov	r10, r3
	
	mov r30, ST03
     de2:	eb 2d       	mov	r30, r11
	lpm T0, Z
     de4:	24 90       	lpm	r2, Z
	mov r30, ST13
     de6:	ef 2d       	mov	r30, r15
	lpm ST03, Z
     de8:	b4 90       	lpm	r11, Z
	mov r30, ST23
     dea:	e3 2f       	mov	r30, r19
	lpm ST13, Z
     dec:	f4 90       	lpm	r15, Z
	mov r30, ST33
     dee:	e7 2f       	mov	r30, r23
	lpm ST23, Z
     df0:	34 91       	lpm	r19, Z
	mov ST33, T0
     df2:	72 2d       	mov	r23, r2
	
	/* key addition */
	.irp param, ST33, ST32, ST31, ST30, ST23, ST22, ST21, ST20, ST13, ST12, ST11, ST10, ST03, ST02, ST01, ST00
		ld r0, -X
		eor \param, r0
	.endr
     df4:	0e 90       	ld	r0, -X
     df6:	70 25       	eor	r23, r0
     df8:	0e 90       	ld	r0, -X
     dfa:	60 25       	eor	r22, r0
     dfc:	0e 90       	ld	r0, -X
     dfe:	50 25       	eor	r21, r0
     e00:	0e 90       	ld	r0, -X
     e02:	40 25       	eor	r20, r0
     e04:	0e 90       	ld	r0, -X
     e06:	30 25       	eor	r19, r0
     e08:	0e 90       	ld	r0, -X
     e0a:	20 25       	eor	r18, r0
     e0c:	0e 90       	ld	r0, -X
     e0e:	10 25       	eor	r17, r0
     e10:	0e 90       	ld	r0, -X
     e12:	00 25       	eor	r16, r0
     e14:	0e 90       	ld	r0, -X
     e16:	f0 24       	eor	r15, r0
     e18:	0e 90       	ld	r0, -X
     e1a:	e0 24       	eor	r14, r0
     e1c:	0e 90       	ld	r0, -X
     e1e:	d0 24       	eor	r13, r0
     e20:	0e 90       	ld	r0, -X
     e22:	c0 24       	eor	r12, r0
     e24:	0e 90       	ld	r0, -X
     e26:	b0 24       	eor	r11, r0
     e28:	0e 90       	ld	r0, -X
     e2a:	a0 24       	eor	r10, r0
     e2c:	0e 90       	ld	r0, -X
     e2e:	90 24       	eor	r9, r0
     e30:	0e 90       	ld	r0, -X
     e32:	80 24       	eor	r8, r0
	brtc 2f
     e34:	2e f5       	brtc	.+74     	; 0xe80 <exit+0x4a>

00000e36 <exit>:
exit:
	pop r31
     e36:	ff 91       	pop	r31
	pop r30
     e38:	ef 91       	pop	r30
	st Z+, ST00
     e3a:	81 92       	st	Z+, r8
	st Z+, ST01
     e3c:	91 92       	st	Z+, r9
	st Z+, ST02
     e3e:	a1 92       	st	Z+, r10
	st Z+, ST03
     e40:	b1 92       	st	Z+, r11
	st Z+, ST10
     e42:	c1 92       	st	Z+, r12
	st Z+, ST11
     e44:	d1 92       	st	Z+, r13
	st Z+, ST12
     e46:	e1 92       	st	Z+, r14
	st Z+, ST13
     e48:	f1 92       	st	Z+, r15
	st Z+, ST20
     e4a:	01 93       	st	Z+, r16
	st Z+, ST21
     e4c:	11 93       	st	Z+, r17
	st Z+, ST22
     e4e:	21 93       	st	Z+, r18
	st Z+, ST23
     e50:	31 93       	st	Z+, r19
	st Z+, ST30
     e52:	41 93       	st	Z+, r20
	st Z+, ST31
     e54:	51 93       	st	Z+, r21
	st Z+, ST32
     e56:	61 93       	st	Z+, r22
	st Z+, ST33
     e58:	71 93       	st	Z+, r23
	pop r29
     e5a:	df 91       	pop	r29
	pop r28
     e5c:	cf 91       	pop	r28
	pop_range 2, 17
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	7f 90       	pop	r7
     e74:	6f 90       	pop	r6
     e76:	5f 90       	pop	r5
     e78:	4f 90       	pop	r4
     e7a:	3f 90       	pop	r3
     e7c:	2f 90       	pop	r2
	ret
     e7e:	08 95       	ret
2:	
	/* inv column (row) mixing*/
	/* invMixCol (Row) 1 */
		/* preparing */
	ldi r31, hi8(lut_gf256mul_0x09)
     e80:	f0 e1       	ldi	r31, 0x10	; 16
	mov T0, ST03
     e82:	2b 2c       	mov	r2, r11
	eor T0, ST02 ; T0 = t
     e84:	2a 24       	eor	r2, r10
	mov T1, ST00
     e86:	38 2c       	mov	r3, r8
	eor T1, ST01 ; T1 = u
     e88:	39 24       	eor	r3, r9
	mov r30, T0
     e8a:	e2 2d       	mov	r30, r2
	eor r30, T1
     e8c:	e3 25       	eor	r30, r3
	lpm T2, Z  ; T2 = v'
     e8e:	44 90       	lpm	r4, Z
	
	ldi r31, hi8(lut_gf256mul_0x04)
     e90:	f1 e1       	ldi	r31, 0x11	; 17
	mov r30, ST02
     e92:	ea 2d       	mov	r30, r10
	eor r30, ST00
     e94:	e8 25       	eor	r30, r8
	lpm T3, Z
     e96:	54 90       	lpm	r5, Z
	eor T3, T2;  T3 = w
     e98:	54 24       	eor	r5, r4
	
	mov r30, ST03
     e9a:	eb 2d       	mov	r30, r11
	eor r30, ST01
     e9c:	e9 25       	eor	r30, r9
	lpm P, Z  ; T2 = v
     e9e:	04 90       	lpm	r0, Z
	eor T2, P 
     ea0:	40 24       	eor	r4, r0
	 
	   /* now the big move */
	mov T4, ST00
     ea2:	68 2c       	mov	r6, r8
	eor T4, ST03
     ea4:	6b 24       	eor	r6, r11
	lsl T4
     ea6:	66 0c       	add	r6, r6
	brcc 3f
     ea8:	08 f4       	brcc	.+2      	; 0xeac <exit+0x76>
	eor T4, xREDUCER
     eaa:	69 26       	eor	r6, r25
3:  eor T4, T2
     eac:	64 24       	eor	r6, r4
	eor ST03, T4	
     eae:	b6 24       	eor	r11, r6

	mov T4, ST02
     eb0:	6a 2c       	mov	r6, r10
	eor T4, ST01
     eb2:	69 24       	eor	r6, r9
	lsl T4
     eb4:	66 0c       	add	r6, r6
	brcc 3f
     eb6:	08 f4       	brcc	.+2      	; 0xeba <exit+0x84>
	eor T4, xREDUCER
     eb8:	69 26       	eor	r6, r25
3:  eor T4, T2
     eba:	64 24       	eor	r6, r4
	eor ST01, T4
     ebc:	96 24       	eor	r9, r6
	
	lsl T0
     ebe:	22 0c       	add	r2, r2
	brcc 3f
     ec0:	08 f4       	brcc	.+2      	; 0xec4 <exit+0x8e>
	eor T0, xREDUCER
     ec2:	29 26       	eor	r2, r25
3:  eor T0, T3
     ec4:	25 24       	eor	r2, r5
	eor ST02, T0
     ec6:	a2 24       	eor	r10, r2
	
	lsl T1
     ec8:	33 0c       	add	r3, r3
	brcc 3f
     eca:	08 f4       	brcc	.+2      	; 0xece <exit+0x98>
	eor T1, xREDUCER
     ecc:	39 26       	eor	r3, r25
3:  eor T1, T3
     ece:	35 24       	eor	r3, r5
	eor ST00, T1
     ed0:	83 24       	eor	r8, r3
	
	/* invMixCol (Row) 2 */
		/* preparing */
	ldi r31, hi8(lut_gf256mul_0x09)
     ed2:	f0 e1       	ldi	r31, 0x10	; 16
	mov T0, ST13
     ed4:	2f 2c       	mov	r2, r15
	eor T0, ST12 ; T0 = t
     ed6:	2e 24       	eor	r2, r14
	mov T1, ST10
     ed8:	3c 2c       	mov	r3, r12
	eor T1, ST11 ; T1 = u
     eda:	3d 24       	eor	r3, r13
	mov r30, T0
     edc:	e2 2d       	mov	r30, r2
	eor r30, T1
     ede:	e3 25       	eor	r30, r3

	lpm T2, Z  ; T2 = v'
     ee0:	44 90       	lpm	r4, Z
	
	ldi r31, hi8(lut_gf256mul_0x04)
     ee2:	f1 e1       	ldi	r31, 0x11	; 17
	mov r30, ST12
     ee4:	ee 2d       	mov	r30, r14
	eor r30, ST10
     ee6:	ec 25       	eor	r30, r12
	lpm T3, Z
     ee8:	54 90       	lpm	r5, Z
	eor T3, T2;  T3 = w
     eea:	54 24       	eor	r5, r4
	
	mov r30, ST13
     eec:	ef 2d       	mov	r30, r15
	eor r30, ST11
     eee:	ed 25       	eor	r30, r13
	lpm P, Z
     ef0:	04 90       	lpm	r0, Z
	eor T2, P ; T2 = v
     ef2:	40 24       	eor	r4, r0
	 
	   /* now the big move */
	mov T4, ST10
     ef4:	6c 2c       	mov	r6, r12
	eor T4, ST13
     ef6:	6f 24       	eor	r6, r15
	lsl T4
     ef8:	66 0c       	add	r6, r6
	brcc 3f
     efa:	08 f4       	brcc	.+2      	; 0xefe <exit+0xc8>
	eor T4, xREDUCER
     efc:	69 26       	eor	r6, r25
3:  eor T4, T2
     efe:	64 24       	eor	r6, r4
	eor ST13, T4	
     f00:	f6 24       	eor	r15, r6

	mov T4, ST12
     f02:	6e 2c       	mov	r6, r14
	eor T4, ST11
     f04:	6d 24       	eor	r6, r13
	lsl T4
     f06:	66 0c       	add	r6, r6
	brcc 3f
     f08:	08 f4       	brcc	.+2      	; 0xf0c <exit+0xd6>
	eor T4, xREDUCER
     f0a:	69 26       	eor	r6, r25
3:  eor T4, T2
     f0c:	64 24       	eor	r6, r4
	eor ST11, T4
     f0e:	d6 24       	eor	r13, r6
	
	lsl T0
     f10:	22 0c       	add	r2, r2
	brcc 3f
     f12:	08 f4       	brcc	.+2      	; 0xf16 <exit+0xe0>
	eor T0, xREDUCER
     f14:	29 26       	eor	r2, r25
3:  eor T0, T3
     f16:	25 24       	eor	r2, r5
	eor ST12, T0
     f18:	e2 24       	eor	r14, r2
	
	lsl T1
     f1a:	33 0c       	add	r3, r3
	brcc 3f
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <exit+0xea>
	eor T1, xREDUCER
     f1e:	39 26       	eor	r3, r25
3:  eor T1, T3
     f20:	35 24       	eor	r3, r5
	eor ST10, T1
     f22:	c3 24       	eor	r12, r3
	
	/* invMixCol (Row) 2 */
		/* preparing */
	ldi r31, hi8(lut_gf256mul_0x09)
     f24:	f0 e1       	ldi	r31, 0x10	; 16
	mov T0, ST23
     f26:	23 2e       	mov	r2, r19
	eor T0, ST22 ; T0 = t
     f28:	22 26       	eor	r2, r18
	mov T1, ST20
     f2a:	30 2e       	mov	r3, r16
	eor T1, ST21 ; T1 = u
     f2c:	31 26       	eor	r3, r17
	mov r30, T0
     f2e:	e2 2d       	mov	r30, r2
	eor r30, T1
     f30:	e3 25       	eor	r30, r3

	lpm T2, Z  ; T2 = v'
     f32:	44 90       	lpm	r4, Z
	
	ldi r31, hi8(lut_gf256mul_0x04)
     f34:	f1 e1       	ldi	r31, 0x11	; 17
	mov r30, ST22
     f36:	e2 2f       	mov	r30, r18
	eor r30, ST20
     f38:	e0 27       	eor	r30, r16
	lpm T3, Z
     f3a:	54 90       	lpm	r5, Z
	eor T3, T2;  T3 = w
     f3c:	54 24       	eor	r5, r4
	
	mov r30, ST23
     f3e:	e3 2f       	mov	r30, r19
	eor r30, ST21
     f40:	e1 27       	eor	r30, r17
	lpm P, Z
     f42:	04 90       	lpm	r0, Z
	eor T2, P ; T2 = v
     f44:	40 24       	eor	r4, r0
	 
	   /* now the big move */
	mov T4, ST20
     f46:	60 2e       	mov	r6, r16
	eor T4, ST23
     f48:	63 26       	eor	r6, r19
	lsl T4
     f4a:	66 0c       	add	r6, r6
	brcc 3f
     f4c:	08 f4       	brcc	.+2      	; 0xf50 <exit+0x11a>
	eor T4, xREDUCER
     f4e:	69 26       	eor	r6, r25
3:  eor T4, T2
     f50:	64 24       	eor	r6, r4
	eor ST23, T4	
     f52:	36 25       	eor	r19, r6

	mov T4, ST22
     f54:	62 2e       	mov	r6, r18
	eor T4, ST21
     f56:	61 26       	eor	r6, r17
	lsl T4
     f58:	66 0c       	add	r6, r6
	brcc 3f
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <exit+0x128>
	eor T4, xREDUCER
     f5c:	69 26       	eor	r6, r25
3:  eor T4, T2
     f5e:	64 24       	eor	r6, r4
	eor ST21, T4
     f60:	16 25       	eor	r17, r6
	
	lsl T0
     f62:	22 0c       	add	r2, r2
	brcc 3f
     f64:	08 f4       	brcc	.+2      	; 0xf68 <exit+0x132>
	eor T0, xREDUCER
     f66:	29 26       	eor	r2, r25
3:  eor T0, T3
     f68:	25 24       	eor	r2, r5
	eor ST22, T0
     f6a:	22 25       	eor	r18, r2
	
	lsl T1
     f6c:	33 0c       	add	r3, r3
	brcc 3f
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <exit+0x13c>
	eor T1, xREDUCER
     f70:	39 26       	eor	r3, r25
3:  eor T1, T3
     f72:	35 24       	eor	r3, r5
	eor ST20, T1
     f74:	03 25       	eor	r16, r3
	
	/* invMixCol (Row) 3 */
		/* preparing */
	ldi r31, hi8(lut_gf256mul_0x09)
     f76:	f0 e1       	ldi	r31, 0x10	; 16
	mov T0, ST33
     f78:	27 2e       	mov	r2, r23
	eor T0, ST32 ; T0 = t
     f7a:	26 26       	eor	r2, r22
	mov T1, ST30
     f7c:	34 2e       	mov	r3, r20
	eor T1, ST31 ; T1 = u
     f7e:	35 26       	eor	r3, r21
	mov r30, T0
     f80:	e2 2d       	mov	r30, r2
	eor r30, T1
     f82:	e3 25       	eor	r30, r3

	lpm T2, Z  ; T2 = v'
     f84:	44 90       	lpm	r4, Z
	
	ldi r31, hi8(lut_gf256mul_0x04)
     f86:	f1 e1       	ldi	r31, 0x11	; 17
	mov r30, ST32
     f88:	e6 2f       	mov	r30, r22
	eor r30, ST30
     f8a:	e4 27       	eor	r30, r20
	lpm T3, Z
     f8c:	54 90       	lpm	r5, Z
	eor T3, T2;  T3 = w
     f8e:	54 24       	eor	r5, r4
	
	mov r30, ST33
     f90:	e7 2f       	mov	r30, r23
	eor r30, ST31
     f92:	e5 27       	eor	r30, r21
	lpm P, Z
     f94:	04 90       	lpm	r0, Z
	eor T2, P ; T2 = v
     f96:	40 24       	eor	r4, r0
	 
	   /* now the big move */
	mov T4, ST30
     f98:	64 2e       	mov	r6, r20
	eor T4, ST33
     f9a:	67 26       	eor	r6, r23
	lsl T4
     f9c:	66 0c       	add	r6, r6
	brcc 3f
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <exit+0x16c>
	eor T4, xREDUCER
     fa0:	69 26       	eor	r6, r25
3:  eor T4, T2
     fa2:	64 24       	eor	r6, r4
	eor ST33, T4	
     fa4:	76 25       	eor	r23, r6

	mov T4, ST32
     fa6:	66 2e       	mov	r6, r22
	eor T4, ST31
     fa8:	65 26       	eor	r6, r21
	lsl T4
     faa:	66 0c       	add	r6, r6
	brcc 3f
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <exit+0x17a>
	eor T4, xREDUCER
     fae:	69 26       	eor	r6, r25
3:  eor T4, T2
     fb0:	64 24       	eor	r6, r4
	eor ST31, T4
     fb2:	56 25       	eor	r21, r6
	
	lsl T0
     fb4:	22 0c       	add	r2, r2
	brcc 3f
     fb6:	08 f4       	brcc	.+2      	; 0xfba <exit+0x184>
	eor T0, xREDUCER
     fb8:	29 26       	eor	r2, r25
3:  eor T0, T3
     fba:	25 24       	eor	r2, r5
	eor ST32, T0
     fbc:	62 25       	eor	r22, r2
	
	lsl T1
     fbe:	33 0c       	add	r3, r3
	brcc 3f
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <exit+0x18e>
	eor T1, xREDUCER
     fc2:	39 26       	eor	r3, r25
3:  eor T1, T3
     fc4:	35 24       	eor	r3, r5
	eor ST30, T1
     fc6:	43 25       	eor	r20, r3
	
	rjmp 1b
     fc8:	ed ce       	rjmp	.-550    	; 0xda4 <aes_decrypt_core+0x9a>
	...

00001000 <lut_gf256mul_0x09>:
    1000:	00 09       	sbc	r16, r0
    1002:	12 1b       	sub	r17, r18
    1004:	24 2d       	mov	r18, r4
    1006:	36 3f       	cpi	r19, 0xF6	; 246
    1008:	48 41       	sbci	r20, 0x18	; 24
    100a:	5a 53       	subi	r21, 0x3A	; 58
    100c:	6c 65       	ori	r22, 0x5C	; 92
    100e:	7e 77       	andi	r23, 0x7E	; 126
    1010:	90 99       	sbic	0x12, 0	; 18
    1012:	82 8b       	std	Z+18, r24	; 0x12
    1014:	b4 bd       	out	0x24, r27	; 36
    1016:	a6 af       	std	Z+62, r26	; 0x3e
    1018:	d8 d1       	rcall	.+944    	; 0x13ca <exit+0x12a>
    101a:	ca c3       	rjmp	.+1940   	; 0x17b0 <aes_sbox+0xb0>
    101c:	fc f5       	brge	.+126    	; 0x109c <lut_gf256mul_0x09+0x9c>
    101e:	ee e7       	ldi	r30, 0x7E	; 126
    1020:	3b 32       	cpi	r19, 0x2B	; 43
    1022:	29 20       	and	r2, r9
    1024:	1f 16       	cp	r1, r31
    1026:	0d 04       	cpc	r0, r13
    1028:	73 7a       	andi	r23, 0xA3	; 163
    102a:	61 68       	ori	r22, 0x81	; 129
    102c:	57 5e       	subi	r21, 0xE7	; 231
    102e:	45 4c       	sbci	r20, 0xC5	; 197
    1030:	ab a2       	std	Y+35, r10	; 0x23
    1032:	b9 b0       	in	r11, 0x09	; 9
    1034:	8f 86       	std	Y+15, r8	; 0x0f
    1036:	9d 94 e3 ea 	jmp	0x27d5c6	; 0x27d5c6 <__data_load_end+0x27830c>
    103a:	f1 f8       	bld	r15, 1
    103c:	c7 ce       	rjmp	.-626    	; 0xdcc <aes_decrypt_core+0xc2>
    103e:	d5 dc       	rcall	.-1622   	; 0x9ea <__c.2395+0x41>
    1040:	76 7f       	andi	r23, 0xF6	; 246
    1042:	64 6d       	ori	r22, 0xD4	; 212
    1044:	52 5b       	subi	r21, 0xB2	; 178
    1046:	40 49       	sbci	r20, 0x90	; 144
    1048:	3e 37       	cpi	r19, 0x7E	; 126
    104a:	2c 25       	eor	r18, r12
    104c:	1a 13       	cpse	r17, r26
    104e:	08 01       	movw	r0, r16
    1050:	e6 ef       	ldi	r30, 0xF6	; 246
    1052:	f4 fd       	sbrc	r31, 4
    1054:	c2 cb       	rjmp	.-2172   	; 0x7da <__c.2409+0xc>
    1056:	d0 d9       	rcall	.-3168   	; 0x3f8 <__c.2973+0xe>
    1058:	ae a7       	std	Y+46, r26	; 0x2e
    105a:	bc b5       	in	r27, 0x2c	; 44
    105c:	8a 83       	std	Y+2, r24	; 0x02
    105e:	98 91       	.word	0x9198	; ????
    1060:	4d 44       	sbci	r20, 0x4D	; 77
    1062:	5f 56       	subi	r21, 0x6F	; 111
    1064:	69 60       	ori	r22, 0x09	; 9
    1066:	7b 72       	andi	r23, 0x2B	; 43
    1068:	05 0c       	add	r0, r5
    106a:	17 1e       	adc	r1, r23
    106c:	21 28       	or	r2, r1
    106e:	33 3a       	cpi	r19, 0xA3	; 163
    1070:	dd d4       	rcall	.+2490   	; 0x1a2c <print_request_queue+0xda>
    1072:	cf c6       	rjmp	.+3486   	; 0x1e12 <remove_request+0x52>
    1074:	f9 f0       	breq	.+62     	; 0x10b4 <lut_gf256mul_0x09+0xb4>
    1076:	eb e2       	ldi	r30, 0x2B	; 43
    1078:	95 9c       	mul	r9, r5
    107a:	87 8e       	std	Z+31, r8	; 0x1f
    107c:	b1 b8       	out	0x01, r11	; 1
    107e:	a3 aa       	std	Z+51, r10	; 0x33
    1080:	ec e5       	ldi	r30, 0x5C	; 92
    1082:	fe f7       	brtc	.-2      	; 0x1082 <lut_gf256mul_0x09+0x82>
    1084:	c8 c1       	rjmp	.+912    	; 0x1416 <exit+0x176>
    1086:	da d3       	rcall	.+1972   	; 0x183c <request_queue_init+0x3c>
    1088:	a4 ad       	ldd	r26, Z+60	; 0x3c
    108a:	b6 bf       	out	0x36, r27	; 54
    108c:	80 89       	ldd	r24, Z+16	; 0x10
    108e:	92 9b       	sbis	0x12, 2	; 18
    1090:	7c 75       	andi	r23, 0x5C	; 92
    1092:	6e 67       	ori	r22, 0x7E	; 126
    1094:	58 51       	subi	r21, 0x18	; 24
    1096:	4a 43       	sbci	r20, 0x3A	; 58
    1098:	34 3d       	cpi	r19, 0xD4	; 212
    109a:	26 2f       	mov	r18, r22
    109c:	10 19       	sub	r17, r0
    109e:	02 0b       	sbc	r16, r18
    10a0:	d7 de       	rcall	.-594    	; 0xe50 <exit+0x1a>
    10a2:	c5 cc       	rjmp	.-1654   	; 0xa2e <__c.2391+0xc>
    10a4:	f3 fa       	bst	r15, 3
    10a6:	e1 e8       	ldi	r30, 0x81	; 129
    10a8:	9f 96       	adiw	r26, 0x2f	; 47
    10aa:	8d 84       	ldd	r8, Y+13	; 0x0d
    10ac:	bb b2       	in	r11, 0x1b	; 27
    10ae:	a9 a0       	ldd	r10, Y+33	; 0x21
    10b0:	47 4e       	sbci	r20, 0xE7	; 231
    10b2:	55 5c       	subi	r21, 0xC5	; 197
    10b4:	63 6a       	ori	r22, 0xA3	; 163
    10b6:	71 78       	andi	r23, 0x81	; 129
    10b8:	0f 06       	cpc	r0, r31
    10ba:	1d 14       	cp	r1, r13
    10bc:	2b 22       	and	r2, r27
    10be:	39 30       	cpi	r19, 0x09	; 9
    10c0:	9a 93       	st	-Y, r25
    10c2:	88 81       	ld	r24, Y
    10c4:	be b7       	in	r27, 0x3e	; 62
    10c6:	ac a5       	ldd	r26, Y+44	; 0x2c
    10c8:	d2 db       	rcall	.-2140   	; 0x86e <__c.2403+0x1>
    10ca:	c0 c9       	rjmp	.-3200   	; 0x44c <__c.2967+0x28>
    10cc:	f6 ff       	sbrs	r31, 6
    10ce:	e4 ed       	ldi	r30, 0xD4	; 212
    10d0:	0a 03       	fmul	r16, r18
    10d2:	18 11       	cpse	r17, r8
    10d4:	2e 27       	eor	r18, r30
    10d6:	3c 35       	cpi	r19, 0x5C	; 92
    10d8:	42 4b       	sbci	r20, 0xB2	; 178
    10da:	50 59       	subi	r21, 0x90	; 144
    10dc:	66 6f       	ori	r22, 0xF6	; 246
    10de:	74 7d       	andi	r23, 0xD4	; 212
    10e0:	a1 a8       	ldd	r10, Z+49	; 0x31
    10e2:	b3 ba       	out	0x13, r11	; 19
    10e4:	85 8c       	ldd	r8, Z+29	; 0x1d
    10e6:	97 9e       	mul	r9, r23
    10e8:	e9 e0       	ldi	r30, 0x09	; 9
    10ea:	fb f2       	brvs	.-66     	; 0x10aa <lut_gf256mul_0x09+0xaa>
    10ec:	cd c4       	rjmp	.+2458   	; 0x1a88 <print_request_queue+0x136>
    10ee:	df d6       	rcall	.+3518   	; 0x1eae <remove_request+0xee>
    10f0:	31 38       	cpi	r19, 0x81	; 129
    10f2:	23 2a       	or	r2, r19
    10f4:	15 1c       	adc	r1, r5
    10f6:	07 0e       	add	r0, r23
    10f8:	79 70       	andi	r23, 0x09	; 9
    10fa:	6b 62       	ori	r22, 0x2B	; 43
    10fc:	5d 54       	subi	r21, 0x4D	; 77
    10fe:	4f 46       	sbci	r20, 0x6F	; 111

00001100 <lut_gf256mul_0x04>:
    1100:	00 04       	cpc	r0, r0
    1102:	08 0c       	add	r0, r8
    1104:	10 14       	cp	r1, r0
    1106:	18 1c       	adc	r1, r8
    1108:	20 24       	eor	r2, r0
    110a:	28 2c       	mov	r2, r8
    110c:	30 34       	cpi	r19, 0x40	; 64
    110e:	38 3c       	cpi	r19, 0xC8	; 200
    1110:	40 44       	sbci	r20, 0x40	; 64
    1112:	48 4c       	sbci	r20, 0xC8	; 200
    1114:	50 54       	subi	r21, 0x40	; 64
    1116:	58 5c       	subi	r21, 0xC8	; 200
    1118:	60 64       	ori	r22, 0x40	; 64
    111a:	68 6c       	ori	r22, 0xC8	; 200
    111c:	70 74       	andi	r23, 0x40	; 64
    111e:	78 7c       	andi	r23, 0xC8	; 200
    1120:	80 84       	ldd	r8, Z+8	; 0x08
    1122:	88 8c       	ldd	r8, Y+24	; 0x18
    1124:	90 94       	com	r9
    1126:	98 9c       	mul	r9, r8
    1128:	a0 a4       	ldd	r10, Z+40	; 0x28
    112a:	a8 ac       	ldd	r10, Y+56	; 0x38
    112c:	b0 b4       	in	r11, 0x20	; 32
    112e:	b8 bc       	out	0x28, r11	; 40
    1130:	c0 c4       	rjmp	.+2432   	; 0x1ab2 <print_request_queue+0x160>
    1132:	c8 cc       	rjmp	.-1648   	; 0xac4 <__c.2385+0x9>
    1134:	d0 d4       	rcall	.+2464   	; 0x1ad6 <print_request_queue+0x184>
    1136:	d8 dc       	rcall	.-1616   	; 0xae8 <__c.2381+0x3>
    1138:	e0 e4       	ldi	r30, 0x40	; 64
    113a:	e8 ec       	ldi	r30, 0xC8	; 200
    113c:	f0 f4       	brcc	.+60     	; 0x117a <lut_gf256mul_0x04+0x7a>
    113e:	f8 fc       	.word	0xfcf8	; ????
    1140:	1b 1f       	adc	r17, r27
    1142:	13 17       	cp	r17, r19
    1144:	0b 0f       	add	r16, r27
    1146:	03 07       	cpc	r16, r19
    1148:	3b 3f       	cpi	r19, 0xFB	; 251
    114a:	33 37       	cpi	r19, 0x73	; 115
    114c:	2b 2f       	mov	r18, r27
    114e:	23 27       	eor	r18, r19
    1150:	5b 5f       	subi	r21, 0xFB	; 251
    1152:	53 57       	subi	r21, 0x73	; 115
    1154:	4b 4f       	sbci	r20, 0xFB	; 251
    1156:	43 47       	sbci	r20, 0x73	; 115
    1158:	7b 7f       	andi	r23, 0xFB	; 251
    115a:	73 77       	andi	r23, 0x73	; 115
    115c:	6b 6f       	ori	r22, 0xFB	; 251
    115e:	63 67       	ori	r22, 0x73	; 115
    1160:	9b 9f       	mul	r25, r27
    1162:	93 97       	sbiw	r26, 0x23	; 35
    1164:	8b 8f       	std	Y+27, r24	; 0x1b
    1166:	83 87       	std	Z+11, r24	; 0x0b
    1168:	bb bf       	out	0x3b, r27	; 59
    116a:	b3 b7       	in	r27, 0x33	; 51
    116c:	ab af       	std	Y+59, r26	; 0x3b
    116e:	a3 a7       	std	Z+43, r26	; 0x2b
    1170:	db df       	rcall	.-74     	; 0x1128 <lut_gf256mul_0x04+0x28>
    1172:	d3 d7       	rcall	.+4006   	; 0x211a <__vector_1+0x60>
    1174:	cb cf       	rjmp	.-106    	; 0x110c <lut_gf256mul_0x04+0xc>
    1176:	c3 c7       	rjmp	.+3974   	; 0x20fe <__vector_1+0x44>
    1178:	fb ff       	.word	0xfffb	; ????
    117a:	f3 f7       	brvc	.-4      	; 0x1178 <lut_gf256mul_0x04+0x78>
    117c:	eb ef       	ldi	r30, 0xFB	; 251
    117e:	e3 e7       	ldi	r30, 0x73	; 115
    1180:	36 32       	cpi	r19, 0x26	; 38
    1182:	3e 3a       	cpi	r19, 0xAE	; 174
    1184:	26 22       	and	r2, r22
    1186:	2e 2a       	or	r2, r30
    1188:	16 12       	cpse	r1, r22
    118a:	1e 1a       	sub	r1, r30
    118c:	06 02       	muls	r16, r22
    118e:	0e 0a       	sbc	r0, r30
    1190:	76 72       	andi	r23, 0x26	; 38
    1192:	7e 7a       	andi	r23, 0xAE	; 174
    1194:	66 62       	ori	r22, 0x26	; 38
    1196:	6e 6a       	ori	r22, 0xAE	; 174
    1198:	56 52       	subi	r21, 0x26	; 38
    119a:	5e 5a       	subi	r21, 0xAE	; 174
    119c:	46 42       	sbci	r20, 0x26	; 38
    119e:	4e 4a       	sbci	r20, 0xAE	; 174
    11a0:	b6 b2       	in	r11, 0x16	; 22
    11a2:	be ba       	out	0x1e, r11	; 30
    11a4:	a6 a2       	std	Z+38, r10	; 0x26
    11a6:	ae aa       	std	Y+54, r10	; 0x36
    11a8:	96 92       	lac	Z, r9
    11aa:	9e 9a       	sbi	0x13, 6	; 19
    11ac:	86 82       	std	Z+6, r8	; 0x06
    11ae:	8e 8a       	std	Y+22, r8	; 0x16
    11b0:	f6 f2       	brts	.-68     	; 0x116e <lut_gf256mul_0x04+0x6e>
    11b2:	fe fa       	.word	0xfafe	; ????
    11b4:	e6 e2       	ldi	r30, 0x26	; 38
    11b6:	ee ea       	ldi	r30, 0xAE	; 174
    11b8:	d6 d2       	rcall	.+1452   	; 0x1766 <aes_sbox+0x66>
    11ba:	de da       	rcall	.-2628   	; 0x778 <__c.2415+0x10>
    11bc:	c6 c2       	rjmp	.+1420   	; 0x174a <aes_sbox+0x4a>
    11be:	ce ca       	rjmp	.-2660   	; 0x75c <__c.2417+0x1a>
    11c0:	2d 29       	or	r18, r13
    11c2:	25 21       	and	r18, r5
    11c4:	3d 39       	cpi	r19, 0x9D	; 157
    11c6:	35 31       	cpi	r19, 0x15	; 21
    11c8:	0d 09       	sbc	r16, r13
    11ca:	05 01       	movw	r0, r10
    11cc:	1d 19       	sub	r17, r13
    11ce:	15 11       	cpse	r17, r5
    11d0:	6d 69       	ori	r22, 0x9D	; 157
    11d2:	65 61       	ori	r22, 0x15	; 21
    11d4:	7d 79       	andi	r23, 0x9D	; 157
    11d6:	75 71       	andi	r23, 0x15	; 21
    11d8:	4d 49       	sbci	r20, 0x9D	; 157
    11da:	45 41       	sbci	r20, 0x15	; 21
    11dc:	5d 59       	subi	r21, 0x9D	; 157
    11de:	55 51       	subi	r21, 0x15	; 21
    11e0:	ad a9       	ldd	r26, Y+53	; 0x35
    11e2:	a5 a1       	ldd	r26, Z+37	; 0x25
    11e4:	bd b9       	out	0x0d, r27	; 13
    11e6:	b5 b1       	in	r27, 0x05	; 5
    11e8:	8d 89       	ldd	r24, Y+21	; 0x15
    11ea:	85 81       	ldd	r24, Z+5	; 0x05
    11ec:	9d 99       	sbic	0x13, 5	; 19
    11ee:	95 91       	lpm	r25, Z+
    11f0:	ed e9       	ldi	r30, 0x9D	; 157
    11f2:	e5 e1       	ldi	r30, 0x15	; 21
    11f4:	fd f9       	.word	0xf9fd	; ????
    11f6:	f5 f1       	brhs	.+124    	; 0x1274 <aes_encrypt_core+0x6a>
    11f8:	cd c9       	rjmp	.-3174   	; 0x594 <__c.2882+0xd>
    11fa:	c5 c1       	rjmp	.+906    	; 0x1586 <aes_invsbox+0x86>
    11fc:	dd d9       	rcall	.-3142   	; 0x5b8 <__c.2877+0x12>
    11fe:	d5 d1       	rcall	.+938    	; 0x15aa <aes_invsbox+0xaa>

00001200 <aes256_enc>:
P = 0
xREDUCER = 25

.global aes256_enc
aes256_enc:
	ldi r20, 14
    1200:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
    1202:	03 c0       	rjmp	.+6      	; 0x120a <aes_encrypt_core>

00001204 <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
    1204:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
    1206:	01 c0       	rjmp	.+2      	; 0x120a <aes_encrypt_core>

00001208 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
    1208:	4a e0       	ldi	r20, 0x0A	; 10

0000120a <aes_encrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	push_range 2, 17
    120a:	2f 92       	push	r2
    120c:	3f 92       	push	r3
    120e:	4f 92       	push	r4
    1210:	5f 92       	push	r5
    1212:	6f 92       	push	r6
    1214:	7f 92       	push	r7
    1216:	8f 92       	push	r8
    1218:	9f 92       	push	r9
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
	push r28
    122a:	cf 93       	push	r28
	push r29
    122c:	df 93       	push	r29
	push r24
    122e:	8f 93       	push	r24
	push r25
    1230:	9f 93       	push	r25
	movw r26, r22
    1232:	db 01       	movw	r26, r22
	movw r30, r24
    1234:	fc 01       	movw	r30, r24
	mov  CTR, r20
    1236:	84 2f       	mov	r24, r20
	clt
    1238:	e8 94       	clt
	
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld \param, Z+
	.endr
    123a:	81 90       	ld	r8, Z+
    123c:	91 90       	ld	r9, Z+
    123e:	a1 90       	ld	r10, Z+
    1240:	b1 90       	ld	r11, Z+
    1242:	c1 90       	ld	r12, Z+
    1244:	d1 90       	ld	r13, Z+
    1246:	e1 90       	ld	r14, Z+
    1248:	f1 90       	ld	r15, Z+
    124a:	01 91       	ld	r16, Z+
    124c:	11 91       	ld	r17, Z+
    124e:	21 91       	ld	r18, Z+
    1250:	31 91       	ld	r19, Z+
    1252:	41 91       	ld	r20, Z+
    1254:	51 91       	ld	r21, Z+
    1256:	61 91       	ld	r22, Z+
    1258:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
    125a:	9b e1       	ldi	r25, 0x1B	; 27
	ldi r31, hi8(aes_sbox)
    125c:	f7 e1       	ldi	r31, 0x17	; 23
	/* key whitening */
1:
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld r0, X+
		eor \param, r0
	.endr
    125e:	0d 90       	ld	r0, X+
    1260:	80 24       	eor	r8, r0
    1262:	0d 90       	ld	r0, X+
    1264:	90 24       	eor	r9, r0
    1266:	0d 90       	ld	r0, X+
    1268:	a0 24       	eor	r10, r0
    126a:	0d 90       	ld	r0, X+
    126c:	b0 24       	eor	r11, r0
    126e:	0d 90       	ld	r0, X+
    1270:	c0 24       	eor	r12, r0
    1272:	0d 90       	ld	r0, X+
    1274:	d0 24       	eor	r13, r0
    1276:	0d 90       	ld	r0, X+
    1278:	e0 24       	eor	r14, r0
    127a:	0d 90       	ld	r0, X+
    127c:	f0 24       	eor	r15, r0
    127e:	0d 90       	ld	r0, X+
    1280:	00 25       	eor	r16, r0
    1282:	0d 90       	ld	r0, X+
    1284:	10 25       	eor	r17, r0
    1286:	0d 90       	ld	r0, X+
    1288:	20 25       	eor	r18, r0
    128a:	0d 90       	ld	r0, X+
    128c:	30 25       	eor	r19, r0
    128e:	0d 90       	ld	r0, X+
    1290:	40 25       	eor	r20, r0
    1292:	0d 90       	ld	r0, X+
    1294:	50 25       	eor	r21, r0
    1296:	0d 90       	ld	r0, X+
    1298:	60 25       	eor	r22, r0
    129a:	0d 90       	ld	r0, X+
    129c:	70 25       	eor	r23, r0
	
	brtc 2f
    129e:	2e f5       	brtc	.+74     	; 0x12ea <exit+0x4a>

000012a0 <exit>:
exit:	
	pop r31
    12a0:	ff 91       	pop	r31
	pop r30
    12a2:	ef 91       	pop	r30
	st Z+, ST00
    12a4:	81 92       	st	Z+, r8
	st Z+, ST01
    12a6:	91 92       	st	Z+, r9
	st Z+, ST02
    12a8:	a1 92       	st	Z+, r10
	st Z+, ST03
    12aa:	b1 92       	st	Z+, r11
	st Z+, ST10
    12ac:	c1 92       	st	Z+, r12
	st Z+, ST11
    12ae:	d1 92       	st	Z+, r13
	st Z+, ST12
    12b0:	e1 92       	st	Z+, r14
	st Z+, ST13
    12b2:	f1 92       	st	Z+, r15
	st Z+, ST20
    12b4:	01 93       	st	Z+, r16
	st Z+, ST21
    12b6:	11 93       	st	Z+, r17
	st Z+, ST22
    12b8:	21 93       	st	Z+, r18
	st Z+, ST23
    12ba:	31 93       	st	Z+, r19
	st Z+, ST30
    12bc:	41 93       	st	Z+, r20
	st Z+, ST31
    12be:	51 93       	st	Z+, r21
	st Z+, ST32
    12c0:	61 93       	st	Z+, r22
	st Z+, ST33
    12c2:	71 93       	st	Z+, r23
	pop r29
    12c4:	df 91       	pop	r29
	pop r28
    12c6:	cf 91       	pop	r28
	pop_range 2, 17
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	7f 90       	pop	r7
    12de:	6f 90       	pop	r6
    12e0:	5f 90       	pop	r5
    12e2:	4f 90       	pop	r4
    12e4:	3f 90       	pop	r3
    12e6:	2f 90       	pop	r2
	ret
    12e8:	08 95       	ret

2:	dec CTR
    12ea:	8a 95       	dec	r24
	brne 3f
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <exit+0x50>
	set
    12ee:	68 94       	set
3:

	/* encryption loop */ 

	/* SBOX substitution and shifting */
	mov r30, ST00
    12f0:	e8 2d       	mov	r30, r8
	lpm ST00, Z
    12f2:	84 90       	lpm	r8, Z
	mov r30, ST10
    12f4:	ec 2d       	mov	r30, r12
	lpm ST10, Z
    12f6:	c4 90       	lpm	r12, Z
	mov r30, ST20
    12f8:	e0 2f       	mov	r30, r16
	lpm ST20, Z
    12fa:	04 91       	lpm	r16, Z
	mov r30, ST30
    12fc:	e4 2f       	mov	r30, r20
	lpm ST30, Z
    12fe:	44 91       	lpm	r20, Z

	mov r30, ST01
    1300:	e9 2d       	mov	r30, r9
	lpm T0, Z
    1302:	24 90       	lpm	r2, Z
	mov r30, ST11
    1304:	ed 2d       	mov	r30, r13
	lpm ST01, Z
    1306:	94 90       	lpm	r9, Z
	mov r30, ST21
    1308:	e1 2f       	mov	r30, r17
	lpm ST11, Z
    130a:	d4 90       	lpm	r13, Z
	mov r30, ST31
    130c:	e5 2f       	mov	r30, r21
	lpm ST21, Z
    130e:	14 91       	lpm	r17, Z
	mov ST31, T0
    1310:	52 2d       	mov	r21, r2

	mov r30, ST02
    1312:	ea 2d       	mov	r30, r10
	lpm T0, Z
    1314:	24 90       	lpm	r2, Z
	mov r30, ST12
    1316:	ee 2d       	mov	r30, r14
	lpm T1, Z
    1318:	34 90       	lpm	r3, Z
	mov r30, ST22
    131a:	e2 2f       	mov	r30, r18
	lpm ST02, Z
    131c:	a4 90       	lpm	r10, Z
	mov r30, ST32
    131e:	e6 2f       	mov	r30, r22
	lpm ST12, Z
    1320:	e4 90       	lpm	r14, Z
	mov ST22, T0
    1322:	22 2d       	mov	r18, r2
	mov ST32, T1
    1324:	63 2d       	mov	r22, r3

	mov r30, ST03
    1326:	eb 2d       	mov	r30, r11
	lpm T0, Z
    1328:	24 90       	lpm	r2, Z
	mov r30, ST33
    132a:	e7 2f       	mov	r30, r23
	lpm ST03, Z
    132c:	b4 90       	lpm	r11, Z
	mov r30, ST23
    132e:	e3 2f       	mov	r30, r19
	lpm ST33, Z
    1330:	74 91       	lpm	r23, Z
	mov r30, ST13
    1332:	ef 2d       	mov	r30, r15
	lpm ST23, Z
    1334:	34 91       	lpm	r19, Z
	mov ST13, T0
    1336:	f2 2c       	mov	r15, r2
		
	/* mixcols (or rows in our case) */
	brtc 2f
    1338:	0e f4       	brtc	.+2      	; 0x133c <exit+0x9c>
	rjmp 1b
    133a:	91 cf       	rjmp	.-222    	; 0x125e <aes_encrypt_core+0x54>
2:	
 /* mixrow 1 */
	mov r0, ST02
    133c:	0a 2c       	mov	r0, r10
	eor r0, ST03
    133e:	0b 24       	eor	r0, r11
	mov T2, r0
    1340:	40 2c       	mov	r4, r0
		
	mov T0, ST00
    1342:	28 2c       	mov	r2, r8
	eor ST00, ST01
    1344:	89 24       	eor	r8, r9
	eor r0, ST00
    1346:	08 24       	eor	r0, r8
	lsl ST00
    1348:	88 0c       	add	r8, r8
	brcc 3f
    134a:	08 f4       	brcc	.+2      	; 0x134e <exit+0xae>
	eor ST00, xREDUCER
    134c:	89 26       	eor	r8, r25
3:	eor ST00, r0
    134e:	80 24       	eor	r8, r0
	eor ST00, T0
    1350:	82 24       	eor	r8, r2
	
	mov T1, ST01
    1352:	39 2c       	mov	r3, r9
	eor T1, ST02
    1354:	3a 24       	eor	r3, r10
	lsl T1
    1356:	33 0c       	add	r3, r3
	brcc 3f
    1358:	08 f4       	brcc	.+2      	; 0x135c <exit+0xbc>
	eor T1, xREDUCER
    135a:	39 26       	eor	r3, r25
3:	eor T1, r0
    135c:	30 24       	eor	r3, r0
	eor ST01, T1
    135e:	93 24       	eor	r9, r3
	
	lsl T2
    1360:	44 0c       	add	r4, r4
	brcc 3f
    1362:	08 f4       	brcc	.+2      	; 0x1366 <exit+0xc6>
	eor T2, xREDUCER
    1364:	49 26       	eor	r4, r25
3:  eor T2, r0
    1366:	40 24       	eor	r4, r0
	eor ST02, T2
    1368:	a4 24       	eor	r10, r4
	
	eor T0, ST03
    136a:	2b 24       	eor	r2, r11
	lsl T0
    136c:	22 0c       	add	r2, r2
	brcc 3f
    136e:	08 f4       	brcc	.+2      	; 0x1372 <exit+0xd2>
	eor T0, xREDUCER
    1370:	29 26       	eor	r2, r25
3:	eor T0, r0
    1372:	20 24       	eor	r2, r0
	eor ST03, T0
    1374:	b2 24       	eor	r11, r2
		
 /* mixrow 2 */
	mov r0, ST12
    1376:	0e 2c       	mov	r0, r14
	eor r0, ST13
    1378:	0f 24       	eor	r0, r15
	mov T2, r0
    137a:	40 2c       	mov	r4, r0
		
	mov T0, ST10
    137c:	2c 2c       	mov	r2, r12
	eor ST10, ST11
    137e:	cd 24       	eor	r12, r13
	eor r0, ST10
    1380:	0c 24       	eor	r0, r12
	lsl ST10
    1382:	cc 0c       	add	r12, r12
	brcc 3f
    1384:	08 f4       	brcc	.+2      	; 0x1388 <exit+0xe8>
	eor ST10, xREDUCER
    1386:	c9 26       	eor	r12, r25
3:	eor ST10, r0
    1388:	c0 24       	eor	r12, r0
	eor ST10, T0
    138a:	c2 24       	eor	r12, r2
	
	mov T1, ST11
    138c:	3d 2c       	mov	r3, r13
	eor T1, ST12
    138e:	3e 24       	eor	r3, r14
	lsl T1
    1390:	33 0c       	add	r3, r3
	brcc 3f
    1392:	08 f4       	brcc	.+2      	; 0x1396 <exit+0xf6>
	eor T1, xREDUCER
    1394:	39 26       	eor	r3, r25
3:	eor T1, r0
    1396:	30 24       	eor	r3, r0
	eor ST11, T1
    1398:	d3 24       	eor	r13, r3
	
	lsl T2
    139a:	44 0c       	add	r4, r4
	brcc 3f
    139c:	08 f4       	brcc	.+2      	; 0x13a0 <exit+0x100>
	eor T2, xREDUCER
    139e:	49 26       	eor	r4, r25
3:  eor T2, r0
    13a0:	40 24       	eor	r4, r0
	eor ST12, T2
    13a2:	e4 24       	eor	r14, r4
	
	eor T0, ST13
    13a4:	2f 24       	eor	r2, r15
	lsl T0
    13a6:	22 0c       	add	r2, r2
	brcc 3f
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <exit+0x10c>
	eor T0, xREDUCER
    13aa:	29 26       	eor	r2, r25
3:	eor T0, r0
    13ac:	20 24       	eor	r2, r0
	eor ST13, T0
    13ae:	f2 24       	eor	r15, r2
		
 /* mixrow 3 */
	mov r0, ST22
    13b0:	02 2e       	mov	r0, r18
	eor r0, ST23
    13b2:	03 26       	eor	r0, r19
	mov T2, r0
    13b4:	40 2c       	mov	r4, r0
		
	mov T0, ST20
    13b6:	20 2e       	mov	r2, r16
	eor ST20, ST21
    13b8:	01 27       	eor	r16, r17
	eor r0, ST20
    13ba:	00 26       	eor	r0, r16
	lsl ST20
    13bc:	00 0f       	add	r16, r16
	brcc 3f
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <exit+0x122>
	eor ST20, xREDUCER
    13c0:	09 27       	eor	r16, r25
3:	eor ST20, r0
    13c2:	00 25       	eor	r16, r0
	eor ST20, T0
    13c4:	02 25       	eor	r16, r2
	
	mov T1, ST21
    13c6:	31 2e       	mov	r3, r17
	eor T1, ST22
    13c8:	32 26       	eor	r3, r18
	lsl T1
    13ca:	33 0c       	add	r3, r3
	brcc 3f
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <exit+0x130>
	eor T1, xREDUCER
    13ce:	39 26       	eor	r3, r25
3:	eor T1, r0
    13d0:	30 24       	eor	r3, r0
	eor ST21, T1
    13d2:	13 25       	eor	r17, r3
	
	lsl T2
    13d4:	44 0c       	add	r4, r4
	brcc 3f
    13d6:	08 f4       	brcc	.+2      	; 0x13da <exit+0x13a>
	eor T2, xREDUCER
    13d8:	49 26       	eor	r4, r25
3:  eor T2, r0
    13da:	40 24       	eor	r4, r0
	eor ST22, T2
    13dc:	24 25       	eor	r18, r4
	
	eor T0, ST23
    13de:	23 26       	eor	r2, r19
	lsl T0
    13e0:	22 0c       	add	r2, r2
	brcc 3f
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <exit+0x146>
	eor T0, xREDUCER
    13e4:	29 26       	eor	r2, r25
3:	eor T0, r0
    13e6:	20 24       	eor	r2, r0
	eor ST23, T0
    13e8:	32 25       	eor	r19, r2
		
 /* mixrow 4 */
	mov r0, ST32
    13ea:	06 2e       	mov	r0, r22
	eor r0, ST33
    13ec:	07 26       	eor	r0, r23
	mov T2, r0
    13ee:	40 2c       	mov	r4, r0
		
	mov T0, ST30
    13f0:	24 2e       	mov	r2, r20
	eor ST30, ST31
    13f2:	45 27       	eor	r20, r21
	eor r0, ST30
    13f4:	04 26       	eor	r0, r20
	lsl ST30
    13f6:	44 0f       	add	r20, r20
	brcc 3f
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <exit+0x15c>
	eor ST30, xREDUCER
    13fa:	49 27       	eor	r20, r25
3:	eor ST30, r0
    13fc:	40 25       	eor	r20, r0
	eor ST30, T0
    13fe:	42 25       	eor	r20, r2
	
	mov T1, ST31
    1400:	35 2e       	mov	r3, r21
	eor T1, ST32
    1402:	36 26       	eor	r3, r22
	lsl T1
    1404:	33 0c       	add	r3, r3
	brcc 3f
    1406:	08 f4       	brcc	.+2      	; 0x140a <exit+0x16a>
	eor T1, xREDUCER
    1408:	39 26       	eor	r3, r25
3:	eor T1, r0
    140a:	30 24       	eor	r3, r0
	eor ST31, T1
    140c:	53 25       	eor	r21, r3
	
	lsl T2
    140e:	44 0c       	add	r4, r4
	brcc 3f
    1410:	08 f4       	brcc	.+2      	; 0x1414 <exit+0x174>
	eor T2, xREDUCER
    1412:	49 26       	eor	r4, r25
3:  eor T2, r0
    1414:	40 24       	eor	r4, r0
	eor ST32, T2
    1416:	64 25       	eor	r22, r4
	
	eor T0, ST33
    1418:	27 26       	eor	r2, r23
	lsl T0
    141a:	22 0c       	add	r2, r2
	brcc 3f
    141c:	08 f4       	brcc	.+2      	; 0x1420 <exit+0x180>
	eor T0, xREDUCER
    141e:	29 26       	eor	r2, r25
3:	eor T0, r0
    1420:	20 24       	eor	r2, r0
	eor ST33, T0
    1422:	72 25       	eor	r23, r2
	/* mix colums (rows) done */

	/* add key*/
	rjmp 1b
    1424:	1c cf       	rjmp	.-456    	; 0x125e <aes_encrypt_core+0x54>
	...

00001500 <aes_invsbox>:
    1500:	52 09       	sbc	r21, r2
    1502:	6a d5       	rcall	.+2772   	; 0x1fd8 <remove_request+0x218>
    1504:	30 36       	cpi	r19, 0x60	; 96
    1506:	a5 38       	cpi	r26, 0x85	; 133
    1508:	bf 40       	sbci	r27, 0x0F	; 15
    150a:	a3 9e       	mul	r10, r19
    150c:	81 f3       	breq	.-32     	; 0x14ee <exit+0x24e>
    150e:	d7 fb       	bst	r29, 7
    1510:	7c e3       	ldi	r23, 0x3C	; 60
    1512:	39 82       	std	Y+1, r3	; 0x01
    1514:	9b 2f       	mov	r25, r27
    1516:	ff 87       	std	Y+15, r31	; 0x0f
    1518:	34 8e       	std	Z+28, r3	; 0x1c
    151a:	43 44       	sbci	r20, 0x43	; 67
    151c:	c4 de       	rcall	.-632    	; 0x12a6 <exit+0x6>
    151e:	e9 cb       	rjmp	.-2094   	; 0xcf2 <__bad_interrupt+0x78>
    1520:	54 7b       	andi	r21, 0xB4	; 180
    1522:	94 32       	cpi	r25, 0x24	; 36
    1524:	a6 c2       	rjmp	.+1356   	; 0x1a72 <print_request_queue+0x120>
    1526:	23 3d       	cpi	r18, 0xD3	; 211
    1528:	ee 4c       	sbci	r30, 0xCE	; 206
    152a:	95 0b       	sbc	r25, r21
    152c:	42 fa       	bst	r4, 2
    152e:	c3 4e       	sbci	r28, 0xE3	; 227
    1530:	08 2e       	mov	r0, r24
    1532:	a1 66       	ori	r26, 0x61	; 97
    1534:	28 d9       	rcall	.-3504   	; 0x786 <__c.2415+0x1e>
    1536:	24 b2       	in	r2, 0x14	; 20
    1538:	76 5b       	subi	r23, 0xB6	; 182
    153a:	a2 49       	sbci	r26, 0x92	; 146
    153c:	6d 8b       	std	Y+21, r22	; 0x15
    153e:	d1 25       	eor	r29, r1
    1540:	72 f8       	bld	r7, 2
    1542:	f6 64       	ori	r31, 0x46	; 70
    1544:	86 68       	ori	r24, 0x86	; 134
    1546:	98 16       	cp	r9, r24
    1548:	d4 a4       	ldd	r13, Z+44	; 0x2c
    154a:	5c cc       	rjmp	.-1864   	; 0xe04 <aes_decrypt_core+0xfa>
    154c:	5d 65       	ori	r21, 0x5D	; 93
    154e:	b6 92       	lac	Z, r11
    1550:	6c 70       	andi	r22, 0x0C	; 12
    1552:	48 50       	subi	r20, 0x08	; 8
    1554:	fd ed       	ldi	r31, 0xDD	; 221
    1556:	b9 da       	rcall	.-2702   	; 0xaca <__c.2385+0xf>
    1558:	5e 15       	cp	r21, r14
    155a:	46 57       	subi	r20, 0x76	; 118
    155c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    155e:	9d 84       	ldd	r9, Y+13	; 0x0d
    1560:	90 d8       	rcall	.-3808   	; 0x682 <__c.2425+0x15>
    1562:	ab 00       	.word	0x00ab	; ????
    1564:	8c bc       	out	0x2c, r8	; 44
    1566:	d3 0a       	sbc	r13, r19
    1568:	f7 e4       	ldi	r31, 0x47	; 71
    156a:	58 05       	cpc	r21, r8
    156c:	b8 b3       	in	r27, 0x18	; 24
    156e:	45 06       	cpc	r4, r21
    1570:	d0 2c       	mov	r13, r0
    1572:	1e 8f       	std	Y+30, r17	; 0x1e
    1574:	ca 3f       	cpi	r28, 0xFA	; 250
    1576:	0f 02       	muls	r16, r31
    1578:	c1 af       	std	Z+57, r28	; 0x39
    157a:	bd 03       	fmulsu	r19, r21
    157c:	01 13       	cpse	r16, r17
    157e:	8a 6b       	ori	r24, 0xBA	; 186
    1580:	3a 91       	ld	r19, -Y
    1582:	11 41       	sbci	r17, 0x11	; 17
    1584:	4f 67       	ori	r20, 0x7F	; 127
    1586:	dc ea       	ldi	r29, 0xAC	; 172
    1588:	97 f2       	brie	.-92     	; 0x152e <aes_invsbox+0x2e>
    158a:	cf ce       	rjmp	.-610    	; 0x132a <exit+0x8a>
    158c:	f0 b4       	in	r15, 0x20	; 32
    158e:	e6 73       	andi	r30, 0x36	; 54
    1590:	96 ac       	ldd	r9, Z+62	; 0x3e
    1592:	74 22       	and	r7, r20
    1594:	e7 ad       	ldd	r30, Z+63	; 0x3f
    1596:	35 85       	ldd	r19, Z+13	; 0x0d
    1598:	e2 f9       	bld	r30, 2
    159a:	37 e8       	ldi	r19, 0x87	; 135
    159c:	1c 75       	andi	r17, 0x5C	; 92
    159e:	df 6e       	ori	r29, 0xEF	; 239
    15a0:	47 f1       	brie	.+80     	; 0x15f2 <aes_invsbox+0xf2>
    15a2:	1a 71       	andi	r17, 0x1A	; 26
    15a4:	1d 29       	or	r17, r13
    15a6:	c5 89       	ldd	r28, Z+21	; 0x15
    15a8:	6f b7       	in	r22, 0x3f	; 63
    15aa:	62 0e       	add	r6, r18
    15ac:	aa 18       	sub	r10, r10
    15ae:	be 1b       	sub	r27, r30
    15b0:	fc 56       	subi	r31, 0x6C	; 108
    15b2:	3e 4b       	sbci	r19, 0xBE	; 190
    15b4:	c6 d2       	rcall	.+1420   	; 0x1b42 <print_request_queue+0x1f0>
    15b6:	79 20       	and	r7, r9
    15b8:	9a db       	rcall	.-2252   	; 0xcee <__bad_interrupt+0x74>
    15ba:	c0 fe       	sbrs	r12, 0
    15bc:	78 cd       	rjmp	.-1296   	; 0x10ae <lut_gf256mul_0x09+0xae>
    15be:	5a f4       	brpl	.+22     	; 0x15d6 <aes_invsbox+0xd6>
    15c0:	1f dd       	rcall	.-1474   	; 0x1000 <lut_gf256mul_0x09>
    15c2:	a8 33       	cpi	r26, 0x38	; 56
    15c4:	88 07       	cpc	r24, r24
    15c6:	c7 31       	cpi	r28, 0x17	; 23
    15c8:	b1 12       	cpse	r11, r17
    15ca:	10 59       	subi	r17, 0x90	; 144
    15cc:	27 80       	ldd	r2, Z+7	; 0x07
    15ce:	ec 5f       	subi	r30, 0xFC	; 252
    15d0:	60 51       	subi	r22, 0x10	; 16
    15d2:	7f a9       	ldd	r23, Y+55	; 0x37
    15d4:	19 b5       	in	r17, 0x29	; 41
    15d6:	4a 0d       	add	r20, r10
    15d8:	2d e5       	ldi	r18, 0x5D	; 93
    15da:	7a 9f       	mul	r23, r26
    15dc:	93 c9       	rjmp	.-3290   	; 0x904 <__stack+0x5>
    15de:	9c ef       	ldi	r25, 0xFC	; 252
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	3b 4d       	sbci	r19, 0xDB	; 219
    15e4:	ae 2a       	or	r10, r30
    15e6:	f5 b0       	in	r15, 0x05	; 5
    15e8:	c8 eb       	ldi	r28, 0xB8	; 184
    15ea:	bb 3c       	cpi	r27, 0xCB	; 203
    15ec:	83 53       	subi	r24, 0x33	; 51
    15ee:	99 61       	ori	r25, 0x19	; 25
    15f0:	17 2b       	or	r17, r23
    15f2:	04 7e       	andi	r16, 0xE4	; 228
    15f4:	ba 77       	andi	r27, 0x7A	; 122
    15f6:	d6 26       	eor	r13, r22
    15f8:	e1 69       	ori	r30, 0x91	; 145
    15fa:	14 63       	ori	r17, 0x34	; 52
    15fc:	55 21       	and	r21, r5
    15fe:	0c 7d       	andi	r16, 0xDC	; 220

00001600 <aes256_init>:

#include "avr-asm-macros.S"

.global aes256_init
aes256_init:
	movw r20, r22
    1600:	ab 01       	movw	r20, r22
	ldi r23, hi8(256)
    1602:	71 e0       	ldi	r23, 0x01	; 1
	ldi r22, lo8(256)
    1604:	60 e0       	ldi	r22, 0x00	; 0
	rjmp aes_init
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <aes_init>

00001608 <aes192_init>:
	
.global aes192_init
aes192_init:
	movw r20, r22
    1608:	ab 01       	movw	r20, r22
	ldi r23, hi8(192)
    160a:	70 e0       	ldi	r23, 0x00	; 0
	ldi r22, lo8(192)
    160c:	60 ec       	ldi	r22, 0xC0	; 192
	rjmp aes_init
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <aes_init>

00001610 <aes128_init>:
	
.global aes128_init
aes128_init:
	movw r20, r22
    1610:	ab 01       	movw	r20, r22
	clr r23
    1612:	77 27       	eor	r23, r23
	ldi r22, 128
    1614:	60 e8       	ldi	r22, 0x80	; 128

00001616 <aes_init>:
 * param keysize_b: r22:r23
 * param ctx:       r20:r21
 */
.global aes_init
aes_init:
	push_range 14, 17
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
	push r28
    161e:	cf 93       	push	r28
	push r29
    1620:	df 93       	push	r29
	movw r30, r20
    1622:	fa 01       	movw	r30, r20
	movw r28, r20
    1624:	ea 01       	movw	r28, r20
	movw r26, r24
    1626:	dc 01       	movw	r26, r24
	lsr r23
    1628:	76 95       	lsr	r23
	ror r22
    162a:	67 95       	ror	r22
	lsr r22
    162c:	66 95       	lsr	r22
	lsr r22 /* r22 contains keysize_b/8 */
    162e:	66 95       	lsr	r22
	mov C1, r22
    1630:	26 2f       	mov	r18, r22

1:	/* copy key to ctx */ 
	ld r0, X+
    1632:	0d 90       	ld	r0, X+
	st Z+, r0
    1634:	01 92       	st	Z+, r0
	dec C1
    1636:	2a 95       	dec	r18
	brne 1b
    1638:	e1 f7       	brne	.-8      	; 0x1632 <aes_init+0x1c>
	
	lsr NK
    163a:	66 95       	lsr	r22
	lsr NK
    163c:	66 95       	lsr	r22
	bst NK,3 /* set T if NK==8 */
    163e:	63 fb       	bst	r22, 3
	mov NEXT_NK, NK
    1640:	36 2f       	mov	r19, r22
	mov HI, NK
    1642:	76 2f       	mov	r23, r22
	subi HI, -7
    1644:	79 5f       	subi	r23, 0xF9	; 249
	lsl HI
    1646:	77 0f       	add	r23, r23
	lsl HI
    1648:	77 0f       	add	r23, r23
	movw r26, r30
    164a:	df 01       	movw	r26, r30
	sbiw r26, 4
    164c:	14 97       	sbiw	r26, 0x04	; 4
	mov C1, NK
    164e:	26 2f       	mov	r18, r22
	ldi r30, lo8(aes_sbox)
    1650:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31, hi8(aes_sbox)
    1652:	f7 e1       	ldi	r31, 0x17	; 23
	movw SBOX_SAVE0, r30
    1654:	7f 01       	movw	r14, r30
	ldi XRC, 1
    1656:	11 e0       	ldi	r17, 0x01	; 1
1:	
	ld T0, X+
    1658:	4d 91       	ld	r20, X+
	ld T1, X+
    165a:	5d 91       	ld	r21, X+
	ld T2, X+
    165c:	8d 91       	ld	r24, X+
	ld T3, X+
    165e:	9d 91       	ld	r25, X+
	cp NEXT_NK, C1
    1660:	32 17       	cp	r19, r18
	breq 2f 
    1662:	b1 f0       	breq	.+44     	; 0x1690 <aes_init+0x7a>
	brtc 5f
    1664:	5e f5       	brtc	.+86     	; 0x16bc <aes_init+0xa6>
	mov r16, C1
    1666:	02 2f       	mov	r16, r18
	andi r16, 0x07
    1668:	07 70       	andi	r16, 0x07	; 7
	cpi r16, 0x04
    166a:	04 30       	cpi	r16, 0x04	; 4
	brne 5f
    166c:	39 f5       	brne	.+78     	; 0x16bc <aes_init+0xa6>
	movw r30, SBOX_SAVE0
    166e:	f7 01       	movw	r30, r14
	add r30, T0
    1670:	e4 0f       	add	r30, r20
	adc r31, r1
    1672:	f1 1d       	adc	r31, r1
	lpm T0, Z
    1674:	44 91       	lpm	r20, Z
	movw r30, SBOX_SAVE0
    1676:	f7 01       	movw	r30, r14
	add r30, T1
    1678:	e5 0f       	add	r30, r21
	adc r31, r1
    167a:	f1 1d       	adc	r31, r1
	lpm T1, Z
    167c:	54 91       	lpm	r21, Z
	movw r30, SBOX_SAVE0
    167e:	f7 01       	movw	r30, r14
	add r30, T2
    1680:	e8 0f       	add	r30, r24
	adc r31, r1
    1682:	f1 1d       	adc	r31, r1
	lpm T2, Z
    1684:	84 91       	lpm	r24, Z
	movw r30, SBOX_SAVE0
    1686:	f7 01       	movw	r30, r14
	add r30, T3
    1688:	e9 0f       	add	r30, r25
	adc r31, r1
    168a:	f1 1d       	adc	r31, r1
	lpm T3, Z
    168c:	94 91       	lpm	r25, Z
	rjmp 5f
    168e:	16 c0       	rjmp	.+44     	; 0x16bc <aes_init+0xa6>
2:
	add NEXT_NK, NK
    1690:	36 0f       	add	r19, r22
	movw r30, SBOX_SAVE0
    1692:	f7 01       	movw	r30, r14
	add r30, T0
    1694:	e4 0f       	add	r30, r20
	adc r31, r1
    1696:	f1 1d       	adc	r31, r1
	lpm r16, Z
    1698:	04 91       	lpm	r16, Z
	movw r30, SBOX_SAVE0
    169a:	f7 01       	movw	r30, r14
	add r30, T1
    169c:	e5 0f       	add	r30, r21
	adc r31, r1
    169e:	f1 1d       	adc	r31, r1
	lpm T0, Z
    16a0:	44 91       	lpm	r20, Z
	movw r30, SBOX_SAVE0
    16a2:	f7 01       	movw	r30, r14
	add r30, T2
    16a4:	e8 0f       	add	r30, r24
	adc r31, r1
    16a6:	f1 1d       	adc	r31, r1
	lpm T1, Z
    16a8:	54 91       	lpm	r21, Z
	movw r30, SBOX_SAVE0
    16aa:	f7 01       	movw	r30, r14
	add r30, T3
    16ac:	e9 0f       	add	r30, r25
	adc r31, r1
    16ae:	f1 1d       	adc	r31, r1
	lpm T2, Z
    16b0:	84 91       	lpm	r24, Z
	mov T3, r16
    16b2:	90 2f       	mov	r25, r16
	eor T0, XRC
    16b4:	41 27       	eor	r20, r17
	lsl XRC
    16b6:	11 0f       	add	r17, r17
	brcc 3f
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <aes_init+0xa6>
	ldi XRC, 0x1b
    16ba:	1b e1       	ldi	r17, 0x1B	; 27
3:
5:	
	movw r30, r26
    16bc:	fd 01       	movw	r30, r26

	ld r0, Y+
    16be:	09 90       	ld	r0, Y+
	eor r0, T0
    16c0:	04 26       	eor	r0, r20
	st Z+, r0 
    16c2:	01 92       	st	Z+, r0
	ld r0, Y+
    16c4:	09 90       	ld	r0, Y+
	eor r0 ,T1
    16c6:	05 26       	eor	r0, r21
	st Z+, r0
    16c8:	01 92       	st	Z+, r0
	ld r0, Y+
    16ca:	09 90       	ld	r0, Y+
	eor r0, T2
    16cc:	08 26       	eor	r0, r24
	st Z+, r0
    16ce:	01 92       	st	Z+, r0
	ld r0, Y+
    16d0:	09 90       	ld	r0, Y+
	eor r0, T3
    16d2:	09 26       	eor	r0, r25
	st Z+, r0
    16d4:	01 92       	st	Z+, r0
	st Z+, T1
	st Z+, T2
	st Z+, T3
*/		
	
	inc C1
    16d6:	23 95       	inc	r18
	cp C1, HI
    16d8:	27 17       	cp	r18, r23
	breq 6f
    16da:	09 f0       	breq	.+2      	; 0x16de <aes_init+0xc8>
	rjmp 1b
    16dc:	bd cf       	rjmp	.-134    	; 0x1658 <aes_init+0x42>
6:	
	
	clt
    16de:	e8 94       	clt
	pop r29
    16e0:	df 91       	pop	r29
	pop r28
    16e2:	cf 91       	pop	r28
	pop_range 14, 17
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
	ret
    16ec:	08 95       	ret
	...

00001700 <aes_sbox>:
    1700:	63 7c       	andi	r22, 0xC3	; 195
    1702:	77 7b       	andi	r23, 0xB7	; 183
    1704:	f2 6b       	ori	r31, 0xB2	; 178
    1706:	6f c5       	rjmp	.+2782   	; 0x21e6 <__vector_1+0x12c>
    1708:	30 01       	movw	r6, r0
    170a:	67 2b       	or	r22, r23
    170c:	fe d7       	rcall	.+4092   	; 0x270a <decode_data+0xe2>
    170e:	ab 76       	andi	r26, 0x6B	; 107
    1710:	ca 82       	std	Y+2, r12	; 0x02
    1712:	c9 7d       	andi	r28, 0xD9	; 217
    1714:	fa 59       	subi	r31, 0x9A	; 154
    1716:	47 f0       	brie	.+16     	; 0x1728 <aes_sbox+0x28>
    1718:	ad d4       	rcall	.+2394   	; 0x2074 <rfm12_read_int_flags_inline+0x8>
    171a:	a2 af       	std	Z+58, r26	; 0x3a
    171c:	9c a4       	ldd	r9, Y+44	; 0x2c
    171e:	72 c0       	rjmp	.+228    	; 0x1804 <request_queue_init+0x4>
    1720:	b7 fd       	sbrc	r27, 7
    1722:	93 26       	eor	r9, r19
    1724:	36 3f       	cpi	r19, 0xF6	; 246
    1726:	f7 cc       	rjmp	.-1554   	; 0x1116 <lut_gf256mul_0x04+0x16>
    1728:	34 a5       	ldd	r19, Z+44	; 0x2c
    172a:	e5 f1       	brhs	.+120    	; 0x17a4 <aes_sbox+0xa4>
    172c:	71 d8       	rcall	.-3870   	; 0x810 <__c.2405+0x2>
    172e:	31 15       	cp	r19, r1
    1730:	04 c7       	rjmp	.+3592   	; 0x253a <pkg_headerext_common_set_messageid+0x46>
    1732:	23 c3       	rjmp	.+1606   	; 0x1d7a <find_request_to_repeat+0x186>
    1734:	18 96       	adiw	r26, 0x08	; 8
    1736:	05 9a       	sbi	0x00, 5	; 0
    1738:	07 12       	cpse	r0, r23
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	eb 27       	eor	r30, r27
    173e:	b2 75       	andi	r27, 0x52	; 82
    1740:	09 83       	std	Y+1, r16	; 0x01
    1742:	2c 1a       	sub	r2, r28
    1744:	1b 6e       	ori	r17, 0xEB	; 235
    1746:	5a a0       	ldd	r5, Y+34	; 0x22
    1748:	52 3b       	cpi	r21, 0xB2	; 178
    174a:	d6 b3       	in	r29, 0x16	; 22
    174c:	29 e3       	ldi	r18, 0x39	; 57
    174e:	2f 84       	ldd	r2, Y+15	; 0x0f
    1750:	53 d1       	rcall	.+678    	; 0x19f8 <print_request_queue+0xa6>
    1752:	00 ed       	ldi	r16, 0xD0	; 208
    1754:	20 fc       	sbrc	r2, 0
    1756:	b1 5b       	subi	r27, 0xB1	; 177
    1758:	6a cb       	rjmp	.-2348   	; 0xe2e <aes_decrypt_core+0x124>
    175a:	be 39       	cpi	r27, 0x9E	; 158
    175c:	4a 4c       	sbci	r20, 0xCA	; 202
    175e:	58 cf       	rjmp	.-336    	; 0x1610 <aes128_init>
    1760:	d0 ef       	ldi	r29, 0xF0	; 240
    1762:	aa fb       	.word	0xfbaa	; ????
    1764:	43 4d       	sbci	r20, 0xD3	; 211
    1766:	33 85       	ldd	r19, Z+11	; 0x0b
    1768:	45 f9       	bld	r20, 5
    176a:	02 7f       	andi	r16, 0xF2	; 242
    176c:	50 3c       	cpi	r21, 0xC0	; 192
    176e:	9f a8       	ldd	r9, Y+55	; 0x37
    1770:	51 a3       	std	Z+33, r21	; 0x21
    1772:	40 8f       	std	Z+24, r20	; 0x18
    1774:	92 9d       	mul	r25, r2
    1776:	38 f5       	brcc	.+78     	; 0x17c6 <aes_sbox+0xc6>
    1778:	bc b6       	in	r11, 0x3c	; 60
    177a:	da 21       	and	r29, r10
    177c:	10 ff       	sbrs	r17, 0
    177e:	f3 d2       	rcall	.+1510   	; 0x1d66 <find_request_to_repeat+0x172>
    1780:	cd 0c       	add	r12, r13
    1782:	13 ec       	ldi	r17, 0xC3	; 195
    1784:	5f 97       	sbiw	r26, 0x1f	; 31
    1786:	44 17       	cp	r20, r20
    1788:	c4 a7       	std	Z+44, r28	; 0x2c
    178a:	7e 3d       	cpi	r23, 0xDE	; 222
    178c:	64 5d       	subi	r22, 0xD4	; 212
    178e:	19 73       	andi	r17, 0x39	; 57
    1790:	60 81       	ld	r22, Z
    1792:	4f dc       	rcall	.-1890   	; 0x1032 <lut_gf256mul_0x09+0x32>
    1794:	22 2a       	or	r2, r18
    1796:	90 88       	ldd	r9, Z+16	; 0x10
    1798:	46 ee       	ldi	r20, 0xE6	; 230
    179a:	b8 14       	cp	r11, r8
    179c:	de 5e       	subi	r29, 0xEE	; 238
    179e:	0b db       	rcall	.-2538   	; 0xdb6 <aes_decrypt_core+0xac>
    17a0:	e0 32       	cpi	r30, 0x20	; 32
    17a2:	3a 0a       	sbc	r3, r26
    17a4:	49 06       	cpc	r4, r25
    17a6:	24 5c       	subi	r18, 0xC4	; 196
    17a8:	c2 d3       	rcall	.+1924   	; 0x1f2e <remove_request+0x16e>
    17aa:	ac 62       	ori	r26, 0x2C	; 44
    17ac:	91 95       	neg	r25
    17ae:	e4 79       	andi	r30, 0x94	; 148
    17b0:	e7 c8       	rjmp	.-3634   	; 0x980 <__c.2397+0x23>
    17b2:	37 6d       	ori	r19, 0xD7	; 215
    17b4:	8d d5       	rcall	.+2842   	; 0x22d0 <rfm12_rx_clear+0x2>
    17b6:	4e a9       	ldd	r20, Y+54	; 0x36
    17b8:	6c 56       	subi	r22, 0x6C	; 108
    17ba:	f4 ea       	ldi	r31, 0xA4	; 164
    17bc:	65 7a       	andi	r22, 0xA5	; 165
    17be:	ae 08       	sbc	r10, r14
    17c0:	ba 78       	andi	r27, 0x8A	; 138
    17c2:	25 2e       	mov	r2, r21
    17c4:	1c a6       	std	Y+44, r1	; 0x2c
    17c6:	b4 c6       	rjmp	.+3432   	; 0x2530 <pkg_headerext_common_set_messageid+0x3c>
    17c8:	e8 dd       	rcall	.-1072   	; 0x139a <exit+0xfa>
    17ca:	74 1f       	adc	r23, r20
    17cc:	4b bd       	out	0x2b, r20	; 43
    17ce:	8b 8a       	std	Y+19, r8	; 0x13
    17d0:	70 3e       	cpi	r23, 0xE0	; 224
    17d2:	b5 66       	ori	r27, 0x65	; 101
    17d4:	48 03       	fmul	r20, r16
    17d6:	f6 0e       	add	r15, r22
    17d8:	61 35       	cpi	r22, 0x51	; 81
    17da:	57 b9       	out	0x07, r21	; 7
    17dc:	86 c1       	rjmp	.+780    	; 0x1aea <print_request_queue+0x198>
    17de:	1d 9e       	mul	r1, r29
    17e0:	e1 f8       	bld	r14, 1
    17e2:	98 11       	cpse	r25, r8
    17e4:	69 d9       	rcall	.-3374   	; 0xab8 <__c.2387+0x2c>
    17e6:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__data_load_end+0x1fea7c>
    17ea:	87 e9       	ldi	r24, 0x97	; 151
    17ec:	ce 55       	subi	r28, 0x5E	; 94
    17ee:	28 df       	rcall	.-432    	; 0x1640 <aes_init+0x2a>
    17f0:	8c a1       	ldd	r24, Y+36	; 0x24
    17f2:	89 0d       	add	r24, r9
    17f4:	bf e6       	ldi	r27, 0x6F	; 111
    17f6:	42 68       	ori	r20, 0x82	; 130
    17f8:	41 99       	sbic	0x08, 1	; 8
    17fa:	2d 0f       	add	r18, r29
    17fc:	b0 54       	subi	r27, 0x40	; 64
    17fe:	bb 16       	cp	r11, r27

00001800 <request_queue_init>:
// The items request_queue[DEVICEID][0] holds the device id DEVICEID,
// items request_queue[DEVICEID][x] with x > 0 hold the indices to the request buffer.
uint16_t request_queue[REQUEST_QUEUE_RECEIVERS][REQUEST_QUEUE_PACKETS + 1];

void request_queue_init(void)
{
    1800:	e4 e2       	ldi	r30, 0x24	; 36
    1802:	f1 e0       	ldi	r31, 0x01	; 1
    1804:	84 e2       	ldi	r24, 0x24	; 36
    1806:	92 e0       	ldi	r25, 0x02	; 2
	uint8_t i, j;
	
	for (i = 0; i < REQUEST_BUFFER_SIZE; i++)
	{
		request_buffer[i].message_type = MESSAGETYPE_UNUSED;
    1808:	2f ef       	ldi	r18, 0xFF	; 255
    180a:	20 83       	st	Z, r18
    180c:	b0 96       	adiw	r30, 0x20	; 32

void request_queue_init(void)
{
	uint8_t i, j;
	
	for (i = 0; i < REQUEST_BUFFER_SIZE; i++)
    180e:	e8 17       	cp	r30, r24
    1810:	f9 07       	cpc	r31, r25
    1812:	d9 f7       	brne	.-10     	; 0x180a <request_queue_init+0xa>
    1814:	e4 e2       	ldi	r30, 0x24	; 36
    1816:	f2 e0       	ldi	r31, 0x02	; 2
    1818:	2c e4       	ldi	r18, 0x4C	; 76
    181a:	32 e0       	ldi	r19, 0x02	; 2

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
	{
		for (j = 0; j < REQUEST_QUEUE_PACKETS + 1; j++)
		{
			request_queue[i][j] = SLOT_UNUSED;
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	93 83       	std	Z+3, r25	; 0x03
    1826:	82 83       	std	Z+2, r24	; 0x02
    1828:	95 83       	std	Z+5, r25	; 0x05
    182a:	84 83       	std	Z+4, r24	; 0x04
    182c:	97 83       	std	Z+7, r25	; 0x07
    182e:	86 83       	std	Z+6, r24	; 0x06
    1830:	91 87       	std	Z+9, r25	; 0x09
    1832:	80 87       	std	Z+8, r24	; 0x08
    1834:	3a 96       	adiw	r30, 0x0a	; 10
	for (i = 0; i < REQUEST_BUFFER_SIZE; i++)
	{
		request_buffer[i].message_type = MESSAGETYPE_UNUSED;
	}

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
    1836:	e2 17       	cp	r30, r18
    1838:	f3 07       	cpc	r31, r19
    183a:	91 f7       	brne	.-28     	; 0x1820 <request_queue_init+0x20>
		for (j = 0; j < REQUEST_QUEUE_PACKETS + 1; j++)
		{
			request_queue[i][j] = SLOT_UNUSED;
		}
	}
}
    183c:	08 95       	ret

0000183e <queue_request>:

// Remember the request in the request queue and return if it was successful.
// If not, the request will not be queued and therefore not repeated if no acknowledge is received.
bool queue_request(uint16_t receiver_id, uint8_t message_type, uint8_t aes_key, uint8_t * data, uint8_t data_bytes)
{
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	a4 e2       	ldi	r26, 0x24	; 36
    184e:	b1 e0       	ldi	r27, 0x01	; 1
	// Search free slot in request_buffer.
	uint8_t rb_slot = 0;
	
	while (request_buffer[rb_slot].message_type != MESSAGETYPE_UNUSED)
    1850:	e0 e0       	ldi	r30, 0x00	; 0
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <queue_request+0x24>
    1856:	31 96       	adiw	r30, 0x01	; 1
    1858:	90 96       	adiw	r26, 0x20	; 32
	{
		rb_slot++;
		
		if (rb_slot == REQUEST_BUFFER_SIZE)
    185a:	e8 30       	cpi	r30, 0x08	; 8
    185c:	f1 05       	cpc	r31, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <queue_request+0x24>
    1860:	6b c0       	rjmp	.+214    	; 0x1938 <queue_request+0xfa>
    1862:	5e 2f       	mov	r21, r30
bool queue_request(uint16_t receiver_id, uint8_t message_type, uint8_t aes_key, uint8_t * data, uint8_t data_bytes)
{
	// Search free slot in request_buffer.
	uint8_t rb_slot = 0;
	
	while (request_buffer[rb_slot].message_type != MESSAGETYPE_UNUSED)
    1864:	ef 01       	movw	r28, r30
    1866:	7c 91       	ld	r23, X
    1868:	7f 3f       	cpi	r23, 0xFF	; 255
    186a:	a9 f7       	brne	.-22     	; 0x1856 <queue_request+0x18>
    186c:	a4 e2       	ldi	r26, 0x24	; 36
    186e:	b2 e0       	ldi	r27, 0x02	; 2
    1870:	e0 e0       	ldi	r30, 0x00	; 0
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <queue_request+0x44>
    1876:	31 96       	adiw	r30, 0x01	; 1
    1878:	1a 96       	adiw	r26, 0x0a	; 10
	
	while ((request_queue[rs_slot][0] != SLOT_UNUSED) && (request_queue[rs_slot][0] != receiver_id))
	{
		rs_slot++;
		
		if (rs_slot == REQUEST_QUEUE_RECEIVERS)
    187a:	e4 30       	cpi	r30, 0x04	; 4
    187c:	f1 05       	cpc	r31, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <queue_request+0x44>
    1880:	5d c0       	rjmp	.+186    	; 0x193c <queue_request+0xfe>
	}
	
	// Search free slot in request_queue for receiver_id.
	uint8_t rs_slot = 0;
	
	while ((request_queue[rs_slot][0] != SLOT_UNUSED) && (request_queue[rs_slot][0] != receiver_id))
    1882:	6f 01       	movw	r12, r30
    1884:	ed 90       	ld	r14, X+
    1886:	fc 90       	ld	r15, X
    1888:	11 97       	sbiw	r26, 0x01	; 1
    188a:	7f ef       	ldi	r23, 0xFF	; 255
    188c:	e7 16       	cp	r14, r23
    188e:	f7 06       	cpc	r15, r23
    1890:	19 f0       	breq	.+6      	; 0x1898 <queue_request+0x5a>
    1892:	e8 16       	cp	r14, r24
    1894:	f9 06       	cpc	r15, r25
    1896:	79 f7       	brne	.-34     	; 0x1876 <queue_request+0x38>
			return false; // ERROR: buffer is full!
		}
	}
	
	// set receiver_id in request_queue.
	request_queue[rs_slot][0] = receiver_id;
    1898:	f6 01       	movw	r30, r12
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	d6 01       	movw	r26, r12
    18a8:	aa 0f       	add	r26, r26
    18aa:	bb 1f       	adc	r27, r27
    18ac:	ea 0f       	add	r30, r26
    18ae:	fb 1f       	adc	r31, r27
    18b0:	df 01       	movw	r26, r30
    18b2:	ac 5d       	subi	r26, 0xDC	; 220
    18b4:	bd 4f       	sbci	r27, 0xFD	; 253
    18b6:	8d 93       	st	X+, r24
    18b8:	9c 93       	st	X, r25
    18ba:	ea 5d       	subi	r30, 0xDA	; 218
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
	
	// Search free slot in request_queue for request.
	uint8_t msg_slot = 1;
	
	while (request_queue[rs_slot][msg_slot] != SLOT_UNUSED)
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <queue_request+0x8e>
    18c4:	01 96       	adiw	r24, 0x01	; 1
	{
		msg_slot++;
		
		if (msg_slot == REQUEST_QUEUE_PACKETS + 1)
    18c6:	85 30       	cpi	r24, 0x05	; 5
    18c8:	91 05       	cpc	r25, r1
    18ca:	d1 f1       	breq	.+116    	; 0x1940 <queue_request+0x102>
	request_queue[rs_slot][0] = receiver_id;
	
	// Search free slot in request_queue for request.
	uint8_t msg_slot = 1;
	
	while (request_queue[rs_slot][msg_slot] != SLOT_UNUSED)
    18cc:	a1 91       	ld	r26, Z+
    18ce:	b1 91       	ld	r27, Z+
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	c1 f7       	brne	.-16     	; 0x18c4 <queue_request+0x86>
			return false; // ERROR: buffer is full!
		}
	}
	
	// Set id of request_buffer index in request queue.
	request_queue[rs_slot][msg_slot] = rb_slot;
    18d4:	f6 01       	movw	r30, r12
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	ec 0d       	add	r30, r12
    18e0:	fd 1d       	adc	r31, r13
    18e2:	e8 0f       	add	r30, r24
    18e4:	f9 1f       	adc	r31, r25
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ec 5d       	subi	r30, 0xDC	; 220
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	85 2f       	mov	r24, r21
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	08 31       	cpi	r16, 0x18	; 24
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <queue_request+0xbe>
    18fa:	07 e1       	ldi	r16, 0x17	; 23
	{
		data_bytes = REQUEST_DATA_BYTES_MAX;
	}
	
	// Set data in request_buffer.
	request_buffer[rb_slot].message_type = message_type;
    18fc:	ce 01       	movw	r24, r28
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	82 95       	swap	r24
    1904:	92 95       	swap	r25
    1906:	90 7f       	andi	r25, 0xF0	; 240
    1908:	98 27       	eor	r25, r24
    190a:	80 7f       	andi	r24, 0xF0	; 240
    190c:	98 27       	eor	r25, r24
    190e:	ec 01       	movw	r28, r24
    1910:	cc 5d       	subi	r28, 0xDC	; 220
    1912:	de 4f       	sbci	r29, 0xFE	; 254
    1914:	68 83       	st	Y, r22
	request_buffer[rb_slot].aes_key = aes_key;
    1916:	49 83       	std	Y+1, r20	; 0x01
	request_buffer[rb_slot].packet_counter = 0;
    1918:	1a 82       	std	Y+2, r1	; 0x02
    191a:	1b 82       	std	Y+3, r1	; 0x03
    191c:	1c 82       	std	Y+4, r1	; 0x04
    191e:	1d 82       	std	Y+5, r1	; 0x05
	memcpy(request_buffer[rb_slot].data, data, data_bytes);
    1920:	40 2f       	mov	r20, r16
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	b9 01       	movw	r22, r18
    1926:	86 5d       	subi	r24, 0xD6	; 214
    1928:	9e 4f       	sbci	r25, 0xFE	; 254
    192a:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <memcpy>
	request_buffer[rb_slot].data_bytes = data_bytes;
    192e:	0d 8f       	std	Y+29, r16	; 0x1d
	request_buffer[rb_slot].timeout = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	8e 8f       	std	Y+30, r24	; 0x1e
	request_buffer[rb_slot].retry_count = 0;
    1934:	1f 8e       	std	Y+31, r1	; 0x1f
	
	return true; // success!
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <queue_request+0x104>
	{
		rb_slot++;
		
		if (rb_slot == REQUEST_BUFFER_SIZE)
		{
			return false; // ERROR: buffer is full!
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <queue_request+0x104>
	{
		rs_slot++;
		
		if (rs_slot == REQUEST_QUEUE_RECEIVERS)
		{
			return false; // ERROR: buffer is full!
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <queue_request+0x104>
	{
		msg_slot++;
		
		if (msg_slot == REQUEST_QUEUE_PACKETS + 1)
		{
			return false; // ERROR: buffer is full!
    1940:	80 e0       	ldi	r24, 0x00	; 0
	request_buffer[rb_slot].data_bytes = data_bytes;
	request_buffer[rb_slot].timeout = 1;
	request_buffer[rb_slot].retry_count = 0;
	
	return true; // success!
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	08 95       	ret

00001952 <print_request_queue>:

// Only for debugging...
void print_request_queue(void)
{
    1952:	2f 92       	push	r2
    1954:	3f 92       	push	r3
    1956:	4f 92       	push	r4
    1958:	5f 92       	push	r5
    195a:	6f 92       	push	r6
    195c:	7f 92       	push	r7
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	0f 2e       	mov	r0, r31
    197e:	f4 e2       	ldi	r31, 0x24	; 36
    1980:	cf 2e       	mov	r12, r31
    1982:	f1 e0       	ldi	r31, 0x01	; 1
    1984:	df 2e       	mov	r13, r31
    1986:	f0 2d       	mov	r31, r0
    1988:	0f 2e       	mov	r0, r31
    198a:	f1 e4       	ldi	r31, 0x41	; 65
    198c:	6f 2e       	mov	r6, r31
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	7f 2e       	mov	r7, r31
    1992:	f0 2d       	mov	r31, r0
    1994:	0f 2e       	mov	r0, r31
    1996:	f3 e4       	ldi	r31, 0x43	; 67
    1998:	4f 2e       	mov	r4, r31
    199a:	f1 e0       	ldi	r31, 0x01	; 1
    199c:	5f 2e       	mov	r5, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	81 2c       	mov	r8, r1
    19a2:	91 2c       	mov	r9, r1
			UART_PUTF4("MessageType %u, PacketCounter %lu, Timeout %u, Retry %u, Data", request_buffer[i].message_type, request_buffer[i].packet_counter, request_buffer[i].timeout, request_buffer[i].retry_count);
			
			// TODO: only show bytes of real data length
			for (j = 0; j < request_buffer[i].data_bytes; j++)
			{
				UART_PUTF(" %02x", request_buffer[i].data[j]);
    19a4:	0f ed       	ldi	r16, 0xDF	; 223
    19a6:	11 e0       	ldi	r17, 0x01	; 1
    19a8:	28 eb       	ldi	r18, 0xB8	; 184
    19aa:	33 e0       	ldi	r19, 0x03	; 3
    19ac:	22 2e       	mov	r2, r18
    19ae:	d9 01       	movw	r26, r18
    19b0:	b9 83       	std	Y+1, r27	; 0x01
	bool empty = true;
	
	for (i = 0; i < REQUEST_BUFFER_SIZE; i++)
	{
		
		if (request_buffer[i].message_type != MESSAGETYPE_UNUSED)
    19b2:	d6 01       	movw	r26, r12
    19b4:	8c 91       	ld	r24, X
    19b6:	8f 3f       	cpi	r24, 0xFF	; 255
    19b8:	09 f4       	brne	.+2      	; 0x19bc <print_request_queue+0x6a>
    19ba:	6c c0       	rjmp	.+216    	; 0x1a94 <print_request_queue+0x142>
		{
			UART_PUTF("Request Buffer %u: ", i);
    19bc:	9f 92       	push	r9
    19be:	8f 92       	push	r8
    19c0:	a3 e2       	ldi	r26, 0x23	; 35
    19c2:	b2 e0       	ldi	r27, 0x02	; 2
    19c4:	bf 93       	push	r27
    19c6:	af 93       	push	r26
    19c8:	a8 eb       	ldi	r26, 0xB8	; 184
    19ca:	b3 e0       	ldi	r27, 0x03	; 3
    19cc:	bf 93       	push	r27
    19ce:	af 93       	push	r26
    19d0:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    19d4:	88 eb       	ldi	r24, 0xB8	; 184
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
			UART_PUTF4("MessageType %u, PacketCounter %lu, Timeout %u, Retry %u, Data", request_buffer[i].message_type, request_buffer[i].packet_counter, request_buffer[i].timeout, request_buffer[i].retry_count);
    19dc:	d2 01       	movw	r26, r4
    19de:	8c 91       	ld	r24, X
    19e0:	1f 92       	push	r1
    19e2:	8f 93       	push	r24
    19e4:	f2 01       	movw	r30, r4
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	80 81       	ld	r24, Z
    19ea:	1f 92       	push	r1
    19ec:	8f 93       	push	r24
    19ee:	f6 01       	movw	r30, r12
    19f0:	85 81       	ldd	r24, Z+5	; 0x05
    19f2:	8f 93       	push	r24
    19f4:	84 81       	ldd	r24, Z+4	; 0x04
    19f6:	8f 93       	push	r24
    19f8:	83 81       	ldd	r24, Z+3	; 0x03
    19fa:	8f 93       	push	r24
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	8f 93       	push	r24
    1a00:	80 81       	ld	r24, Z
    1a02:	1f 92       	push	r1
    1a04:	8f 93       	push	r24
    1a06:	a5 ee       	ldi	r26, 0xE5	; 229
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	bf 93       	push	r27
    1a0c:	af 93       	push	r26
    1a0e:	a8 eb       	ldi	r26, 0xB8	; 184
    1a10:	b3 e0       	ldi	r27, 0x03	; 3
    1a12:	bf 93       	push	r27
    1a14:	af 93       	push	r26
    1a16:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1a1a:	88 eb       	ldi	r24, 0xB8	; 184
    1a1c:	93 e0       	ldi	r25, 0x03	; 3
    1a1e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
    1a22:	73 01       	movw	r14, r6
			
			// TODO: only show bytes of real data length
			for (j = 0; j < request_buffer[i].data_bytes; j++)
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	d3 01       	movw	r26, r6
    1a30:	8c 91       	ld	r24, X
    1a32:	88 23       	and	r24, r24
    1a34:	59 f1       	breq	.+86     	; 0x1a8c <print_request_queue+0x13a>
    1a36:	31 2c       	mov	r3, r1
			{
				UART_PUTF(" %02x", request_buffer[i].data[j]);
    1a38:	c4 01       	movw	r24, r8
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	82 95       	swap	r24
    1a40:	92 95       	swap	r25
    1a42:	90 7f       	andi	r25, 0xF0	; 240
    1a44:	98 27       	eor	r25, r24
    1a46:	80 7f       	andi	r24, 0xF0	; 240
    1a48:	98 27       	eor	r25, r24
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	ec 5d       	subi	r30, 0xDC	; 220
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	5f 01       	movw	r10, r30
    1a52:	f5 01       	movw	r30, r10
    1a54:	e3 0d       	add	r30, r3
    1a56:	f1 1d       	adc	r31, r1
    1a58:	86 81       	ldd	r24, Z+6	; 0x06
    1a5a:	1f 92       	push	r1
    1a5c:	8f 93       	push	r24
    1a5e:	1f 93       	push	r17
    1a60:	0f 93       	push	r16
    1a62:	a8 eb       	ldi	r26, 0xB8	; 184
    1a64:	b3 e0       	ldi	r27, 0x03	; 3
    1a66:	bf 93       	push	r27
    1a68:	af 93       	push	r26
    1a6a:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1a6e:	82 2d       	mov	r24, r2
    1a70:	99 81       	ldd	r25, Y+1	; 0x01
    1a72:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
		{
			UART_PUTF("Request Buffer %u: ", i);
			UART_PUTF4("MessageType %u, PacketCounter %lu, Timeout %u, Retry %u, Data", request_buffer[i].message_type, request_buffer[i].packet_counter, request_buffer[i].timeout, request_buffer[i].retry_count);
			
			// TODO: only show bytes of real data length
			for (j = 0; j < request_buffer[i].data_bytes; j++)
    1a76:	33 94       	inc	r3
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	d7 01       	movw	r26, r14
    1a86:	8c 91       	ld	r24, X
    1a88:	38 16       	cp	r3, r24
    1a8a:	18 f3       	brcs	.-58     	; 0x1a52 <print_request_queue+0x100>
			{
				UART_PUTF(" %02x", request_buffer[i].data[j]);
			}
			
			UART_PUTS("\r\n");
    1a8c:	8c ed       	ldi	r24, 0xDC	; 220
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
    1a94:	bf ef       	ldi	r27, 0xFF	; 255
    1a96:	8b 1a       	sub	r8, r27
    1a98:	9b 0a       	sbc	r9, r27
    1a9a:	e0 e2       	ldi	r30, 0x20	; 32
    1a9c:	ce 0e       	add	r12, r30
    1a9e:	d1 1c       	adc	r13, r1
    1aa0:	f0 e2       	ldi	r31, 0x20	; 32
    1aa2:	6f 0e       	add	r6, r31
    1aa4:	71 1c       	adc	r7, r1
    1aa6:	20 e2       	ldi	r18, 0x20	; 32
    1aa8:	42 0e       	add	r4, r18
    1aaa:	51 1c       	adc	r5, r1
void print_request_queue(void)
{
	uint8_t i, j;
	bool empty = true;
	
	for (i = 0; i < REQUEST_BUFFER_SIZE; i++)
    1aac:	38 e0       	ldi	r19, 0x08	; 8
    1aae:	83 16       	cp	r8, r19
    1ab0:	91 04       	cpc	r9, r1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <print_request_queue+0x164>
    1ab4:	7e cf       	rjmp	.-260    	; 0x19b2 <print_request_queue+0x60>
    1ab6:	04 e2       	ldi	r16, 0x24	; 36
    1ab8:	12 e0       	ldi	r17, 0x02	; 2
    1aba:	c1 2c       	mov	r12, r1
    1abc:	d1 2c       	mov	r13, r1
    1abe:	21 e0       	ldi	r18, 0x01	; 1
	{
		if (request_queue[i][0] != SLOT_UNUSED)
		{
			empty = false;
			
			UART_PUTF("Request Queue %u: ", i);
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	f9 ec       	ldi	r31, 0xC9	; 201
    1ac4:	8f 2e       	mov	r8, r31
    1ac6:	f1 e0       	ldi	r31, 0x01	; 1
    1ac8:	9f 2e       	mov	r9, r31
    1aca:	f0 2d       	mov	r31, r0
			UART_PUTF("ReceiverID %u, Buffer slots", request_queue[i][0]);
    1acc:	0f 2e       	mov	r0, r31
    1ace:	fd ea       	ldi	r31, 0xAD	; 173
    1ad0:	6f 2e       	mov	r6, r31
    1ad2:	f1 e0       	ldi	r31, 0x01	; 1
    1ad4:	7f 2e       	mov	r7, r31
    1ad6:	f0 2d       	mov	r31, r0
			
			for (j = 0; j < REQUEST_QUEUE_PACKETS; j++)
    1ad8:	21 2c       	mov	r2, r1
				{
					UART_PUTS(" -");
				}
				else
				{
					UART_PUTF(" %u", request_queue[i][j + 1]);
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f6 ea       	ldi	r31, 0xA6	; 166
    1ade:	af 2e       	mov	r10, r31
    1ae0:	f1 e0       	ldi	r31, 0x01	; 1
    1ae2:	bf 2e       	mov	r11, r31
    1ae4:	f0 2d       	mov	r31, r0
    1ae6:	88 eb       	ldi	r24, 0xB8	; 184
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
    1aea:	38 2e       	mov	r3, r24
    1aec:	dc 01       	movw	r26, r24
    1aee:	4b 2e       	mov	r4, r27
		}
	}

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
	{
		if (request_queue[i][0] != SLOT_UNUSED)
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <print_request_queue+0x1aa>
    1afa:	54 c0       	rjmp	.+168    	; 0x1ba4 <print_request_queue+0x252>
		{
			empty = false;
			
			UART_PUTF("Request Queue %u: ", i);
    1afc:	df 92       	push	r13
    1afe:	cf 92       	push	r12
    1b00:	9f 92       	push	r9
    1b02:	8f 92       	push	r8
    1b04:	a8 eb       	ldi	r26, 0xB8	; 184
    1b06:	b3 e0       	ldi	r27, 0x03	; 3
    1b08:	bf 93       	push	r27
    1b0a:	af 93       	push	r26
    1b0c:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1b10:	88 eb       	ldi	r24, 0xB8	; 184
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
			UART_PUTF("ReceiverID %u, Buffer slots", request_queue[i][0]);
    1b18:	d8 01       	movw	r26, r16
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	8c 91       	ld	r24, X
    1b1e:	11 97       	sbiw	r26, 0x01	; 1
    1b20:	8f 93       	push	r24
    1b22:	8c 91       	ld	r24, X
    1b24:	8f 93       	push	r24
    1b26:	7f 92       	push	r7
    1b28:	6f 92       	push	r6
    1b2a:	a8 eb       	ldi	r26, 0xB8	; 184
    1b2c:	b3 e0       	ldi	r27, 0x03	; 3
    1b2e:	bf 93       	push	r27
    1b30:	af 93       	push	r26
    1b32:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1b36:	88 eb       	ldi	r24, 0xB8	; 184
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	c8 01       	movw	r24, r16
    1b4a:	02 96       	adiw	r24, 0x02	; 2
    1b4c:	7c 01       	movw	r14, r24
			
			for (j = 0; j < REQUEST_QUEUE_PACKETS; j++)
    1b4e:	52 2c       	mov	r5, r2
			{
				if (request_queue[i][j + 1] == SLOT_UNUSED)
    1b50:	d7 01       	movw	r26, r14
    1b52:	8d 91       	ld	r24, X+
    1b54:	9d 91       	ld	r25, X+
    1b56:	7d 01       	movw	r14, r26
    1b58:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5a:	bf ef       	ldi	r27, 0xFF	; 255
    1b5c:	9b 07       	cpc	r25, r27
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <print_request_queue+0x218>
				{
					UART_PUTS(" -");
    1b60:	8a ea       	ldi	r24, 0xAA	; 170
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <print_request_queue+0x240>
				}
				else
				{
					UART_PUTF(" %u", request_queue[i][j + 1]);
    1b6a:	9f 93       	push	r25
    1b6c:	8f 93       	push	r24
    1b6e:	bf 92       	push	r11
    1b70:	af 92       	push	r10
    1b72:	a8 eb       	ldi	r26, 0xB8	; 184
    1b74:	b3 e0       	ldi	r27, 0x03	; 3
    1b76:	bf 93       	push	r27
    1b78:	af 93       	push	r26
    1b7a:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1b7e:	83 2d       	mov	r24, r3
    1b80:	94 2d       	mov	r25, r4
    1b82:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
			empty = false;
			
			UART_PUTF("Request Queue %u: ", i);
			UART_PUTF("ReceiverID %u, Buffer slots", request_queue[i][0]);
			
			for (j = 0; j < REQUEST_QUEUE_PACKETS; j++)
    1b92:	53 94       	inc	r5
    1b94:	f4 e0       	ldi	r31, 0x04	; 4
    1b96:	5f 12       	cpse	r5, r31
    1b98:	db cf       	rjmp	.-74     	; 0x1b50 <print_request_queue+0x1fe>
				{
					UART_PUTF(" %u", request_queue[i][j + 1]);
				}
			}
			
			UART_PUTS("\r\n");
    1b9a:	83 ea       	ldi	r24, 0xA3	; 163
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
	{
		if (request_queue[i][0] != SLOT_UNUSED)
		{
			empty = false;
    1ba2:	22 2d       	mov	r18, r2
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	c3 1a       	sub	r12, r19
    1ba8:	d3 0a       	sbc	r13, r19
    1baa:	06 5f       	subi	r16, 0xF6	; 246
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
			
			UART_PUTS("\r\n");
		}
	}

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
    1bae:	84 e0       	ldi	r24, 0x04	; 4
    1bb0:	c8 16       	cp	r12, r24
    1bb2:	d1 04       	cpc	r13, r1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <print_request_queue+0x266>
    1bb6:	9c cf       	rjmp	.-200    	; 0x1af0 <print_request_queue+0x19e>
			
			UART_PUTS("\r\n");
		}
	}

	if (empty)
    1bb8:	22 23       	and	r18, r18
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <print_request_queue+0x272>
	{
		UART_PUTS("Request Queue empty");
    1bbc:	8f e8       	ldi	r24, 0x8F	; 143
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
	}

	UART_PUTS("\r\n");
    1bc4:	8c e8       	ldi	r24, 0x8C	; 140
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
}
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	7f 90       	pop	r7
    1be8:	6f 90       	pop	r6
    1bea:	5f 90       	pop	r5
    1bec:	4f 90       	pop	r4
    1bee:	3f 90       	pop	r3
    1bf0:	2f 90       	pop	r2
    1bf2:	08 95       	ret

00001bf4 <find_request_to_repeat>:
// This function has to be called once a second, because the timeout values represent the amount of seconds.
//
// TODO (optimization): Change the behaviour so that a new packet can be sent out of the queue without a delay (currently, we have ~0.5s delay in average).
// So check the queue for "timeout 0" packets more often, but don't reduce the timeout in this case.
request_t * find_request_to_repeat(uint32_t packet_counter)
{
    1bf4:	2f 92       	push	r2
    1bf6:	3f 92       	push	r3
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <find_request_to_repeat+0x26>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <find_request_to_repeat+0x28>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	2b 01       	movw	r4, r22
    1c22:	3c 01       	movw	r6, r24
    1c24:	04 e2       	ldi	r16, 0x24	; 36
    1c26:	12 e0       	ldi	r17, 0x02	; 2
    1c28:	0f 2e       	mov	r0, r31
    1c2a:	fc e4       	ldi	r31, 0x4C	; 76
    1c2c:	cf 2e       	mov	r12, r31
    1c2e:	f2 e0       	ldi	r31, 0x02	; 2
    1c30:	df 2e       	mov	r13, r31
    1c32:	f0 2d       	mov	r31, r0
	uint8_t i;
	uint8_t slot;
	request_t * res = 0;
    1c34:	21 2c       	mov	r2, r1
    1c36:	31 2c       	mov	r3, r1
			if ((request_buffer[slot].timeout == 0) && (res == 0))
			{
				res = &request_buffer[slot];

				// Init header
				memset(&bufx[0], 0, sizeof(bufx));
    1c38:	0f 2e       	mov	r0, r31
    1c3a:	f3 e5       	ldi	r31, 0x53	; 83
    1c3c:	8f 2e       	mov	r8, r31
    1c3e:	f2 e0       	ldi	r31, 0x02	; 2
    1c40:	9f 2e       	mov	r9, r31
    1c42:	f0 2d       	mov	r31, r0
					for (x = 1; x < REQUEST_QUEUE_PACKETS; x++)
					{
						request_queue[i][x] = request_queue[i][x + 1];
					}
					
					request_queue[i][REQUEST_QUEUE_PACKETS] = SLOT_UNUSED;
    1c44:	1c 83       	std	Y+4, r17	; 0x04
    1c46:	0b 83       	std	Y+3, r16	; 0x03
    1c48:	ab 80       	ldd	r10, Y+3	; 0x03
    1c4a:	bc 80       	ldd	r11, Y+4	; 0x04
	uint8_t slot;
	request_t * res = 0;

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
	{
		if (request_queue[i][0] != SLOT_UNUSED)
    1c4c:	f5 01       	movw	r30, r10
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <find_request_to_repeat+0x64>
    1c56:	93 c0       	rjmp	.+294    	; 0x1d7e <find_request_to_repeat+0x18a>
    1c58:	f5 01       	movw	r30, r10
    1c5a:	e2 80       	ldd	r14, Z+2	; 0x02
    1c5c:	f3 80       	ldd	r15, Z+3	; 0x03
    1c5e:	ff 24       	eor	r15, r15
		{
			// count down timeout from first element per queue
			slot = request_queue[i][1];
			
			if (request_buffer[slot].timeout > 0)
    1c60:	f7 01       	movw	r30, r14
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	e2 95       	swap	r30
    1c68:	f2 95       	swap	r31
    1c6a:	f0 7f       	andi	r31, 0xF0	; 240
    1c6c:	fe 27       	eor	r31, r30
    1c6e:	e0 7f       	andi	r30, 0xF0	; 240
    1c70:	fe 27       	eor	r31, r30
    1c72:	ec 5d       	subi	r30, 0xDC	; 220
    1c74:	fe 4f       	sbci	r31, 0xFE	; 254
    1c76:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c78:	88 23       	and	r24, r24
    1c7a:	79 f0       	breq	.+30     	; 0x1c9a <find_request_to_repeat+0xa6>
			{
				request_buffer[slot].timeout--;
    1c7c:	81 50       	subi	r24, 0x01	; 1
    1c7e:	f7 01       	movw	r30, r14
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	e2 95       	swap	r30
    1c86:	f2 95       	swap	r31
    1c88:	f0 7f       	andi	r31, 0xF0	; 240
    1c8a:	fe 27       	eor	r31, r30
    1c8c:	e0 7f       	andi	r30, 0xF0	; 240
    1c8e:	fe 27       	eor	r31, r30
    1c90:	ec 5d       	subi	r30, 0xDC	; 220
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	86 8f       	std	Z+30, r24	; 0x1e
			}
			
			// set bufx to the request to retry, if timeout is reached
			if ((request_buffer[slot].timeout == 0) && (res == 0))
    1c96:	81 11       	cpse	r24, r1
    1c98:	72 c0       	rjmp	.+228    	; 0x1d7e <find_request_to_repeat+0x18a>
    1c9a:	21 14       	cp	r2, r1
    1c9c:	31 04       	cpc	r3, r1
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <find_request_to_repeat+0xae>
    1ca0:	6e c0       	rjmp	.+220    	; 0x1d7e <find_request_to_repeat+0x18a>
			{
				res = &request_buffer[slot];
    1ca2:	97 01       	movw	r18, r14
    1ca4:	22 0f       	add	r18, r18
    1ca6:	33 1f       	adc	r19, r19
    1ca8:	22 95       	swap	r18
    1caa:	32 95       	swap	r19
    1cac:	30 7f       	andi	r19, 0xF0	; 240
    1cae:	32 27       	eor	r19, r18
    1cb0:	20 7f       	andi	r18, 0xF0	; 240
    1cb2:	32 27       	eor	r19, r18
    1cb4:	3a 83       	std	Y+2, r19	; 0x02
    1cb6:	29 83       	std	Y+1, r18	; 0x01
    1cb8:	2c 5d       	subi	r18, 0xDC	; 220
    1cba:	3e 4f       	sbci	r19, 0xFE	; 254
    1cbc:	19 01       	movw	r2, r18

				// Init header
				memset(&bufx[0], 0, sizeof(bufx));
    1cbe:	f4 01       	movw	r30, r8
    1cc0:	21 e4       	ldi	r18, 0x41	; 65
    1cc2:	11 92       	st	Z+, r1
    1cc4:	2a 95       	dec	r18
    1cc6:	e9 f7       	brne	.-6      	; 0x1cc2 <find_request_to_repeat+0xce>
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
}

static inline void array_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array)
{
	_eeprom_write_UIntValue(bit, length, val, array);
    1cc8:	84 01       	movw	r16, r8
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	a9 01       	movw	r20, r18
    1cd0:	6c e0       	ldi	r22, 0x0C	; 12
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    1cdc:	a3 01       	movw	r20, r6
    1cde:	92 01       	movw	r18, r4
    1ce0:	68 e1       	ldi	r22, 0x18	; 24
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	8c e2       	ldi	r24, 0x2C	; 44
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>

// Set MessageType (EnumValue)
// Offset: 68, length bits 4
static inline void pkg_header_set_messagetype(MessageTypeEnum val)
{
  array_write_UIntValue(68, 4, val, bufx);
    1cec:	f1 01       	movw	r30, r2
    1cee:	20 81       	ld	r18, Z
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	84 e4       	ldi	r24, 0x44	; 68
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>

				// set message type
				pkg_header_set_messagetype(request_buffer[slot].message_type);

				// set header extension (incl. receiver_id) + data
				memcpy(bufx + 9, request_buffer[slot].data, request_buffer[slot].data_bytes); // header size = 9 bytes
    1d02:	f1 01       	movw	r30, r2
    1d04:	45 8d       	ldd	r20, Z+29	; 0x1d
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	69 81       	ldd	r22, Y+1	; 0x01
    1d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d0c:	66 5d       	subi	r22, 0xD6	; 214
    1d0e:	7e 4f       	sbci	r23, 0xFE	; 254
    1d10:	8c e5       	ldi	r24, 0x5C	; 92
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <memcpy>
				
				// remember packet counter
				request_buffer[slot].packet_counter = packet_counter;
    1d18:	f1 01       	movw	r30, r2
    1d1a:	42 82       	std	Z+2, r4	; 0x02
    1d1c:	53 82       	std	Z+3, r5	; 0x03
    1d1e:	64 82       	std	Z+4, r6	; 0x04
    1d20:	75 82       	std	Z+5, r7	; 0x05
				
				request_buffer[slot].retry_count++;
    1d22:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	87 8f       	std	Z+31, r24	; 0x1f
				
				if (request_buffer[slot].retry_count > REQUEST_RETRY_COUNT)
    1d28:	86 30       	cpi	r24, 0x06	; 6
    1d2a:	d8 f0       	brcs	.+54     	; 0x1d62 <find_request_to_repeat+0x16e>
				{
					// delete request from queue
					request_buffer[slot].message_type = MESSAGETYPE_UNUSED;
    1d2c:	f1 01       	movw	r30, r2
    1d2e:	2f ef       	ldi	r18, 0xFF	; 255
    1d30:	20 83       	st	Z, r18

					uint8_t x;
					
					for (x = 1; x < REQUEST_QUEUE_PACKETS; x++)
					{
						request_queue[i][x] = request_queue[i][x + 1];
    1d32:	f5 01       	movw	r30, r10
    1d34:	84 81       	ldd	r24, Z+4	; 0x04
    1d36:	95 81       	ldd	r25, Z+5	; 0x05
    1d38:	93 83       	std	Z+3, r25	; 0x03
    1d3a:	82 83       	std	Z+2, r24	; 0x02
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	35 83       	std	Z+5, r19	; 0x05
    1d42:	24 83       	std	Z+4, r18	; 0x04
    1d44:	20 85       	ldd	r18, Z+8	; 0x08
    1d46:	31 85       	ldd	r19, Z+9	; 0x09
    1d48:	37 83       	std	Z+7, r19	; 0x07
    1d4a:	26 83       	std	Z+6, r18	; 0x06
					}
					
					request_queue[i][REQUEST_QUEUE_PACKETS] = SLOT_UNUSED;
    1d4c:	2f ef       	ldi	r18, 0xFF	; 255
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	31 87       	std	Z+9, r19	; 0x09
    1d52:	20 87       	std	Z+8, r18	; 0x08
					
					// delete request queue completely (if no requests are in the queue)
					if (request_queue[i][1] == SLOT_UNUSED)
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	99 f4       	brne	.+38     	; 0x1d7e <find_request_to_repeat+0x18a>
					{
						request_queue[i][0] = SLOT_UNUSED;
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <find_request_to_repeat+0x18a>
					}
				}
				else
				{
					request_buffer[slot].timeout = (request_buffer[slot].retry_count - 1) * REQUEST_ADDITIONAL_TIMEOUT_S + REQUEST_INITIAL_TIMEOUT_S;
    1d62:	f7 01       	movw	r30, r14
    1d64:	ee 0f       	add	r30, r30
    1d66:	ff 1f       	adc	r31, r31
    1d68:	e2 95       	swap	r30
    1d6a:	f2 95       	swap	r31
    1d6c:	f0 7f       	andi	r31, 0xF0	; 240
    1d6e:	fe 27       	eor	r31, r30
    1d70:	e0 7f       	andi	r30, 0xF0	; 240
    1d72:	fe 27       	eor	r31, r30
    1d74:	ec 5d       	subi	r30, 0xDC	; 220
    1d76:	fe 4f       	sbci	r31, 0xFE	; 254
    1d78:	88 0f       	add	r24, r24
    1d7a:	8d 5f       	subi	r24, 0xFD	; 253
    1d7c:	86 8f       	std	Z+30, r24	; 0x1e
    1d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d80:	fc 81       	ldd	r31, Y+4	; 0x04
    1d82:	3a 96       	adiw	r30, 0x0a	; 10
    1d84:	fc 83       	std	Y+4, r31	; 0x04
    1d86:	eb 83       	std	Y+3, r30	; 0x03
{
	uint8_t i;
	uint8_t slot;
	request_t * res = 0;

	for (i = 0; i < REQUEST_QUEUE_RECEIVERS; i++)
    1d88:	ec 15       	cp	r30, r12
    1d8a:	fd 05       	cpc	r31, r13
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <find_request_to_repeat+0x19c>
    1d8e:	5c cf       	rjmp	.-328    	; 0x1c48 <find_request_to_repeat+0x54>

		//UART_PUTS("\r\n");
	}
	
	return res;
}
    1d90:	c1 01       	movw	r24, r2
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	7f 90       	pop	r7
    1db4:	6f 90       	pop	r6
    1db6:	5f 90       	pop	r5
    1db8:	4f 90       	pop	r4
    1dba:	3f 90       	pop	r3
    1dbc:	2f 90       	pop	r2
    1dbe:	08 95       	ret

00001dc0 <remove_request>:

// Assume a request as acknowledged and delete it from the request_buffer and request_queue.
void remove_request(uint16_t sender_id, uint16_t request_sender_id, uint32_t packet_counter)
{
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
	if (request_sender_id != 0) // if acknowledge is not meant for the base station (which has device id 0)
    1dc8:	67 2b       	or	r22, r23
    1dca:	41 f4       	brne	.+16     	; 0x1ddc <remove_request+0x1c>
	{
		uint8_t rq_slot;
		
		for (rq_slot = 0; rq_slot < REQUEST_QUEUE_RECEIVERS; rq_slot++)
		{
			if (request_queue[rq_slot][0] == sender_id)
    1dcc:	60 91 24 02 	lds	r22, 0x0224
    1dd0:	70 91 25 02 	lds	r23, 0x0225
    1dd4:	68 17       	cp	r22, r24
    1dd6:	79 07       	cpc	r23, r25
    1dd8:	31 f4       	brne	.+12     	; 0x1de6 <remove_request+0x26>
    1dda:	24 c0       	rjmp	.+72     	; 0x1e24 <remove_request+0x64>
// Assume a request as acknowledged and delete it from the request_buffer and request_queue.
void remove_request(uint16_t sender_id, uint16_t request_sender_id, uint32_t packet_counter)
{
	if (request_sender_id != 0) // if acknowledge is not meant for the base station (which has device id 0)
	{			
		UART_PUTS("Ignoring ack (request not from this device).\r\n");
    1ddc:	8d e5       	ldi	r24, 0x5D	; 93
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
    1de4:	20 c1       	rjmp	.+576    	; 0x2026 <remove_request+0x266>
	{
		uint8_t rq_slot;
		
		for (rq_slot = 0; rq_slot < REQUEST_QUEUE_RECEIVERS; rq_slot++)
		{
			if (request_queue[rq_slot][0] == sender_id)
    1de6:	60 91 2e 02 	lds	r22, 0x022E
    1dea:	70 91 2f 02 	lds	r23, 0x022F
    1dee:	68 17       	cp	r22, r24
    1df0:	79 07       	cpc	r23, r25
    1df2:	91 f0       	breq	.+36     	; 0x1e18 <remove_request+0x58>
    1df4:	60 91 38 02 	lds	r22, 0x0238
    1df8:	70 91 39 02 	lds	r23, 0x0239
    1dfc:	68 17       	cp	r22, r24
    1dfe:	79 07       	cpc	r23, r25
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <remove_request+0x5e>
    1e02:	60 91 42 02 	lds	r22, 0x0242
    1e06:	70 91 43 02 	lds	r23, 0x0243
    1e0a:	68 17       	cp	r22, r24
    1e0c:	79 07       	cpc	r23, r25
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <remove_request+0x52>
    1e10:	06 c1       	rjmp	.+524    	; 0x201e <remove_request+0x25e>
    1e12:	03 e0       	ldi	r16, 0x03	; 3
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	08 c0       	rjmp	.+16     	; 0x1e28 <remove_request+0x68>
    1e18:	01 e0       	ldi	r16, 0x01	; 1
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <remove_request+0x68>
    1e1e:	02 e0       	ldi	r16, 0x02	; 2
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <remove_request+0x68>
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	10 e0       	ldi	r17, 0x00	; 0
			{
				// Because we use a fifo queue, the first buffered element has to be the one that is acknowledged.
				// We don't need to check the others.
				uint8_t rb_slot = request_queue[rq_slot][1];
    1e28:	80 2f       	mov	r24, r16
    1e2a:	91 2f       	mov	r25, r17
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	fc 01       	movw	r30, r24
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	8e 0f       	add	r24, r30
    1e3c:	9f 1f       	adc	r25, r31
    1e3e:	fc 01       	movw	r30, r24
    1e40:	ec 5d       	subi	r30, 0xDC	; 220
    1e42:	fd 4f       	sbci	r31, 0xFD	; 253
    1e44:	c2 81       	ldd	r28, Z+2	; 0x02
    1e46:	d3 81       	ldd	r29, Z+3	; 0x03
    1e48:	dd 27       	eor	r29, r29
				
				if (request_buffer[rb_slot].packet_counter == packet_counter)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	e2 95       	swap	r30
    1e52:	f2 95       	swap	r31
    1e54:	f0 7f       	andi	r31, 0xF0	; 240
    1e56:	fe 27       	eor	r31, r30
    1e58:	e0 7f       	andi	r30, 0xF0	; 240
    1e5a:	fe 27       	eor	r31, r30
    1e5c:	ec 5d       	subi	r30, 0xDC	; 220
    1e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	a4 81       	ldd	r26, Z+4	; 0x04
    1e66:	b5 81       	ldd	r27, Z+5	; 0x05
    1e68:	82 17       	cp	r24, r18
    1e6a:	93 07       	cpc	r25, r19
    1e6c:	a4 07       	cpc	r26, r20
    1e6e:	b5 07       	cpc	r27, r21
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <remove_request+0xb4>
    1e72:	d0 c0       	rjmp	.+416    	; 0x2014 <remove_request+0x254>
				{
					uint8_t i;
					
					UART_PUTF("Removing request from request buffer slot %u.\r\n", rb_slot);
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	8d e2       	ldi	r24, 0x2D	; 45
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
    1e80:	88 eb       	ldi	r24, 0xB8	; 184
    1e82:	93 e0       	ldi	r25, 0x03	; 3
    1e84:	9f 93       	push	r25
    1e86:	8f 93       	push	r24
    1e88:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1e8c:	88 eb       	ldi	r24, 0xB8	; 184
    1e8e:	93 e0       	ldi	r25, 0x03	; 3
    1e90:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
					
					// remove from request buffer
					request_buffer[rb_slot].message_type = MESSAGETYPE_UNUSED;
    1e94:	cc 0f       	add	r28, r28
    1e96:	dd 1f       	adc	r29, r29
    1e98:	c2 95       	swap	r28
    1e9a:	d2 95       	swap	r29
    1e9c:	d0 7f       	andi	r29, 0xF0	; 240
    1e9e:	dc 27       	eor	r29, r28
    1ea0:	c0 7f       	andi	r28, 0xF0	; 240
    1ea2:	dc 27       	eor	r29, r28
    1ea4:	cc 5d       	subi	r28, 0xDC	; 220
    1ea6:	de 4f       	sbci	r29, 0xFE	; 254
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	88 83       	st	Y, r24
					
					// remove from request queue
					for (i = 1; i < REQUEST_QUEUE_PACKETS; i++)
					{
						request_queue[rq_slot][i] = request_queue[rq_slot][i + 1];
    1eac:	80 2f       	mov	r24, r16
    1eae:	91 2f       	mov	r25, r17
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	8e 0f       	add	r24, r30
    1ec0:	9f 1f       	adc	r25, r31
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	ec 5d       	subi	r30, 0xDC	; 220
    1ec6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec8:	24 81       	ldd	r18, Z+4	; 0x04
    1eca:	35 81       	ldd	r19, Z+5	; 0x05
    1ecc:	80 2f       	mov	r24, r16
    1ece:	91 2f       	mov	r25, r17
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	8e 0f       	add	r24, r30
    1ee0:	9f 1f       	adc	r25, r31
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	ec 5d       	subi	r30, 0xDC	; 220
    1ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee8:	33 83       	std	Z+3, r19	; 0x03
    1eea:	22 83       	std	Z+2, r18	; 0x02
    1eec:	80 2f       	mov	r24, r16
    1eee:	91 2f       	mov	r25, r17
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	ee 0f       	add	r30, r30
    1ef8:	ff 1f       	adc	r31, r31
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	8e 0f       	add	r24, r30
    1f00:	9f 1f       	adc	r25, r31
    1f02:	fc 01       	movw	r30, r24
    1f04:	ec 5d       	subi	r30, 0xDC	; 220
    1f06:	fd 4f       	sbci	r31, 0xFD	; 253
    1f08:	26 81       	ldd	r18, Z+6	; 0x06
    1f0a:	37 81       	ldd	r19, Z+7	; 0x07
    1f0c:	80 2f       	mov	r24, r16
    1f0e:	91 2f       	mov	r25, r17
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	fc 01       	movw	r30, r24
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	8e 0f       	add	r24, r30
    1f20:	9f 1f       	adc	r25, r31
    1f22:	fc 01       	movw	r30, r24
    1f24:	ec 5d       	subi	r30, 0xDC	; 220
    1f26:	fd 4f       	sbci	r31, 0xFD	; 253
    1f28:	35 83       	std	Z+5, r19	; 0x05
    1f2a:	24 83       	std	Z+4, r18	; 0x04
    1f2c:	80 2f       	mov	r24, r16
    1f2e:	91 2f       	mov	r25, r17
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	fc 01       	movw	r30, r24
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	8e 0f       	add	r24, r30
    1f40:	9f 1f       	adc	r25, r31
    1f42:	fc 01       	movw	r30, r24
    1f44:	ec 5d       	subi	r30, 0xDC	; 220
    1f46:	fd 4f       	sbci	r31, 0xFD	; 253
    1f48:	20 85       	ldd	r18, Z+8	; 0x08
    1f4a:	31 85       	ldd	r19, Z+9	; 0x09
    1f4c:	80 2f       	mov	r24, r16
    1f4e:	91 2f       	mov	r25, r17
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	fc 01       	movw	r30, r24
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	8e 0f       	add	r24, r30
    1f60:	9f 1f       	adc	r25, r31
    1f62:	fc 01       	movw	r30, r24
    1f64:	ec 5d       	subi	r30, 0xDC	; 220
    1f66:	fd 4f       	sbci	r31, 0xFD	; 253
    1f68:	37 83       	std	Z+7, r19	; 0x07
    1f6a:	26 83       	std	Z+6, r18	; 0x06
					}
					
					request_queue[rq_slot][REQUEST_QUEUE_PACKETS] = SLOT_UNUSED;
    1f6c:	80 2f       	mov	r24, r16
    1f6e:	91 2f       	mov	r25, r17
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	fc 01       	movw	r30, r24
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	8e 0f       	add	r24, r30
    1f80:	9f 1f       	adc	r25, r31
    1f82:	fc 01       	movw	r30, r24
    1f84:	ec 5d       	subi	r30, 0xDC	; 220
    1f86:	fd 4f       	sbci	r31, 0xFD	; 253
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	9f ef       	ldi	r25, 0xFF	; 255
    1f8c:	91 87       	std	Z+9, r25	; 0x09
    1f8e:	80 87       	std	Z+8, r24	; 0x08
					
					// delete request queue entry if no more packets in this queue_request
					if (request_queue[rq_slot][1] == SLOT_UNUSED)
    1f90:	80 2f       	mov	r24, r16
    1f92:	91 2f       	mov	r25, r17
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	fc 01       	movw	r30, r24
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	8e 0f       	add	r24, r30
    1fa4:	9f 1f       	adc	r25, r31
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ec 5d       	subi	r30, 0xDC	; 220
    1faa:	fd 4f       	sbci	r31, 0xFD	; 253
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	41 f5       	brne	.+80     	; 0x2010 <remove_request+0x250>
					{
						UART_PUTF("Request queue %u is now empty.\r\n", rq_slot);
    1fc0:	1f 93       	push	r17
    1fc2:	0f 93       	push	r16
    1fc4:	8c e0       	ldi	r24, 0x0C	; 12
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	9f 93       	push	r25
    1fca:	8f 93       	push	r24
    1fcc:	88 eb       	ldi	r24, 0xB8	; 184
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	9f 93       	push	r25
    1fd2:	8f 93       	push	r24
    1fd4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    1fd8:	88 eb       	ldi	r24, 0xB8	; 184
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
						request_queue[rq_slot][0] = SLOT_UNUSED;
    1fe0:	80 2f       	mov	r24, r16
    1fe2:	91 2f       	mov	r25, r17
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	fc 01       	movw	r30, r24
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	8e 0f       	add	r24, r30
    1ff4:	9f 1f       	adc	r25, r31
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	ec 5d       	subi	r30, 0xDC	; 220
    1ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	9f ef       	ldi	r25, 0xFF	; 255
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
					}
					
					print_request_queue();
    2010:	a0 dc       	rcall	.-1728   	; 0x1952 <print_request_queue>
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <remove_request+0x266>
				}
				else
				{
					UART_PUTS("Warning: SenderID from ack found in queue, but PacketCounter does not match.\r\n");
    2014:	8d eb       	ldi	r24, 0xBD	; 189
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <remove_request+0x266>
				return;
			}
		}
		
		// After the last retry, a packet is immediately removed from the queue, and therefore not found if it is acknowledged.
		UART_PUTS("Warning: Acknowledged request not found in queue (could have been the last retry).\r\n");
    201e:	88 e6       	ldi	r24, 0x68	; 104
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 66 1d 	call	0x3acc	; 0x3acc <uart_putstr_P>
	}
}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <rfm12_data>:

//non-inlined version of rfm12_data
//warning: without the attribute, gcc will inline this even if -Os is set
void __attribute__ ((noinline)) rfm12_data(uint16_t d)
{
	SS_ASSERT();
    2030:	28 98       	cbi	0x05, 0	; 5
	#if !(RFM12_SPI_SOFTWARE)
	SPDR = d>>8;
    2032:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));
    2034:	0d b4       	in	r0, 0x2d	; 45
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <rfm12_data+0x4>

	SPDR = d & 0xff;
    203a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    203c:	0d b4       	in	r0, 0x2d	; 45
    203e:	07 fe       	sbrs	r0, 7
    2040:	fd cf       	rjmp	.-6      	; 0x203c <rfm12_data+0xc>
	
	#else
	spi_data(d >> 8   );
	spi_data(d &  0xff);
	#endif
	SS_RELEASE();
    2042:	28 9a       	sbi	0x05, 0	; 5
    2044:	08 95       	ret

00002046 <rfm12_read>:
//non-inlined version of rfm12_read
//warning: without the attribute, gcc will inline this even if -Os is set
uint16_t __attribute__ ((noinline)) rfm12_read(uint16_t c)
{
	uint16_t retval;
	SS_ASSERT();
    2046:	28 98       	cbi	0x05, 0	; 5
	
	#if !(RFM12_SPI_SOFTWARE)
	SPDR = c>>8;
    2048:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));
    204a:	0d b4       	in	r0, 0x2d	; 45
    204c:	07 fe       	sbrs	r0, 7
    204e:	fd cf       	rjmp	.-6      	; 0x204a <rfm12_read+0x4>
	retval = SPDR<<8;
    2050:	2e b5       	in	r18, 0x2e	; 46
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	32 2f       	mov	r19, r18
    2056:	22 27       	eor	r18, r18
	SPDR = c & 0xff;
    2058:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    205a:	0d b4       	in	r0, 0x2d	; 45
    205c:	07 fe       	sbrs	r0, 7
    205e:	fd cf       	rjmp	.-6      	; 0x205a <rfm12_read+0x14>
	retval |= SPDR;
    2060:	8e b5       	in	r24, 0x2e	; 46
	#else
	retval =  spi_data(c >> 8   );
	retval <<= 8;
	retval |= spi_data(c &  0xff);
	#endif
	SS_RELEASE();
    2062:	28 9a       	sbi	0x05, 0	; 5
	return retval;
}
    2064:	a9 01       	movw	r20, r18
    2066:	48 2b       	or	r20, r24
    2068:	ca 01       	movw	r24, r20
    206a:	08 95       	ret

0000206c <rfm12_read_int_flags_inline>:
/* @description reads the upper 8 bits of the status
 * register (the interrupt flags)
 */
uint8_t rfm12_read_int_flags_inline(void)
{
	SS_ASSERT();
    206c:	28 98       	cbi	0x05, 0	; 5
	#if !(RFM12_SPI_SOFTWARE)
	SPDR = 0;
    206e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    2070:	0d b4       	in	r0, 0x2d	; 45
    2072:	07 fe       	sbrs	r0, 7
    2074:	fd cf       	rjmp	.-6      	; 0x2070 <rfm12_read_int_flags_inline+0x4>
	SS_RELEASE();
    2076:	28 9a       	sbi	0x05, 0	; 5
	return SPDR;
    2078:	8e b5       	in	r24, 0x2e	; 46
		PORT_SCK &= ~(1<<BIT_SCK);
	}
	SS_RELEASE();
	return d;
	#endif
}
    207a:	08 95       	ret

0000207c <rfm12_data_inline>:

/* @description inline version of rfm12_data for use in interrupt
 */
void rfm12_data_inline(uint8_t cmd, uint8_t d)
{
	SS_ASSERT();
    207c:	28 98       	cbi	0x05, 0	; 5
	#if !(RFM12_SPI_SOFTWARE)
	SPDR = cmd;
    207e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    2080:	0d b4       	in	r0, 0x2d	; 45
    2082:	07 fe       	sbrs	r0, 7
    2084:	fd cf       	rjmp	.-6      	; 0x2080 <rfm12_data_inline+0x4>

	SPDR = d;
    2086:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
    2088:	0d b4       	in	r0, 0x2d	; 45
    208a:	07 fe       	sbrs	r0, 7
    208c:	fd cf       	rjmp	.-6      	; 0x2088 <rfm12_data_inline+0xc>
	
	#else
	spi_data( cmd );
	spi_data( d   );
	#endif
	SS_RELEASE();
    208e:	28 9a       	sbi	0x05, 0	; 5
    2090:	08 95       	ret

00002092 <rfm12_read_fifo_inline>:

/* @description inline function for reading the fifo
 */
uint8_t rfm12_read_fifo_inline(void)
{
	SS_ASSERT();
    2092:	28 98       	cbi	0x05, 0	; 5

	#if !(RFM12_SPI_SOFTWARE)
	SPDR =  ( RFM12_CMD_READ >> 8 );
    2094:	80 eb       	ldi	r24, 0xB0	; 176
    2096:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    2098:	0d b4       	in	r0, 0x2d	; 45
    209a:	07 fe       	sbrs	r0, 7
    209c:	fd cf       	rjmp	.-6      	; 0x2098 <rfm12_read_fifo_inline+0x6>

	SPDR = 0;
    209e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    20a0:	0d b4       	in	r0, 0x2d	; 45
    20a2:	07 fe       	sbrs	r0, 7
    20a4:	fd cf       	rjmp	.-6      	; 0x20a0 <rfm12_read_fifo_inline+0xe>

	SS_RELEASE();
    20a6:	28 9a       	sbi	0x05, 0	; 5
	return SPDR;
    20a8:	8e b5       	in	r24, 0x2e	; 46
	retval = spi_data( 0   );

	SS_RELEASE();
	return retval;
	#endif
}
    20aa:	08 95       	ret

000020ac <spi_init>:

void spi_init(void)
{
	DDR_MOSI   |= (_BV(BIT_MOSI));
    20ac:	23 9a       	sbi	0x04, 3	; 4
	DDR_SCK    |= (_BV(BIT_SCK));
    20ae:	25 9a       	sbi	0x04, 5	; 4
	DDR_SPI_SS |= (_BV(BIT_SPI_SS));
    20b0:	22 9a       	sbi	0x04, 2	; 4
	DDR_MISO   &= ~(_BV(BIT_MISO));
    20b2:	24 98       	cbi	0x04, 4	; 4

	#if !(RFM12_SPI_SOFTWARE)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPI Master, clk/16
    20b4:	81 e5       	ldi	r24, 0x51	; 81
    20b6:	8c bd       	out	0x2c, r24	; 44
    20b8:	08 95       	ret

000020ba <__vector_1>:
#else
// UF: ISR_NOBLOCK wegnehmen, damit WakeUp-Interrupt auf jeden Fall erkannt wird
// (Empfehlung s. RFM12lib Anleitung).
ISR(RFM12_INT_VECT) //, ISR_NOBLOCK)
#endif
{
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	2f 93       	push	r18
    20c6:	3f 93       	push	r19
    20c8:	4f 93       	push	r20
    20ca:	5f 93       	push	r21
    20cc:	6f 93       	push	r22
    20ce:	7f 93       	push	r23
    20d0:	8f 93       	push	r24
    20d2:	9f 93       	push	r25
    20d4:	af 93       	push	r26
    20d6:	bf 93       	push	r27
    20d8:	ef 93       	push	r30
    20da:	ff 93       	push	r31
	RFM12_INT_OFF();
    20dc:	e8 98       	cbi	0x1d, 0	; 29
		static uint8_t checksum; //static local variables produce smaller code size than globals
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	//first we read the first byte of the status register
	//to get the interrupt flags
	status = rfm12_read_int_flags_inline();
    20de:	c6 df       	rcall	.-116    	; 0x206c <rfm12_read_int_flags_inline>
		rfm12_data(ctrl.pwrmgt_shadow);
	}
	#endif /* RFM12_USE_WAKEUP_TIMER */
	
	//check if the fifo interrupt occurred
	if(!(status & (RFM12_STATUS_FFIT>>8)))
    20e0:	88 23       	and	r24, r24
    20e2:	0c f0       	brlt	.+2      	; 0x20e6 <__vector_1+0x2c>
    20e4:	7e c0       	rjmp	.+252    	; 0x21e2 <__vector_1+0x128>
		goto END;
	
	//see what we have to do (start rx, rx or tx)
	switch(ctrl.rfm12_state)
    20e6:	80 91 94 02 	lds	r24, 0x0294
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	d9 f0       	breq	.+54     	; 0x2124 <__vector_1+0x6a>
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__vector_1+0x3e>
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__vector_1+0x3c>
    20f4:	55 c0       	rjmp	.+170    	; 0x21a0 <__vector_1+0xe6>
    20f6:	6d c0       	rjmp	.+218    	; 0x21d2 <__vector_1+0x118>
	{			
		case STATE_RX_IDLE:
			//if receive mode is not disabled (default)
			#if !(RFM12_TRANSMIT_ONLY)
				//init the bytecounter - remember, we will read the length byte, so this must be 1
				ctrl.bytecount = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	80 93 97 02 	sts	0x0297, r24

				//read the length byte,  and write it to the checksum
				//remember, the first byte is the length byte			
				checksum = rfm12_read_fifo_inline();
    20fe:	c9 df       	rcall	.-110    	; 0x2092 <rfm12_read_fifo_inline>
    2100:	80 93 16 01 	sts	0x0116, r24
				
				//add the packet overhead and store it into a working variable
				ctrl.num_bytes = checksum + PACKET_OVERHEAD;
    2104:	93 e0       	ldi	r25, 0x03	; 3
    2106:	98 0f       	add	r25, r24
    2108:	90 93 96 02 	sts	0x0296, r25
					uart_putc(checksum);
				#endif
				
				//see whether our buffer is free
				//FIXME: put this into global statekeeping struct, the free state can be set by the function which pulls the packet, i guess
				if(ctrl.rf_buffer_in->status == STATUS_FREE)
    210c:	e0 91 98 02 	lds	r30, 0x0298
    2110:	f0 91 99 02 	lds	r31, 0x0299
    2114:	90 81       	ld	r25, Z
    2116:	91 11       	cpse	r25, r1
    2118:	5c c0       	rjmp	.+184    	; 0x21d2 <__vector_1+0x118>
				{
					//the current receive buffer is empty, so we start receiving
					ctrl.rfm12_state = STATE_RX_ACTIVE;
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	90 93 94 02 	sts	0x0294, r25
				
					//store the received length into the packet buffer
					//FIXME:  why the hell do we need this?!
					//in principle, the length is stored alongside with the buffer.. the only problem is, that the buffer might be cleared during reception
					ctrl.rf_buffer_in->len = checksum;
    2120:	81 83       	std	Z+1, r24	; 0x01
					
					//end the interrupt without resetting the fifo
					goto END;
    2122:	5f c0       	rjmp	.+190    	; 0x21e2 <__vector_1+0x128>
			
		case STATE_RX_ACTIVE:
			//if receive mode is not disabled (default)
			#if !(RFM12_TRANSMIT_ONLY)
				//check if transmission is complete
				if(ctrl.bytecount < ctrl.num_bytes)
    2124:	90 91 97 02 	lds	r25, 0x0297
    2128:	80 91 96 02 	lds	r24, 0x0296
    212c:	98 17       	cp	r25, r24
    212e:	f8 f4       	brcc	.+62     	; 0x216e <__vector_1+0xb4>
				{
					uint8_t data;
					
					//read a byte
					data = rfm12_read_fifo_inline();
    2130:	b0 df       	rcall	.-160    	; 0x2092 <rfm12_read_fifo_inline>
						UART_PUTF("R %u\r\n", ctrl.bytecount);
					#endif
					
					//xor the remaining bytes onto the checksum
					//note: only the header will be effectively checked
					checksum ^= data;
    2132:	20 91 16 01 	lds	r18, 0x0116
    2136:	28 27       	eor	r18, r24
    2138:	20 93 16 01 	sts	0x0116, r18
					
					//put next byte into buffer, if there is enough space
					if(ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3))
    213c:	90 91 97 02 	lds	r25, 0x0297
    2140:	95 33       	cpi	r25, 0x35	; 53
    2142:	38 f4       	brcc	.+14     	; 0x2152 <__vector_1+0x98>
					{
						//hackhack: begin writing to struct at offsetof len
						(& ctrl.rf_buffer_in->len)[ctrl.bytecount] = data;
    2144:	e0 91 98 02 	lds	r30, 0x0298
    2148:	f0 91 99 02 	lds	r31, 0x0299
    214c:	e9 0f       	add	r30, r25
    214e:	f1 1d       	adc	r31, r1
    2150:	81 83       	std	Z+1, r24	; 0x01
					}
					
					//check header against checksum
					if (ctrl.bytecount == 2 && checksum != 0xff)
    2152:	80 91 97 02 	lds	r24, 0x0297
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	11 f4       	brne	.+4      	; 0x215e <__vector_1+0xa4>
    215a:	2f 3f       	cpi	r18, 0xFF	; 255
    215c:	d1 f5       	brne	.+116    	; 0x21d2 <__vector_1+0x118>
						//if the checksum does not match, reset the fifo
						break;
					}

					//increment bytecount
					ctrl.bytecount++;
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 93 97 02 	sts	0x0297, r24
					
					//end the interrupt without resetting the fifo
					// UF: Only go to end, if byte count is not reached after the current reception
					if (ctrl.bytecount < ctrl.num_bytes)
    2164:	90 91 96 02 	lds	r25, 0x0296
    2168:	89 17       	cp	r24, r25
    216a:	08 f4       	brcc	.+2      	; 0x216e <__vector_1+0xb4>
    216c:	3a c0       	rjmp	.+116    	; 0x21e2 <__vector_1+0x128>
				#if RFM12_UART_DEBUG >= 2
					uart_putc('D');
				#endif
				
				//indicate that the buffer is ready to be used
				ctrl.rf_buffer_in->status = STATUS_COMPLETE;
    216e:	e0 91 98 02 	lds	r30, 0x0298
    2172:	f0 91 99 02 	lds	r31, 0x0299
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	80 83       	st	Z, r24
				
				//switch to other buffer
				ctrl.buffer_in_num = (ctrl.buffer_in_num + 1) % 2;
    217a:	80 91 9c 02 	lds	r24, 0x029C
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	81 70       	andi	r24, 0x01	; 1
    2184:	90 78       	andi	r25, 0x80	; 128
    2186:	80 93 9c 02 	sts	0x029C, r24
				ctrl.rf_buffer_in = &rf_rx_buffers[ctrl.buffer_in_num];
    218a:	26 e3       	ldi	r18, 0x36	; 54
    218c:	82 9f       	mul	r24, r18
    218e:	c0 01       	movw	r24, r0
    2190:	11 24       	eor	r1, r1
    2192:	82 56       	subi	r24, 0x62	; 98
    2194:	9d 4f       	sbci	r25, 0xFD	; 253
    2196:	90 93 99 02 	sts	0x0299, r25
    219a:	80 93 98 02 	sts	0x0298, r24
			#endif /* !(RFM12_TRANSMIT_ONLY) */
			break;
    219e:	19 c0       	rjmp	.+50     	; 0x21d2 <__vector_1+0x118>
			//debug
			#if RFM12_UART_DEBUG >= 2
				uart_putc('T');
			#endif

			if(ctrl.bytecount < ctrl.num_bytes)
    21a0:	e0 91 97 02 	lds	r30, 0x0297
    21a4:	80 91 96 02 	lds	r24, 0x0296
    21a8:	e8 17       	cp	r30, r24
    21aa:	58 f4       	brcc	.+22     	; 0x21c2 <__vector_1+0x108>
			{
				//load the next byte from our buffer struct.
				rfm12_data_inline( (RFM12_CMD_TX>>8), rf_tx_buffer.sync[ctrl.bytecount++]);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	8e 0f       	add	r24, r30
    21b0:	80 93 97 02 	sts	0x0297, r24
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	e6 5f       	subi	r30, 0xF6	; 246
    21b8:	fc 4f       	sbci	r31, 0xFC	; 252
    21ba:	60 81       	ld	r22, Z
    21bc:	88 eb       	ldi	r24, 0xB8	; 184
    21be:	5e df       	rcall	.-324    	; 0x207c <rfm12_data_inline>
							
				//end the interrupt without resetting the fifo
				goto END;
    21c0:	10 c0       	rjmp	.+32     	; 0x21e2 <__vector_1+0x128>
			
			/* if we're here, we're finished transmitting the bytes */
			/* the fifo will be reset at the end of the function */
			
			//flag the buffer as free again
			ctrl.txstate = STATUS_FREE;
    21c2:	10 92 95 02 	sts	0x0295, r1
				
			//turn off the transmitter and enable receiver
			//the receiver is not enabled in transmit only mode
			//if the wakeup timer is used, this will re-enable the wakeup timer bit
			//the magic is done via defines
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_RECEIVE);
    21c6:	81 e8       	ldi	r24, 0x81	; 129
    21c8:	92 e8       	ldi	r25, 0x82	; 130
    21ca:	32 df       	rcall	.-412    	; 0x2030 <rfm12_data>
			
			//load a dummy byte to clear int status
			rfm12_data_inline( (RFM12_CMD_TX>>8), 0xaa);
    21cc:	6a ea       	ldi	r22, 0xAA	; 170
    21ce:	88 eb       	ldi	r24, 0xB8	; 184
    21d0:	55 df       	rcall	.-342    	; 0x207c <rfm12_data_inline>
			break;			
	}
	
	//set the state machine to idle
	ctrl.rfm12_state = STATE_RX_IDLE;
    21d2:	10 92 94 02 	sts	0x0294, r1
	
	//reset the receiver fifo, if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		rfm12_data_inline(RFM12_CMD_FIFORESET>>8, CLEAR_FIFO_INLINE);
    21d6:	61 e8       	ldi	r22, 0x81	; 129
    21d8:	8a ec       	ldi	r24, 0xCA	; 202
    21da:	50 df       	rcall	.-352    	; 0x207c <rfm12_data_inline>
		rfm12_data_inline(RFM12_CMD_FIFORESET>>8, ACCEPT_DATA_INLINE);
    21dc:	63 e8       	ldi	r22, 0x83	; 131
    21de:	8a ec       	ldi	r24, 0xCA	; 202
    21e0:	4d df       	rcall	.-358    	; 0x207c <rfm12_data_inline>
	#endif /* !(RFM12_TRANSMIT_ONLY) */	
		
	END:
	//turn the int back on
	RFM12_INT_ON();
    21e2:	e8 9a       	sbi	0x1d, 0	; 29
}
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <rfm12_tick>:
			oldstate = state;
		}
	#endif
	
	//don't disturb RFM12 if transmitting or receiving
	if(ctrl.rfm12_state != STATE_RX_IDLE)
    2206:	80 91 94 02 	lds	r24, 0x0294
    220a:	81 11       	cpse	r24, r1
    220c:	31 c0       	rjmp	.+98     	; 0x2270 <rfm12_tick+0x6a>
	//collision detection is enabled by default
	#if !(RFM12_NOCOLLISIONDETECTION)
		//disable the interrupt (as we're working directly with the transceiver now)
		//hint: we could be losing an interrupt here 
		//solutions: check status flag if int is set, launch int and exit ... OR implement packet retransmission
		RFM12_INT_OFF();	
    220e:	e8 98       	cbi	0x1d, 0	; 29
		status = rfm12_read(RFM12_CMD_STATUS);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	18 df       	rcall	.-464    	; 0x2046 <rfm12_read>
		RFM12_INT_ON();
    2216:	e8 9a       	sbi	0x1d, 0	; 29

		//check if we see a carrier
		if(status & RFM12_STATUS_RSSI)
    2218:	90 ff       	sbrs	r25, 0
    221a:	04 c0       	rjmp	.+8      	; 0x2224 <rfm12_tick+0x1e>
		{
			//yes: reset free counter and return
			channel_free_count = CHANNEL_FREE_TIME;
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	80 93 00 01 	sts	0x0100, r24
			return;
    2222:	08 95       	ret
		}
		
		//no: decrement counter
		channel_free_count--;
    2224:	80 91 00 01 	lds	r24, 0x0100
    2228:	81 50       	subi	r24, 0x01	; 1
		
		//is the channel free long enough ?
		if(channel_free_count != 0)
    222a:	19 f0       	breq	.+6      	; 0x2232 <rfm12_tick+0x2c>
			channel_free_count = CHANNEL_FREE_TIME;
			return;
		}
		
		//no: decrement counter
		channel_free_count--;
    222c:	80 93 00 01 	sts	0x0100, r24
    2230:	08 95       	ret
		{
			return;
		}
		
		//reset the channel free count for the next decrement (during the next call..)
		channel_free_count = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 00 01 	sts	0x0100, r24
	#endif	
	
	//do we have something to transmit?
	if(ctrl.txstate == STATUS_OCCUPIED)
    2238:	80 91 95 02 	lds	r24, 0x0295
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	c1 f4       	brne	.+48     	; 0x2270 <rfm12_tick+0x6a>
		//hint: we could be losing an interrupt here, too
		//we could also disturb an ongoing reception,
		//if it just started some cpu cycles ago 
		//(as the check for this case is some lines (cpu cycles) above)
		//anyhow, we MUST transmit at some point...
		RFM12_INT_OFF();
    2240:	e8 98       	cbi	0x1d, 0	; 29
		
		//disable receiver - if you don't do this, tx packets will get lost
		//as the fifo seems to be in use by the receiver
		rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	92 e8       	ldi	r25, 0x82	; 130
    2246:	f4 de       	rcall	.-536    	; 0x2030 <rfm12_data>
		
		//calculate number of bytes to be sent by ISR
		//2 sync bytes + len byte + type byte + checksum + message length + 1 dummy byte
		ctrl.num_bytes = rf_tx_buffer.len + 6;
    2248:	80 91 0c 03 	lds	r24, 0x030C
    224c:	8a 5f       	subi	r24, 0xFA	; 250
    224e:	80 93 96 02 	sts	0x0296, r24
		
		//reset byte sent counter
		ctrl.bytecount = 0;
    2252:	10 92 97 02 	sts	0x0297, r1
		
		//set mode for interrupt handler
		ctrl.rfm12_state = STATE_TX;
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	80 93 94 02 	sts	0x0294, r24
		#endif /* RFM12_USE_WAKEUP_TIMER */
		
		//fill 2byte 0xAA preamble into data register
		//the preamble helps the receivers AFC circuit to lock onto the exact frequency
		//(hint: the tx FIFO [if el is enabled] is two staged, so we can safely write 2 bytes before starting)
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
    225c:	8a ea       	ldi	r24, 0xAA	; 170
    225e:	98 eb       	ldi	r25, 0xB8	; 184
    2260:	e7 de       	rcall	.-562    	; 0x2030 <rfm12_data>
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
    2262:	8a ea       	ldi	r24, 0xAA	; 170
    2264:	98 eb       	ldi	r25, 0xB8	; 184
    2266:	e4 de       	rcall	.-568    	; 0x2030 <rfm12_data>
		
		//set ET in power register to enable transmission (hint: TX starts now)
		rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT | RFM12_PWRMGT_ET);
    2268:	81 e2       	ldi	r24, 0x21	; 33
    226a:	92 e8       	ldi	r25, 0x82	; 130
    226c:	e1 de       	rcall	.-574    	; 0x2030 <rfm12_data>

		//enable the interrupt to continue the transmission
		RFM12_INT_ON();
    226e:	e8 9a       	sbi	0x1d, 0	; 29
    2270:	08 95       	ret

00002272 <rfm12_start_tx>:
uint8_t
#endif
rfm12_start_tx(uint8_t type, uint8_t length)
{
	//exit if the buffer isn't free
	if(ctrl.txstate != STATUS_FREE)
    2272:	90 91 95 02 	lds	r25, 0x0295
    2276:	91 11       	cpse	r25, r1
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <rfm12_start_tx+0x22>
		return TXRETURN(RFM12_TX_OCCUPIED);
	
	//write airlab header to buffer
	rf_tx_buffer.len = length;
    227a:	60 93 0c 03 	sts	0x030C, r22
	rf_tx_buffer.type = type;
    227e:	80 93 0d 03 	sts	0x030D, r24
	rf_tx_buffer.checksum = length ^ type ^ 0xff;
    2282:	86 27       	eor	r24, r22
    2284:	80 95       	com	r24
    2286:	80 93 0e 03 	sts	0x030E, r24
	
	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 95 02 	sts	0x0295, r24
	
	return TXRETURN(RFM12_TX_ENQUEUED);
    2290:	80 e8       	ldi	r24, 0x80	; 128
    2292:	08 95       	ret
#endif
rfm12_start_tx(uint8_t type, uint8_t length)
{
	//exit if the buffer isn't free
	if(ctrl.txstate != STATUS_FREE)
		return TXRETURN(RFM12_TX_OCCUPIED);
    2294:	83 e0       	ldi	r24, 0x03	; 3
	
	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;
	
	return TXRETURN(RFM12_TX_ENQUEUED);
}
    2296:	08 95       	ret

00002298 <rfm12_tx>:
void
#else
uint8_t 
#endif
rfm12_tx(uint8_t len, uint8_t type, uint8_t *data)
{
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	c8 2f       	mov	r28, r24
    229e:	d6 2f       	mov	r29, r22
    22a0:	ba 01       	movw	r22, r20
	#if RFM12_UART_DEBUG
		uart_putstr ("sending packet\r\n");
	#endif
	
	if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);
    22a2:	83 33       	cpi	r24, 0x33	; 51
    22a4:	70 f4       	brcc	.+28     	; 0x22c2 <rfm12_tx+0x2a>

	//exit if the buffer isn't free
	if(ctrl.txstate != STATUS_FREE)
    22a6:	80 91 95 02 	lds	r24, 0x0295
    22aa:	81 11       	cpse	r24, r1
    22ac:	0c c0       	rjmp	.+24     	; 0x22c6 <rfm12_tx+0x2e>
		return TXRETURN(RFM12_TX_OCCUPIED);
	
	memcpy ( rf_tx_buffer.buffer, data, len );
    22ae:	4c 2f       	mov	r20, r28
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	8f e0       	ldi	r24, 0x0F	; 15
    22b4:	93 e0       	ldi	r25, 0x03	; 3
    22b6:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <memcpy>

	#if (!(RFM12_NORETURNS))
	return rfm12_start_tx (type, len);
    22ba:	6c 2f       	mov	r22, r28
    22bc:	8d 2f       	mov	r24, r29
    22be:	d9 df       	rcall	.-78     	; 0x2272 <rfm12_start_tx>
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <rfm12_tx+0x30>
{
	#if RFM12_UART_DEBUG
		uart_putstr ("sending packet\r\n");
	#endif
	
	if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <rfm12_tx+0x30>

	//exit if the buffer isn't free
	if(ctrl.txstate != STATUS_FREE)
		return TXRETURN(RFM12_TX_OCCUPIED);
    22c6:	83 e0       	ldi	r24, 0x03	; 3
	#if (!(RFM12_NORETURNS))
	return rfm12_start_tx (type, len);
	#else
	rfm12_start_tx (type, len);
	#endif
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	08 95       	ret

000022ce <rfm12_rx_clear>:
	*/
	//warning: without the attribute, gcc will inline this even if -Os is set
	void __attribute__((noinline)) rfm12_rx_clear(void)
	{
			//mark the current buffer as empty
			ctrl.rf_buffer_out->status = STATUS_FREE;
    22ce:	e0 91 9a 02 	lds	r30, 0x029A
    22d2:	f0 91 9b 02 	lds	r31, 0x029B
    22d6:	10 82       	st	Z, r1
			
			//switch to the other buffer
			ctrl.buffer_out_num = (ctrl.buffer_out_num + 1 ) % 2 ;
    22d8:	80 91 9d 02 	lds	r24, 0x029D
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	81 70       	andi	r24, 0x01	; 1
    22e2:	90 78       	andi	r25, 0x80	; 128
    22e4:	80 93 9d 02 	sts	0x029D, r24
			ctrl.rf_buffer_out = &rf_rx_buffers[ctrl.buffer_out_num];
    22e8:	26 e3       	ldi	r18, 0x36	; 54
    22ea:	82 9f       	mul	r24, r18
    22ec:	c0 01       	movw	r24, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	82 56       	subi	r24, 0x62	; 98
    22f2:	9d 4f       	sbci	r25, 0xFD	; 253
    22f4:	90 93 9b 02 	sts	0x029B, r25
    22f8:	80 93 9a 02 	sts	0x029A, r24
    22fc:	08 95       	ret

000022fe <rfm12_init>:
* Have a look into rfm12_hw.h for possible settings.
*/
void rfm12_init(void)
{
	//initialize spi
	SS_RELEASE();
    22fe:	28 9a       	sbi	0x05, 0	; 5
	DDR_SS |= (1<<BIT_SS);	
    2300:	20 9a       	sbi	0x04, 0	; 4
	spi_init();
    2302:	d4 de       	rcall	.-600    	; 0x20ac <spi_init>

	//enable internal data register and fifo
	//setup selected band
	rfm12_data(RFM12_CMD_CFG | RFM12_CFG_EL | RFM12_CFG_EF | RFM12_BASEBAND | RFM12_XTAL_12PF);
    2304:	87 ee       	ldi	r24, 0xE7	; 231
    2306:	90 e8       	ldi	r25, 0x80	; 128
    2308:	93 de       	rcall	.-730    	; 0x2030 <rfm12_data>
	
	//set power default state (usually disable clock output)
	//do not write the power register two times in a short time
	//as it seems to need some recovery
	rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	92 e8       	ldi	r25, 0x82	; 130
    230e:	90 de       	rcall	.-736    	; 0x2030 <rfm12_data>

	//set frequency
	rfm12_data(RFM12_CMD_FREQUENCY | RFM12_FREQUENCY_CALC(FREQ) );
    2310:	80 e4       	ldi	r24, 0x40	; 64
    2312:	96 ea       	ldi	r25, 0xA6	; 166
    2314:	8d de       	rcall	.-742    	; 0x2030 <rfm12_data>

	//set data rate
	rfm12_data(RFM12_CMD_DATARATE | DATARATE_VALUE );
    2316:	83 e2       	ldi	r24, 0x23	; 35
    2318:	96 ec       	ldi	r25, 0xC6	; 198
    231a:	8a de       	rcall	.-748    	; 0x2030 <rfm12_data>
	
	//set rx parameters: int-in/vdi-out pin is vdi-out,
	//Bandwith, LNA, RSSI
	rfm12_data(RFM12_CMD_RXCTRL | RFM12_RXCTRL_P16_VDI 
    231c:	8c e2       	ldi	r24, 0x2C	; 44
    231e:	94 e9       	ldi	r25, 0x94	; 148
    2320:	87 de       	rcall	.-754    	; 0x2030 <rfm12_data>
			| RFM12_RXCTRL_VDI_FAST | RFM12_RXCTRL_BW_400 | RFM12_RXCTRL_LNA_6 
			| RFM12_RXCTRL_RSSI_79 );	
	
	//automatic clock lock control(AL), digital Filter(!S),
	//Data quality detector value 3, slow clock recovery lock
	rfm12_data(RFM12_CMD_DATAFILTER | RFM12_DATAFILTER_AL | 3);
    2322:	8b ea       	ldi	r24, 0xAB	; 171
    2324:	92 ec       	ldi	r25, 0xC2	; 194
    2326:	84 de       	rcall	.-760    	; 0x2030 <rfm12_data>
	
	//2 Byte Sync Pattern, Start fifo fill when sychron pattern received,
	//disable sensitive reset, Fifo filled interrupt at 8 bits
	rfm12_data(RFM12_CMD_FIFORESET | RFM12_FIFORESET_DR | (8<<4));
    2328:	81 e8       	ldi	r24, 0x81	; 129
    232a:	9a ec       	ldi	r25, 0xCA	; 202
    232c:	81 de       	rcall	.-766    	; 0x2030 <rfm12_data>

	//set AFC to automatic, (+4 or -3)*2.5kHz Limit, fine mode, active and enabled
	rfm12_data(RFM12_CMD_AFC | RFM12_AFC_AUTO_KEEP | RFM12_AFC_LIMIT_4
    232e:	87 ef       	ldi	r24, 0xF7	; 247
    2330:	94 ec       	ldi	r25, 0xC4	; 196
    2332:	7e de       	rcall	.-772    	; 0x2030 <rfm12_data>
				| RFM12_AFC_FI | RFM12_AFC_OE | RFM12_AFC_EN);
	
	//set TX Power to -0dB, frequency shift = +-125kHz
	rfm12_data(RFM12_CMD_TXCONF | RFM12_TXCONF_POWER_0 | RFM12_TXCONF_FS_CALC(125000) );
    2334:	80 e7       	ldi	r24, 0x70	; 112
    2336:	98 e9       	ldi	r25, 0x98	; 152
    2338:	7b de       	rcall	.-778    	; 0x2030 <rfm12_data>
	
	//disable low dutycycle mode
	rfm12_data(RFM12_CMD_DUTYCYCLE);
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	98 ec       	ldi	r25, 0xC8	; 200
    233e:	78 de       	rcall	.-784    	; 0x2030 <rfm12_data>
	
	//disable wakeup timer
	rfm12_data(RFM12_CMD_WAKEUP);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 ee       	ldi	r25, 0xE0	; 224
    2344:	75 de       	rcall	.-790    	; 0x2030 <rfm12_data>

	//store the syncronization pattern to the transmission buffer
	//the sync pattern is used by the receiver to distinguish noise from real transmissions
	//the sync pattern is hardcoded into the receiver
	rf_tx_buffer.sync[0] = SYNC_MSB;
    2346:	8d e2       	ldi	r24, 0x2D	; 45
    2348:	80 93 0a 03 	sts	0x030A, r24
	rf_tx_buffer.sync[1] = SYNC_LSB;
    234c:	84 ed       	ldi	r24, 0xD4	; 212
    234e:	80 93 0b 03 	sts	0x030B, r24
	
	//if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		//init buffer pointers
		ctrl.rf_buffer_out = &rf_rx_buffers[0];
    2352:	8e e9       	ldi	r24, 0x9E	; 158
    2354:	92 e0       	ldi	r25, 0x02	; 2
    2356:	90 93 9b 02 	sts	0x029B, r25
    235a:	80 93 9a 02 	sts	0x029A, r24
		ctrl.rf_buffer_in  = &rf_rx_buffers[0];
    235e:	90 93 99 02 	sts	0x0299, r25
    2362:	80 93 98 02 	sts	0x0298, r24
		ctrl.low_batt = RFM12_BATT_OKAY;
	#endif /* RFM12_LOW_BATT_DETECTOR */
	
	//enable rf receiver chain, if receiving is not disabled (default)
	//the magic is done via defines
	rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_RECEIVE);
    2366:	81 e8       	ldi	r24, 0x81	; 129
    2368:	92 e8       	ldi	r25, 0x82	; 130
    236a:	62 de       	rcall	.-828    	; 0x2030 <rfm12_data>
	#if RFM12_RECEIVE_ASK
		adc_init();
	#endif

	//setup interrupt for falling edge trigger
	RFM12_INT_SETUP();
    236c:	e9 e6       	ldi	r30, 0x69	; 105
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	82 60       	ori	r24, 0x02	; 2
    2374:	80 83       	st	Z, r24
	
	//clear int flag
	rfm12_read(RFM12_CMD_STATUS);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	65 de       	rcall	.-822    	; 0x2046 <rfm12_read>
	RFM12_INT_FLAG |= (1<<RFM12_FLAG_BIT);		
    237c:	e0 9a       	sbi	0x1c, 0	; 28
	
	//init receiver fifo, we now begin receiving.
	rfm12_data(CLEAR_FIFO);
    237e:	81 e8       	ldi	r24, 0x81	; 129
    2380:	9a ec       	ldi	r25, 0xCA	; 202
    2382:	56 de       	rcall	.-852    	; 0x2030 <rfm12_data>
	rfm12_data(ACCEPT_DATA);
    2384:	83 e8       	ldi	r24, 0x83	; 131
    2386:	9a ec       	ldi	r25, 0xCA	; 202
    2388:	53 de       	rcall	.-858    	; 0x2030 <rfm12_data>
	
	//activate the interrupt
	RFM12_INT_ON();	
    238a:	e8 9a       	sbi	0x1d, 0	; 29
    238c:	08 95       	ret

0000238e <pkg_headerext_common_get_receiverid>:

// Get ReceiverID (UIntValue)
// Same function for all MessageTypes!
static uint32_t pkg_headerext_common_get_receiverid(void) __attribute__ ((unused));
static uint32_t pkg_headerext_common_get_receiverid(void)
{
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
  switch (__MESSAGETYPE)
    239e:	80 91 52 02 	lds	r24, 0x0252
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	f1 f0       	breq	.+60     	; 0x23e2 <pkg_headerext_common_get_receiverid+0x54>
    23a6:	b8 f1       	brcs	.+110    	; 0x2416 <pkg_headerext_common_get_receiverid+0x88>
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	09 f0       	breq	.+2      	; 0x23ae <pkg_headerext_common_get_receiverid+0x20>
    23ac:	4e c0       	rjmp	.+156    	; 0x244a <pkg_headerext_common_get_receiverid+0xbc>
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    23ae:	0f 2e       	mov	r0, r31
    23b0:	f3 e5       	ldi	r31, 0x53	; 83
    23b2:	af 2e       	mov	r10, r31
    23b4:	f2 e0       	ldi	r31, 0x02	; 2
    23b6:	bf 2e       	mov	r11, r31
    23b8:	f0 2d       	mov	r31, r0
    23ba:	68 94       	set
    23bc:	cc 24       	eor	r12, r12
    23be:	c5 f8       	bld	r12, 5
    23c0:	d1 2c       	mov	r13, r1
    23c2:	ee 24       	eor	r14, r14
    23c4:	ea 94       	dec	r14
    23c6:	1f e0       	ldi	r17, 0x0F	; 15
    23c8:	f1 2e       	mov	r15, r17
    23ca:	00 e0       	ldi	r16, 0x00	; 0
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	6c e0       	ldi	r22, 0x0C	; 12
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	88 e4       	ldi	r24, 0x48	; 72
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
  {
    case MESSAGETYPE_SETGET:
      return pkg_headerext_setget_get_receiverid();
    23e0:	37 c0       	rjmp	.+110    	; 0x2450 <pkg_headerext_common_get_receiverid+0xc2>
    23e2:	0f 2e       	mov	r0, r31
    23e4:	f3 e5       	ldi	r31, 0x53	; 83
    23e6:	af 2e       	mov	r10, r31
    23e8:	f2 e0       	ldi	r31, 0x02	; 2
    23ea:	bf 2e       	mov	r11, r31
    23ec:	f0 2d       	mov	r31, r0
    23ee:	68 94       	set
    23f0:	cc 24       	eor	r12, r12
    23f2:	c5 f8       	bld	r12, 5
    23f4:	d1 2c       	mov	r13, r1
    23f6:	ee 24       	eor	r14, r14
    23f8:	ea 94       	dec	r14
    23fa:	1f e0       	ldi	r17, 0x0F	; 15
    23fc:	f1 2e       	mov	r15, r17
    23fe:	00 e0       	ldi	r16, 0x00	; 0
    2400:	10 e0       	ldi	r17, 0x00	; 0
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	a9 01       	movw	r20, r18
    2408:	6c e0       	ldi	r22, 0x0C	; 12
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	88 e4       	ldi	r24, 0x48	; 72
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
      break;
    case MESSAGETYPE_SET:
      return pkg_headerext_set_get_receiverid();
    2414:	1d c0       	rjmp	.+58     	; 0x2450 <pkg_headerext_common_get_receiverid+0xc2>
    2416:	0f 2e       	mov	r0, r31
    2418:	f3 e5       	ldi	r31, 0x53	; 83
    241a:	af 2e       	mov	r10, r31
    241c:	f2 e0       	ldi	r31, 0x02	; 2
    241e:	bf 2e       	mov	r11, r31
    2420:	f0 2d       	mov	r31, r0
    2422:	68 94       	set
    2424:	cc 24       	eor	r12, r12
    2426:	c5 f8       	bld	r12, 5
    2428:	d1 2c       	mov	r13, r1
    242a:	ee 24       	eor	r14, r14
    242c:	ea 94       	dec	r14
    242e:	1f e0       	ldi	r17, 0x0F	; 15
    2430:	f1 2e       	mov	r15, r17
    2432:	00 e0       	ldi	r16, 0x00	; 0
    2434:	10 e0       	ldi	r17, 0x00	; 0
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	a9 01       	movw	r20, r18
    243c:	6c e0       	ldi	r22, 0x0C	; 12
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	88 e4       	ldi	r24, 0x48	; 72
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
      break;
    case MESSAGETYPE_GET:
      return pkg_headerext_get_get_receiverid();
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <pkg_headerext_common_get_receiverid+0xc2>
      break;
    default:
      return 0;
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	cb 01       	movw	r24, r22
      break;
  }
}
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	bf 90       	pop	r11
    245e:	af 90       	pop	r10
    2460:	08 95       	ret

00002462 <pkg_headerext_common_set_messagegroupid>:

// Set MessageGroupID (UIntValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_messagegroupid(uint32_t val) __attribute__ ((unused));
static void pkg_headerext_common_set_messagegroupid(uint32_t val)
{
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
  switch (__MESSAGETYPE)
    2466:	20 91 52 02 	lds	r18, 0x0252
    246a:	22 30       	cpi	r18, 0x02	; 2
    246c:	01 f1       	breq	.+64     	; 0x24ae <pkg_headerext_common_set_messagegroupid+0x4c>
    246e:	28 f4       	brcc	.+10     	; 0x247a <pkg_headerext_common_set_messagegroupid+0x18>
    2470:	22 23       	and	r18, r18
    2472:	99 f1       	breq	.+102    	; 0x24da <pkg_headerext_common_set_messagegroupid+0x78>
    2474:	21 30       	cpi	r18, 0x01	; 1
    2476:	31 f1       	breq	.+76     	; 0x24c4 <pkg_headerext_common_set_messagegroupid+0x62>
    2478:	3a c0       	rjmp	.+116    	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
    247a:	28 30       	cpi	r18, 0x08	; 8
    247c:	69 f0       	breq	.+26     	; 0x2498 <pkg_headerext_common_set_messagegroupid+0x36>
    247e:	2a 30       	cpi	r18, 0x0A	; 10
    2480:	b1 f5       	brne	.+108    	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
}

static inline void array_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array)
{
	_eeprom_write_UIntValue(bit, length, val, array);
    2482:	03 e5       	ldi	r16, 0x53	; 83
    2484:	12 e0       	ldi	r17, 0x02	; 2
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	67 e0       	ldi	r22, 0x07	; 7
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	8d e6       	ldi	r24, 0x6D	; 109
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    2496:	2b c0       	rjmp	.+86     	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
    2498:	03 e5       	ldi	r16, 0x53	; 83
    249a:	12 e0       	ldi	r17, 0x02	; 2
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	67 e0       	ldi	r22, 0x07	; 7
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	88 e4       	ldi	r24, 0x48	; 72
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    24ac:	20 c0       	rjmp	.+64     	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
    24ae:	03 e5       	ldi	r16, 0x53	; 83
    24b0:	12 e0       	ldi	r17, 0x02	; 2
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	67 e0       	ldi	r22, 0x07	; 7
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	84 e5       	ldi	r24, 0x54	; 84
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    24c2:	15 c0       	rjmp	.+42     	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
    24c4:	03 e5       	ldi	r16, 0x53	; 83
    24c6:	12 e0       	ldi	r17, 0x02	; 2
    24c8:	9b 01       	movw	r18, r22
    24ca:	ac 01       	movw	r20, r24
    24cc:	67 e0       	ldi	r22, 0x07	; 7
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	84 e5       	ldi	r24, 0x54	; 84
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    24d8:	0a c0       	rjmp	.+20     	; 0x24ee <pkg_headerext_common_set_messagegroupid+0x8c>
    24da:	03 e5       	ldi	r16, 0x53	; 83
    24dc:	12 e0       	ldi	r17, 0x02	; 2
    24de:	9b 01       	movw	r18, r22
    24e0:	ac 01       	movw	r20, r24
    24e2:	67 e0       	ldi	r22, 0x07	; 7
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	84 e5       	ldi	r24, 0x54	; 84
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
      pkg_headerext_get_set_messagegroupid(val);
      break;
    default:
      break;
  }
}
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	08 95       	ret

000024f4 <pkg_headerext_common_set_messageid>:

// Set MessageID (UIntValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_messageid(uint32_t val) __attribute__ ((unused));
static void pkg_headerext_common_set_messageid(uint32_t val)
{
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
  switch (__MESSAGETYPE)
    24f8:	20 91 52 02 	lds	r18, 0x0252
    24fc:	22 30       	cpi	r18, 0x02	; 2
    24fe:	01 f1       	breq	.+64     	; 0x2540 <pkg_headerext_common_set_messageid+0x4c>
    2500:	28 f4       	brcc	.+10     	; 0x250c <pkg_headerext_common_set_messageid+0x18>
    2502:	22 23       	and	r18, r18
    2504:	99 f1       	breq	.+102    	; 0x256c <pkg_headerext_common_set_messageid+0x78>
    2506:	21 30       	cpi	r18, 0x01	; 1
    2508:	31 f1       	breq	.+76     	; 0x2556 <pkg_headerext_common_set_messageid+0x62>
    250a:	3a c0       	rjmp	.+116    	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    250c:	28 30       	cpi	r18, 0x08	; 8
    250e:	69 f0       	breq	.+26     	; 0x252a <pkg_headerext_common_set_messageid+0x36>
    2510:	2a 30       	cpi	r18, 0x0A	; 10
    2512:	b1 f5       	brne	.+108    	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    2514:	03 e5       	ldi	r16, 0x53	; 83
    2516:	12 e0       	ldi	r17, 0x02	; 2
    2518:	9b 01       	movw	r18, r22
    251a:	ac 01       	movw	r20, r24
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	84 e7       	ldi	r24, 0x74	; 116
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    2528:	2b c0       	rjmp	.+86     	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    252a:	03 e5       	ldi	r16, 0x53	; 83
    252c:	12 e0       	ldi	r17, 0x02	; 2
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	64 e0       	ldi	r22, 0x04	; 4
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	8f e4       	ldi	r24, 0x4F	; 79
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    253e:	20 c0       	rjmp	.+64     	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    2540:	03 e5       	ldi	r16, 0x53	; 83
    2542:	12 e0       	ldi	r17, 0x02	; 2
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	64 e0       	ldi	r22, 0x04	; 4
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	8b e5       	ldi	r24, 0x5B	; 91
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    2554:	15 c0       	rjmp	.+42     	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    2556:	03 e5       	ldi	r16, 0x53	; 83
    2558:	12 e0       	ldi	r17, 0x02	; 2
    255a:	9b 01       	movw	r18, r22
    255c:	ac 01       	movw	r20, r24
    255e:	64 e0       	ldi	r22, 0x04	; 4
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	8b e5       	ldi	r24, 0x5B	; 91
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    256a:	0a c0       	rjmp	.+20     	; 0x2580 <pkg_headerext_common_set_messageid+0x8c>
    256c:	03 e5       	ldi	r16, 0x53	; 83
    256e:	12 e0       	ldi	r17, 0x02	; 2
    2570:	9b 01       	movw	r18, r22
    2572:	ac 01       	movw	r20, r24
    2574:	64 e0       	ldi	r22, 0x04	; 4
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	8b e5       	ldi	r24, 0x5B	; 91
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
      pkg_headerext_get_set_messageid(val);
      break;
    default:
      break;
  }
}
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <pkg_header_adjust_offset>:

// Initialize the header offset variable, used to correctly interpret
// contents of the header extension and the message data after reception.
static void pkg_header_adjust_offset(void) __attribute__ ((unused));
static void pkg_header_adjust_offset(void)
{
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    2596:	0f 2e       	mov	r0, r31
    2598:	f3 e5       	ldi	r31, 0x53	; 83
    259a:	af 2e       	mov	r10, r31
    259c:	f2 e0       	ldi	r31, 0x02	; 2
    259e:	bf 2e       	mov	r11, r31
    25a0:	f0 2d       	mov	r31, r0
    25a2:	68 94       	set
    25a4:	cc 24       	eor	r12, r12
    25a6:	c5 f8       	bld	r12, 5
    25a8:	d1 2c       	mov	r13, r1
    25aa:	1f e0       	ldi	r17, 0x0F	; 15
    25ac:	e1 2e       	mov	r14, r17
    25ae:	f1 2c       	mov	r15, r1
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	10 e0       	ldi	r17, 0x00	; 0
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	a9 01       	movw	r20, r18
    25ba:	64 e0       	ldi	r22, 0x04	; 4
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	84 e4       	ldi	r24, 0x44	; 68
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
  __MESSAGETYPE = pkg_header_get_messagetype();
    25c6:	60 93 52 02 	sts	0x0252, r22

  switch (__MESSAGETYPE)
    25ca:	62 30       	cpi	r22, 0x02	; 2
    25cc:	c9 f0       	breq	.+50     	; 0x2600 <pkg_header_adjust_offset+0x7a>
    25ce:	28 f4       	brcc	.+10     	; 0x25da <pkg_header_adjust_offset+0x54>
    25d0:	66 23       	and	r22, r22
    25d2:	f1 f0       	breq	.+60     	; 0x2610 <pkg_header_adjust_offset+0x8a>
    25d4:	61 30       	cpi	r22, 0x01	; 1
    25d6:	c1 f0       	breq	.+48     	; 0x2608 <pkg_header_adjust_offset+0x82>
    25d8:	1e c0       	rjmp	.+60     	; 0x2616 <pkg_header_adjust_offset+0x90>
    25da:	69 30       	cpi	r22, 0x09	; 9
    25dc:	49 f0       	breq	.+18     	; 0x25f0 <pkg_header_adjust_offset+0x6a>
    25de:	6a 30       	cpi	r22, 0x0A	; 10
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <pkg_header_adjust_offset+0x62>
    25e2:	68 30       	cpi	r22, 0x08	; 8
    25e4:	c1 f4       	brne	.+48     	; 0x2616 <pkg_header_adjust_offset+0x90>
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <pkg_header_adjust_offset+0x72>
  {
    case MESSAGETYPE_ACKSTATUS:
      __HEADEROFFSETBITS = 120;
    25e8:	88 e7       	ldi	r24, 0x78	; 120
    25ea:	80 93 51 02 	sts	0x0251, r24
      break;
    25ee:	13 c0       	rjmp	.+38     	; 0x2616 <pkg_header_adjust_offset+0x90>
    case MESSAGETYPE_ACK:
      __HEADEROFFSETBITS = 109;
    25f0:	8d e6       	ldi	r24, 0x6D	; 109
    25f2:	80 93 51 02 	sts	0x0251, r24
      break;
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <pkg_header_adjust_offset+0x90>
    case MESSAGETYPE_STATUS:
      __HEADEROFFSETBITS = 83;
    25f8:	83 e5       	ldi	r24, 0x53	; 83
    25fa:	80 93 51 02 	sts	0x0251, r24
      break;
    25fe:	0b c0       	rjmp	.+22     	; 0x2616 <pkg_header_adjust_offset+0x90>
    case MESSAGETYPE_SETGET:
      __HEADEROFFSETBITS = 95;
    2600:	8f e5       	ldi	r24, 0x5F	; 95
    2602:	80 93 51 02 	sts	0x0251, r24
      break;
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <pkg_header_adjust_offset+0x90>
    case MESSAGETYPE_SET:
      __HEADEROFFSETBITS = 95;
    2608:	8f e5       	ldi	r24, 0x5F	; 95
    260a:	80 93 51 02 	sts	0x0251, r24
      break;
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <pkg_header_adjust_offset+0x90>
    case MESSAGETYPE_GET:
      __HEADEROFFSETBITS = 95;
    2610:	8f e5       	ldi	r24, 0x5F	; 95
    2612:	80 93 51 02 	sts	0x0251, r24
      break;
  }
}
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	cf 90       	pop	r12
    2622:	bf 90       	pop	r11
    2624:	af 90       	pop	r10
    2626:	08 95       	ret

00002628 <decode_data>:

// Show info about the received packets.
// This is only for debugging and only few messages are supported. The definition
// of all packets must be known at the PC program that's processing the data.
void decode_data(uint8_t len)
{
    2628:	2f 92       	push	r2
    262a:	3f 92       	push	r3
    262c:	4f 92       	push	r4
    262e:	5f 92       	push	r5
    2630:	6f 92       	push	r6
    2632:	7f 92       	push	r7
    2634:	8f 92       	push	r8
    2636:	9f 92       	push	r9
    2638:	af 92       	push	r10
    263a:	bf 92       	push	r11
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	2e 97       	sbiw	r28, 0x0e	; 14
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	98 2e       	mov	r9, r24
	uint32_t u32, messagegroupid, messageid;
	uint16_t u16;
	
	pkg_header_adjust_offset();
    265e:	93 df       	rcall	.-218    	; 0x2586 <pkg_header_adjust_offset>
    2660:	0f 2e       	mov	r0, r31
    2662:	f3 e5       	ldi	r31, 0x53	; 83
    2664:	af 2e       	mov	r10, r31
    2666:	f2 e0       	ldi	r31, 0x02	; 2
    2668:	bf 2e       	mov	r11, r31
    266a:	f0 2d       	mov	r31, r0
    266c:	68 94       	set
    266e:	cc 24       	eor	r12, r12
    2670:	c5 f8       	bld	r12, 5
    2672:	d1 2c       	mov	r13, r1
    2674:	ee 24       	eor	r14, r14
    2676:	ea 94       	dec	r14
    2678:	1f e0       	ldi	r17, 0x0F	; 15
    267a:	f1 2e       	mov	r15, r17
    267c:	00 e0       	ldi	r16, 0x00	; 0
    267e:	10 e0       	ldi	r17, 0x00	; 0
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	a9 01       	movw	r20, r18
    2686:	6c e0       	ldi	r22, 0x0C	; 12
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	80 e2       	ldi	r24, 0x20	; 32
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2692:	6d 83       	std	Y+5, r22	; 0x05
    2694:	7e 83       	std	Y+6, r23	; 0x06
    2696:	ee 24       	eor	r14, r14
    2698:	ea 94       	dec	r14
    269a:	fe 2c       	mov	r15, r14
    269c:	0f ef       	ldi	r16, 0xFF	; 255
    269e:	10 e0       	ldi	r17, 0x00	; 0
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	a9 01       	movw	r20, r18
    26a6:	68 e1       	ldi	r22, 0x18	; 24
    26a8:	70 e0       	ldi	r23, 0x00	; 0
    26aa:	8c e2       	ldi	r24, 0x2C	; 44
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    26b2:	86 2e       	mov	r8, r22
    26b4:	77 2e       	mov	r7, r23
    26b6:	68 2e       	mov	r6, r24
    26b8:	59 2e       	mov	r5, r25
    26ba:	1f e0       	ldi	r17, 0x0F	; 15
    26bc:	e1 2e       	mov	r14, r17
    26be:	f1 2c       	mov	r15, r1
    26c0:	00 e0       	ldi	r16, 0x00	; 0
    26c2:	10 e0       	ldi	r17, 0x00	; 0
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	64 e0       	ldi	r22, 0x04	; 4
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	84 e4       	ldi	r24, 0x44	; 68
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    26d6:	36 2e       	mov	r3, r22

	uint16_t senderid = pkg_header_get_senderid();
	uint32_t packetcounter = pkg_header_get_packetcounter();
	MessageTypeEnum messagetype = pkg_header_get_messagetype();

	UART_PUTF("Packet Data: SenderID=%u;", senderid);
    26d8:	2e 81       	ldd	r18, Y+6	; 0x06
    26da:	2f 93       	push	r18
    26dc:	3d 81       	ldd	r19, Y+5	; 0x05
    26de:	3f 93       	push	r19
    26e0:	89 eb       	ldi	r24, 0xB9	; 185
    26e2:	95 e0       	ldi	r25, 0x05	; 5
    26e4:	9f 93       	push	r25
    26e6:	8f 93       	push	r24
    26e8:	08 eb       	ldi	r16, 0xB8	; 184
    26ea:	13 e0       	ldi	r17, 0x03	; 3
    26ec:	1f 93       	push	r17
    26ee:	0f 93       	push	r16
    26f0:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    26f4:	c8 01       	movw	r24, r16
    26f6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
	UART_PUTF("PacketCounter=%lu;", packetcounter);
    26fa:	5f 92       	push	r5
    26fc:	6f 92       	push	r6
    26fe:	7f 92       	push	r7
    2700:	8f 92       	push	r8
    2702:	86 ea       	ldi	r24, 0xA6	; 166
    2704:	95 e0       	ldi	r25, 0x05	; 5
    2706:	9f 93       	push	r25
    2708:	8f 93       	push	r24
    270a:	1f 93       	push	r17
    270c:	0f 93       	push	r16
    270e:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2712:	c8 01       	movw	r24, r16
    2714:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
	UART_PUTF("MessageType=%u;", messagetype);
    2718:	1f 92       	push	r1
    271a:	3f 92       	push	r3
    271c:	86 e9       	ldi	r24, 0x96	; 150
    271e:	95 e0       	ldi	r25, 0x05	; 5
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	1f 93       	push	r17
    2726:	0f 93       	push	r16
    2728:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    272c:	c8 01       	movw	r24, r16
    272e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>

	// show ReceiverID for all requests
	if ((messagetype == MESSAGETYPE_GET) || (messagetype == MESSAGETYPE_SET) || (messagetype == MESSAGETYPE_SETGET))
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	92 e0       	ldi	r25, 0x02	; 2
    273e:	93 15       	cp	r25, r3
    2740:	a8 f0       	brcs	.+42     	; 0x276c <decode_data+0x144>
	{
		uint16_t receiverid = pkg_headerext_common_get_receiverid();
    2742:	25 de       	rcall	.-950    	; 0x238e <pkg_headerext_common_get_receiverid>
		UART_PUTF("ReceiverID=%u;", receiverid);
    2744:	7f 93       	push	r23
    2746:	6f 93       	push	r22
    2748:	87 e8       	ldi	r24, 0x87	; 135
    274a:	95 e0       	ldi	r25, 0x05	; 5
    274c:	9f 93       	push	r25
    274e:	8f 93       	push	r24
    2750:	c8 01       	movw	r24, r16
    2752:	9f 93       	push	r25
    2754:	0f 93       	push	r16
    2756:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    275a:	c8 01       	movw	r24, r16
    275c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
	
	uint16_t acksenderid = 65000;
	uint32_t ackpacketcounter = 0;

	// show AckSenderID, AckPacketCounter and Error for "Ack" and "AckStatus"
	if ((messagetype == MESSAGETYPE_ACK) || (messagetype == MESSAGETYPE_ACKSTATUS))
    276c:	a7 ef       	ldi	r26, 0xF7	; 247
    276e:	a3 0d       	add	r26, r3
    2770:	ad 87       	std	Y+13, r26	; 0x0d
    2772:	a2 30       	cpi	r26, 0x02	; 2
    2774:	08 f0       	brcs	.+2      	; 0x2778 <decode_data+0x150>
    2776:	fb c0       	rjmp	.+502    	; 0x296e <decode_data+0x346>
// Get AckSenderID (UIntValue)
// Same function for all MessageTypes!
static uint32_t pkg_headerext_common_get_acksenderid(void) __attribute__ ((unused));
static uint32_t pkg_headerext_common_get_acksenderid(void)
{
  switch (__MESSAGETYPE)
    2778:	80 91 52 02 	lds	r24, 0x0252
    277c:	89 30       	cpi	r24, 0x09	; 9
    277e:	e1 f0       	breq	.+56     	; 0x27b8 <decode_data+0x190>
    2780:	8a 30       	cpi	r24, 0x0A	; 10
    2782:	a1 f5       	brne	.+104    	; 0x27ec <decode_data+0x1c4>
    2784:	0f 2e       	mov	r0, r31
    2786:	f3 e5       	ldi	r31, 0x53	; 83
    2788:	af 2e       	mov	r10, r31
    278a:	f2 e0       	ldi	r31, 0x02	; 2
    278c:	bf 2e       	mov	r11, r31
    278e:	f0 2d       	mov	r31, r0
    2790:	68 94       	set
    2792:	cc 24       	eor	r12, r12
    2794:	c5 f8       	bld	r12, 5
    2796:	d1 2c       	mov	r13, r1
    2798:	ee 24       	eor	r14, r14
    279a:	ea 94       	dec	r14
    279c:	1f e0       	ldi	r17, 0x0F	; 15
    279e:	f1 2e       	mov	r15, r17
    27a0:	00 e0       	ldi	r16, 0x00	; 0
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	a9 01       	movw	r20, r18
    27aa:	6c e0       	ldi	r22, 0x0C	; 12
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	88 e4       	ldi	r24, 0x48	; 72
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    27b6:	1d c0       	rjmp	.+58     	; 0x27f2 <decode_data+0x1ca>
    27b8:	0f 2e       	mov	r0, r31
    27ba:	f3 e5       	ldi	r31, 0x53	; 83
    27bc:	af 2e       	mov	r10, r31
    27be:	f2 e0       	ldi	r31, 0x02	; 2
    27c0:	bf 2e       	mov	r11, r31
    27c2:	f0 2d       	mov	r31, r0
    27c4:	68 94       	set
    27c6:	cc 24       	eor	r12, r12
    27c8:	c5 f8       	bld	r12, 5
    27ca:	d1 2c       	mov	r13, r1
    27cc:	ee 24       	eor	r14, r14
    27ce:	ea 94       	dec	r14
    27d0:	1f e0       	ldi	r17, 0x0F	; 15
    27d2:	f1 2e       	mov	r15, r17
    27d4:	00 e0       	ldi	r16, 0x00	; 0
    27d6:	10 e0       	ldi	r17, 0x00	; 0
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	a9 01       	movw	r20, r18
    27de:	6c e0       	ldi	r22, 0x0C	; 12
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	88 e4       	ldi	r24, 0x48	; 72
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <decode_data+0x1ca>
      break;
    case MESSAGETYPE_ACK:
      return pkg_headerext_ack_get_acksenderid();
      break;
    default:
      return 0;
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	cb 01       	movw	r24, r22
	{
		acksenderid = pkg_headerext_common_get_acksenderid();
    27f2:	78 87       	std	Y+8, r23	; 0x08
    27f4:	6f 83       	std	Y+7, r22	; 0x07
// Get AckPacketCounter (UIntValue)
// Same function for all MessageTypes!
static uint32_t pkg_headerext_common_get_ackpacketcounter(void) __attribute__ ((unused));
static uint32_t pkg_headerext_common_get_ackpacketcounter(void)
{
  switch (__MESSAGETYPE)
    27f6:	80 91 52 02 	lds	r24, 0x0252
    27fa:	89 30       	cpi	r24, 0x09	; 9
    27fc:	f9 f0       	breq	.+62     	; 0x283c <decode_data+0x214>
    27fe:	8a 30       	cpi	r24, 0x0A	; 10
    2800:	d1 f5       	brne	.+116    	; 0x2876 <decode_data+0x24e>
    2802:	0f 2e       	mov	r0, r31
    2804:	f3 e5       	ldi	r31, 0x53	; 83
    2806:	af 2e       	mov	r10, r31
    2808:	f2 e0       	ldi	r31, 0x02	; 2
    280a:	bf 2e       	mov	r11, r31
    280c:	f0 2d       	mov	r31, r0
    280e:	68 94       	set
    2810:	cc 24       	eor	r12, r12
    2812:	c5 f8       	bld	r12, 5
    2814:	d1 2c       	mov	r13, r1
    2816:	ee 24       	eor	r14, r14
    2818:	ea 94       	dec	r14
    281a:	fe 2c       	mov	r15, r14
    281c:	0f ef       	ldi	r16, 0xFF	; 255
    281e:	10 e0       	ldi	r17, 0x00	; 0
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	a9 01       	movw	r20, r18
    2826:	68 e1       	ldi	r22, 0x18	; 24
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	84 e5       	ldi	r24, 0x54	; 84
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2832:	69 87       	std	Y+9, r22	; 0x09
    2834:	7a 87       	std	Y+10, r23	; 0x0a
    2836:	8b 87       	std	Y+11, r24	; 0x0b
    2838:	9c 87       	std	Y+12, r25	; 0x0c
    283a:	21 c0       	rjmp	.+66     	; 0x287e <decode_data+0x256>
    283c:	0f 2e       	mov	r0, r31
    283e:	f3 e5       	ldi	r31, 0x53	; 83
    2840:	af 2e       	mov	r10, r31
    2842:	f2 e0       	ldi	r31, 0x02	; 2
    2844:	bf 2e       	mov	r11, r31
    2846:	f0 2d       	mov	r31, r0
    2848:	68 94       	set
    284a:	cc 24       	eor	r12, r12
    284c:	c5 f8       	bld	r12, 5
    284e:	d1 2c       	mov	r13, r1
    2850:	ee 24       	eor	r14, r14
    2852:	ea 94       	dec	r14
    2854:	fe 2c       	mov	r15, r14
    2856:	0f ef       	ldi	r16, 0xFF	; 255
    2858:	10 e0       	ldi	r17, 0x00	; 0
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	a9 01       	movw	r20, r18
    2860:	68 e1       	ldi	r22, 0x18	; 24
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	84 e5       	ldi	r24, 0x54	; 84
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    286c:	69 87       	std	Y+9, r22	; 0x09
    286e:	7a 87       	std	Y+10, r23	; 0x0a
    2870:	8b 87       	std	Y+11, r24	; 0x0b
    2872:	9c 87       	std	Y+12, r25	; 0x0c
    2874:	04 c0       	rjmp	.+8      	; 0x287e <decode_data+0x256>
      break;
    case MESSAGETYPE_ACK:
      return pkg_headerext_ack_get_ackpacketcounter();
      break;
    default:
      return 0;
    2876:	19 86       	std	Y+9, r1	; 0x09
    2878:	1a 86       	std	Y+10, r1	; 0x0a
    287a:	1b 86       	std	Y+11, r1	; 0x0b
    287c:	1c 86       	std	Y+12, r1	; 0x0c
// Get Error (BoolValue)
// Same function for all MessageTypes!
static bool pkg_headerext_common_get_error(void) __attribute__ ((unused));
static bool pkg_headerext_common_get_error(void)
{
  switch (__MESSAGETYPE)
    287e:	80 91 52 02 	lds	r24, 0x0252
    2882:	89 30       	cpi	r24, 0x09	; 9
    2884:	f9 f0       	breq	.+62     	; 0x28c4 <decode_data+0x29c>
    2886:	8a 30       	cpi	r24, 0x0A	; 10
    2888:	d1 f5       	brne	.+116    	; 0x28fe <decode_data+0x2d6>
}

// function wrappers for ARRAY access
static inline uint8_t array_read_UIntValue8(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return (uint8_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 8, array);
    288a:	0f 2e       	mov	r0, r31
    288c:	f3 e5       	ldi	r31, 0x53	; 83
    288e:	af 2e       	mov	r10, r31
    2890:	f2 e0       	ldi	r31, 0x02	; 2
    2892:	bf 2e       	mov	r11, r31
    2894:	f0 2d       	mov	r31, r0
    2896:	68 94       	set
    2898:	cc 24       	eor	r12, r12
    289a:	c3 f8       	bld	r12, 3
    289c:	d1 2c       	mov	r13, r1
    289e:	e1 2c       	mov	r14, r1
    28a0:	f1 2c       	mov	r15, r1
    28a2:	87 01       	movw	r16, r14
    28a4:	e3 94       	inc	r14
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	a9 01       	movw	r20, r18
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	8c e6       	ldi	r24, 0x6C	; 108
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>

// Get Error (BoolValue)
// Offset: 108, length bits 1
static inline bool pkg_headerext_ackstatus_get_error(void)
{
  return array_read_UIntValue8(108, 1, 0, 1, bufx) == 1;
    28b8:	88 24       	eor	r8, r8
    28ba:	83 94       	inc	r8
    28bc:	61 30       	cpi	r22, 0x01	; 1
    28be:	01 f1       	breq	.+64     	; 0x2900 <decode_data+0x2d8>
    28c0:	81 2c       	mov	r8, r1
    28c2:	1e c0       	rjmp	.+60     	; 0x2900 <decode_data+0x2d8>
    28c4:	0f 2e       	mov	r0, r31
    28c6:	f3 e5       	ldi	r31, 0x53	; 83
    28c8:	af 2e       	mov	r10, r31
    28ca:	f2 e0       	ldi	r31, 0x02	; 2
    28cc:	bf 2e       	mov	r11, r31
    28ce:	f0 2d       	mov	r31, r0
    28d0:	68 94       	set
    28d2:	cc 24       	eor	r12, r12
    28d4:	c3 f8       	bld	r12, 3
    28d6:	d1 2c       	mov	r13, r1
    28d8:	e1 2c       	mov	r14, r1
    28da:	f1 2c       	mov	r15, r1
    28dc:	87 01       	movw	r16, r14
    28de:	e3 94       	inc	r14
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	a9 01       	movw	r20, r18
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	8c e6       	ldi	r24, 0x6C	; 108
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>

// Get Error (BoolValue)
// Offset: 108, length bits 1
static inline bool pkg_headerext_ack_get_error(void)
{
  return array_read_UIntValue8(108, 1, 0, 1, bufx) == 1;
    28f2:	88 24       	eor	r8, r8
    28f4:	83 94       	inc	r8
    28f6:	61 30       	cpi	r22, 0x01	; 1
    28f8:	19 f0       	breq	.+6      	; 0x2900 <decode_data+0x2d8>
    28fa:	81 2c       	mov	r8, r1
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <decode_data+0x2d8>
      break;
    case MESSAGETYPE_ACK:
      return pkg_headerext_ack_get_error();
      break;
    default:
      return 0;
    28fe:	81 2c       	mov	r8, r1
		ackpacketcounter = pkg_headerext_common_get_ackpacketcounter();
		uint8_t error = pkg_headerext_common_get_error();
		UART_PUTF("AckSenderID=%u;", acksenderid);
    2900:	b8 85       	ldd	r27, Y+8	; 0x08
    2902:	bf 93       	push	r27
    2904:	ef 81       	ldd	r30, Y+7	; 0x07
    2906:	ef 93       	push	r30
    2908:	87 e7       	ldi	r24, 0x77	; 119
    290a:	95 e0       	ldi	r25, 0x05	; 5
    290c:	9f 93       	push	r25
    290e:	8f 93       	push	r24
    2910:	08 eb       	ldi	r16, 0xB8	; 184
    2912:	13 e0       	ldi	r17, 0x03	; 3
    2914:	1f 93       	push	r17
    2916:	0f 93       	push	r16
    2918:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    291c:	c8 01       	movw	r24, r16
    291e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
		UART_PUTF("AckPacketCounter=%lu;", ackpacketcounter);
    2922:	fc 85       	ldd	r31, Y+12	; 0x0c
    2924:	ff 93       	push	r31
    2926:	2b 85       	ldd	r18, Y+11	; 0x0b
    2928:	2f 93       	push	r18
    292a:	3a 85       	ldd	r19, Y+10	; 0x0a
    292c:	3f 93       	push	r19
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	8f 93       	push	r24
    2932:	81 e6       	ldi	r24, 0x61	; 97
    2934:	95 e0       	ldi	r25, 0x05	; 5
    2936:	9f 93       	push	r25
    2938:	8f 93       	push	r24
    293a:	1f 93       	push	r17
    293c:	0f 93       	push	r16
    293e:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
		UART_PUTF("Error=%u;", error);
    2948:	1f 92       	push	r1
    294a:	8f 92       	push	r8
    294c:	87 e5       	ldi	r24, 0x57	; 87
    294e:	95 e0       	ldi	r25, 0x05	; 5
    2950:	9f 93       	push	r25
    2952:	8f 93       	push	r24
    2954:	1f 93       	push	r17
    2956:	0f 93       	push	r16
    2958:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    295c:	c8 01       	movw	r24, r16
    295e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <uart_putstr>
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	08 c0       	rjmp	.+16     	; 0x297e <decode_data+0x356>
		uint16_t receiverid = pkg_headerext_common_get_receiverid();
		UART_PUTF("ReceiverID=%u;", receiverid);
	}
	
	uint16_t acksenderid = 65000;
	uint32_t ackpacketcounter = 0;
    296e:	19 86       	std	Y+9, r1	; 0x09
    2970:	1a 86       	std	Y+10, r1	; 0x0a
    2972:	1b 86       	std	Y+11, r1	; 0x0b
    2974:	1c 86       	std	Y+12, r1	; 0x0c
	{
		uint16_t receiverid = pkg_headerext_common_get_receiverid();
		UART_PUTF("ReceiverID=%u;", receiverid);
	}
	
	uint16_t acksenderid = 65000;
    2976:	e8 ee       	ldi	r30, 0xE8	; 232
    2978:	fd ef       	ldi	r31, 0xFD	; 253
    297a:	f8 87       	std	Y+8, r31	; 0x08
    297c:	ef 83       	std	Y+7, r30	; 0x07
		UART_PUTF("AckPacketCounter=%lu;", ackpacketcounter);
		UART_PUTF("Error=%u;", error);
	}

	// show MessageGroupID and MessageID for all MessageTypes except "Ack"
	if (messagetype != MESSAGETYPE_ACK)
    297e:	f9 e0       	ldi	r31, 0x09	; 9
    2980:	3f 16       	cp	r3, r31
    2982:	09 f4       	brne	.+2      	; 0x2986 <decode_data+0x35e>
    2984:	f1 c3       	rjmp	.+2018   	; 0x3168 <decode_data+0xb40>
// Get MessageGroupID (UIntValue)
// Same function for all MessageTypes!
static uint32_t pkg_headerext_common_get_messagegroupid(void) __attribute__ ((unused));
static uint32_t pkg_headerext_common_get_messagegroupid(void)
{
  switch (__MESSAGETYPE)
    2986:	80 91 52 02 	lds	r24, 0x0252
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	09 f4       	brne	.+2      	; 0x2990 <decode_data+0x368>
    298e:	43 c0       	rjmp	.+134    	; 0x2a16 <decode_data+0x3ee>
    2990:	38 f4       	brcc	.+14     	; 0x29a0 <decode_data+0x378>
    2992:	88 23       	and	r24, r24
    2994:	09 f4       	brne	.+2      	; 0x2998 <decode_data+0x370>
    2996:	75 c0       	rjmp	.+234    	; 0x2a82 <decode_data+0x45a>
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	09 f4       	brne	.+2      	; 0x299e <decode_data+0x376>
    299c:	57 c0       	rjmp	.+174    	; 0x2a4c <decode_data+0x424>
    299e:	8c c0       	rjmp	.+280    	; 0x2ab8 <decode_data+0x490>
    29a0:	88 30       	cpi	r24, 0x08	; 8
    29a2:	f1 f0       	breq	.+60     	; 0x29e0 <decode_data+0x3b8>
    29a4:	8a 30       	cpi	r24, 0x0A	; 10
    29a6:	09 f0       	breq	.+2      	; 0x29aa <decode_data+0x382>
    29a8:	87 c0       	rjmp	.+270    	; 0x2ab8 <decode_data+0x490>
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    29aa:	0f 2e       	mov	r0, r31
    29ac:	f3 e5       	ldi	r31, 0x53	; 83
    29ae:	af 2e       	mov	r10, r31
    29b0:	f2 e0       	ldi	r31, 0x02	; 2
    29b2:	bf 2e       	mov	r11, r31
    29b4:	f0 2d       	mov	r31, r0
    29b6:	68 94       	set
    29b8:	cc 24       	eor	r12, r12
    29ba:	c5 f8       	bld	r12, 5
    29bc:	d1 2c       	mov	r13, r1
    29be:	1f e7       	ldi	r17, 0x7F	; 127
    29c0:	e1 2e       	mov	r14, r17
    29c2:	f1 2c       	mov	r15, r1
    29c4:	00 e0       	ldi	r16, 0x00	; 0
    29c6:	10 e0       	ldi	r17, 0x00	; 0
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	a9 01       	movw	r20, r18
    29ce:	67 e0       	ldi	r22, 0x07	; 7
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	8d e6       	ldi	r24, 0x6D	; 109
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    29da:	2b 01       	movw	r4, r22
    29dc:	3c 01       	movw	r6, r24
    29de:	6f c0       	rjmp	.+222    	; 0x2abe <decode_data+0x496>
    29e0:	0f 2e       	mov	r0, r31
    29e2:	f3 e5       	ldi	r31, 0x53	; 83
    29e4:	af 2e       	mov	r10, r31
    29e6:	f2 e0       	ldi	r31, 0x02	; 2
    29e8:	bf 2e       	mov	r11, r31
    29ea:	f0 2d       	mov	r31, r0
    29ec:	68 94       	set
    29ee:	cc 24       	eor	r12, r12
    29f0:	c5 f8       	bld	r12, 5
    29f2:	d1 2c       	mov	r13, r1
    29f4:	1f e7       	ldi	r17, 0x7F	; 127
    29f6:	e1 2e       	mov	r14, r17
    29f8:	f1 2c       	mov	r15, r1
    29fa:	00 e0       	ldi	r16, 0x00	; 0
    29fc:	10 e0       	ldi	r17, 0x00	; 0
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	a9 01       	movw	r20, r18
    2a04:	67 e0       	ldi	r22, 0x07	; 7
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	88 e4       	ldi	r24, 0x48	; 72
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2a10:	2b 01       	movw	r4, r22
    2a12:	3c 01       	movw	r6, r24
    2a14:	54 c0       	rjmp	.+168    	; 0x2abe <decode_data+0x496>
    2a16:	0f 2e       	mov	r0, r31
    2a18:	f3 e5       	ldi	r31, 0x53	; 83
    2a1a:	af 2e       	mov	r10, r31
    2a1c:	f2 e0       	ldi	r31, 0x02	; 2
    2a1e:	bf 2e       	mov	r11, r31
    2a20:	f0 2d       	mov	r31, r0
    2a22:	68 94       	set
    2a24:	cc 24       	eor	r12, r12
    2a26:	c5 f8       	bld	r12, 5
    2a28:	d1 2c       	mov	r13, r1
    2a2a:	1f e7       	ldi	r17, 0x7F	; 127
    2a2c:	e1 2e       	mov	r14, r17
    2a2e:	f1 2c       	mov	r15, r1
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	a9 01       	movw	r20, r18
    2a3a:	67 e0       	ldi	r22, 0x07	; 7
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	84 e5       	ldi	r24, 0x54	; 84
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2a46:	2b 01       	movw	r4, r22
    2a48:	3c 01       	movw	r6, r24
    2a4a:	39 c0       	rjmp	.+114    	; 0x2abe <decode_data+0x496>
    2a4c:	0f 2e       	mov	r0, r31
    2a4e:	f3 e5       	ldi	r31, 0x53	; 83
    2a50:	af 2e       	mov	r10, r31
    2a52:	f2 e0       	ldi	r31, 0x02	; 2
    2a54:	bf 2e       	mov	r11, r31
    2a56:	f0 2d       	mov	r31, r0
    2a58:	68 94       	set
    2a5a:	cc 24       	eor	r12, r12
    2a5c:	c5 f8       	bld	r12, 5
    2a5e:	d1 2c       	mov	r13, r1
    2a60:	1f e7       	ldi	r17, 0x7F	; 127
    2a62:	e1 2e       	mov	r14, r17
    2a64:	f1 2c       	mov	r15, r1
    2a66:	00 e0       	ldi	r16, 0x00	; 0
    2a68:	10 e0       	ldi	r17, 0x00	; 0
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	a9 01       	movw	r20, r18
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	84 e5       	ldi	r24, 0x54	; 84
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2a7c:	2b 01       	movw	r4, r22
    2a7e:	3c 01       	movw	r6, r24
    2a80:	1e c0       	rjmp	.+60     	; 0x2abe <decode_data+0x496>
    2a82:	0f 2e       	mov	r0, r31
    2a84:	f3 e5       	ldi	r31, 0x53	; 83
    2a86:	af 2e       	mov	r10, r31
    2a88:	f2 e0       	ldi	r31, 0x02	; 2
    2a8a:	bf 2e       	mov	r11, r31
    2a8c:	f0 2d       	mov	r31, r0
    2a8e:	68 94       	set
    2a90:	cc 24       	eor	r12, r12
    2a92:	c5 f8       	bld	r12, 5
    2a94:	d1 2c       	mov	r13, r1
    2a96:	1f e7       	ldi	r17, 0x7F	; 127
    2a98:	e1 2e       	mov	r14, r17
    2a9a:	f1 2c       	mov	r15, r1
    2a9c:	00 e0       	ldi	r16, 0x00	; 0
    2a9e:	10 e0       	ldi	r17, 0x00	; 0
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	a9 01       	movw	r20, r18
    2aa6:	67 e0       	ldi	r22, 0x07	; 7
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	84 e5       	ldi	r24, 0x54	; 84
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2ab2:	2b 01       	movw	r4, r22
    2ab4:	3c 01       	movw	r6, r24
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <decode_data+0x496>
      break;
    case MESSAGETYPE_GET:
      return pkg_headerext_get_get_messagegroupid();
      break;
    default:
      return 0;
    2ab8:	41 2c       	mov	r4, r1
    2aba:	51 2c       	mov	r5, r1
    2abc:	32 01       	movw	r6, r4
// Get MessageID (UIntValue)
// Same function for all MessageTypes!
static uint32_t pkg_headerext_common_get_messageid(void) __attribute__ ((unused));
static uint32_t pkg_headerext_common_get_messageid(void)
{
  switch (__MESSAGETYPE)
    2abe:	80 91 52 02 	lds	r24, 0x0252
    2ac2:	82 30       	cpi	r24, 0x02	; 2
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <decode_data+0x4a0>
    2ac6:	47 c0       	rjmp	.+142    	; 0x2b56 <decode_data+0x52e>
    2ac8:	38 f4       	brcc	.+14     	; 0x2ad8 <decode_data+0x4b0>
    2aca:	88 23       	and	r24, r24
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <decode_data+0x4a8>
    2ace:	7d c0       	rjmp	.+250    	; 0x2bca <decode_data+0x5a2>
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <decode_data+0x4ae>
    2ad4:	5d c0       	rjmp	.+186    	; 0x2b90 <decode_data+0x568>
    2ad6:	96 c0       	rjmp	.+300    	; 0x2c04 <decode_data+0x5dc>
    2ad8:	88 30       	cpi	r24, 0x08	; 8
    2ada:	01 f1       	breq	.+64     	; 0x2b1c <decode_data+0x4f4>
    2adc:	8a 30       	cpi	r24, 0x0A	; 10
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <decode_data+0x4ba>
    2ae0:	91 c0       	rjmp	.+290    	; 0x2c04 <decode_data+0x5dc>
    2ae2:	0f 2e       	mov	r0, r31
    2ae4:	f3 e5       	ldi	r31, 0x53	; 83
    2ae6:	af 2e       	mov	r10, r31
    2ae8:	f2 e0       	ldi	r31, 0x02	; 2
    2aea:	bf 2e       	mov	r11, r31
    2aec:	f0 2d       	mov	r31, r0
    2aee:	68 94       	set
    2af0:	cc 24       	eor	r12, r12
    2af2:	c5 f8       	bld	r12, 5
    2af4:	d1 2c       	mov	r13, r1
    2af6:	1f e0       	ldi	r17, 0x0F	; 15
    2af8:	e1 2e       	mov	r14, r17
    2afa:	f1 2c       	mov	r15, r1
    2afc:	00 e0       	ldi	r16, 0x00	; 0
    2afe:	10 e0       	ldi	r17, 0x00	; 0
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	a9 01       	movw	r20, r18
    2b06:	64 e0       	ldi	r22, 0x04	; 4
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	84 e7       	ldi	r24, 0x74	; 116
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2b12:	69 83       	std	Y+1, r22	; 0x01
    2b14:	7a 83       	std	Y+2, r23	; 0x02
    2b16:	8b 83       	std	Y+3, r24	; 0x03
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	78 c0       	rjmp	.+240    	; 0x2c0c <decode_data+0x5e4>
    2b1c:	0f 2e       	mov	r0, r31
    2b1e:	f3 e5       	ldi	r31, 0x53	; 83
    2b20:	af 2e       	mov	r10, r31
    2b22:	f2 e0       	ldi	r31, 0x02	; 2
    2b24:	bf 2e       	mov	r11, r31
    2b26:	f0 2d       	mov	r31, r0
    2b28:	68 94       	set
    2b2a:	cc 24       	eor	r12, r12
    2b2c:	c5 f8       	bld	r12, 5
    2b2e:	d1 2c       	mov	r13, r1
    2b30:	1f e0       	ldi	r17, 0x0F	; 15
    2b32:	e1 2e       	mov	r14, r17
    2b34:	f1 2c       	mov	r15, r1
    2b36:	00 e0       	ldi	r16, 0x00	; 0
    2b38:	10 e0       	ldi	r17, 0x00	; 0
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	a9 01       	movw	r20, r18
    2b40:	64 e0       	ldi	r22, 0x04	; 4
    2b42:	70 e0       	ldi	r23, 0x00	; 0
    2b44:	8f e4       	ldi	r24, 0x4F	; 79
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2b4c:	69 83       	std	Y+1, r22	; 0x01
    2b4e:	7a 83       	std	Y+2, r23	; 0x02
    2b50:	8b 83       	std	Y+3, r24	; 0x03
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	5b c0       	rjmp	.+182    	; 0x2c0c <decode_data+0x5e4>
    2b56:	0f 2e       	mov	r0, r31
    2b58:	f3 e5       	ldi	r31, 0x53	; 83
    2b5a:	af 2e       	mov	r10, r31
    2b5c:	f2 e0       	ldi	r31, 0x02	; 2
    2b5e:	bf 2e       	mov	r11, r31
    2b60:	f0 2d       	mov	r31, r0
    2b62:	68 94       	set
    2b64:	cc 24       	eor	r12, r12
    2b66:	c5 f8       	bld	r12, 5
    2b68:	d1 2c       	mov	r13, r1
    2b6a:	1f e0       	ldi	r17, 0x0F	; 15
    2b6c:	e1 2e       	mov	r14, r17
    2b6e:	f1 2c       	mov	r15, r1
    2b70:	00 e0       	ldi	r16, 0x00	; 0
    2b72:	10 e0       	ldi	r17, 0x00	; 0
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	a9 01       	movw	r20, r18
    2b7a:	64 e0       	ldi	r22, 0x04	; 4
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	8b e5       	ldi	r24, 0x5B	; 91
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2b86:	69 83       	std	Y+1, r22	; 0x01
    2b88:	7a 83       	std	Y+2, r23	; 0x02
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	3e c0       	rjmp	.+124    	; 0x2c0c <decode_data+0x5e4>
    2b90:	0f 2e       	mov	r0, r31
    2b92:	f3 e5       	ldi	r31, 0x53	; 83
    2b94:	af 2e       	mov	r10, r31
    2b96:	f2 e0       	ldi	r31, 0x02	; 2
    2b98:	bf 2e       	mov	r11, r31
    2b9a:	f0 2d       	mov	r31, r0
    2b9c:	68 94       	set
    2b9e:	cc 24       	eor	r12, r12
    2ba0:	c5 f8       	bld	r12, 5
    2ba2:	d1 2c       	mov	r13, r1
    2ba4:	1f e0       	ldi	r17, 0x0F	; 15
    2ba6:	e1 2e       	mov	r14, r17
    2ba8:	f1 2c       	mov	r15, r1
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	10 e0       	ldi	r17, 0x00	; 0
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	a9 01       	movw	r20, r18
    2bb4:	64 e0       	ldi	r22, 0x04	; 4
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	8b e5       	ldi	r24, 0x5B	; 91
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2bc0:	69 83       	std	Y+1, r22	; 0x01
    2bc2:	7a 83       	std	Y+2, r23	; 0x02
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	21 c0       	rjmp	.+66     	; 0x2c0c <decode_data+0x5e4>
    2bca:	0f 2e       	mov	r0, r31
    2bcc:	f3 e5       	ldi	r31, 0x53	; 83
    2bce:	af 2e       	mov	r10, r31
    2bd0:	f2 e0       	ldi	r31, 0x02	; 2
    2bd2:	bf 2e       	mov	r11, r31
    2bd4:	f0 2d       	mov	r31, r0
    2bd6:	68 94       	set
    2bd8:	cc 24       	eor	r12, r12
    2bda:	c5 f8       	bld	r12, 5
    2bdc:	d1 2c       	mov	r13, r1
    2bde:	1f e0       	ldi	r17, 0x0F	; 15
    2be0:	e1 2e       	mov	r14, r17
    2be2:	f1 2c       	mov	r15, r1
    2be4:	00 e0       	ldi	r16, 0x00	; 0
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	a9 01       	movw	r20, r18
    2bee:	64 e0       	ldi	r22, 0x04	; 4
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	8b e5       	ldi	r24, 0x5B	; 91
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2bfa:	69 83       	std	Y+1, r22	; 0x01
    2bfc:	7a 83       	std	Y+2, r23	; 0x02
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <decode_data+0x5e4>
      break;
    case MESSAGETYPE_GET:
      return pkg_headerext_get_get_messageid();
      break;
    default:
      return 0;
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	1a 82       	std	Y+2, r1	; 0x02
    2c08:	1b 82       	std	Y+3, r1	; 0x03
    2c0a:	1c 82       	std	Y+4, r1	; 0x04
	{
		messagegroupid = pkg_headerext_common_get_messagegroupid();
		messageid = pkg_headerext_common_get_messageid();
		UART_PUTF("MessageGroupID=%u;", messagegroupid);
    2c0c:	7f 92       	push	r7
    2c0e:	6f 92       	push	r6
    2c10:	5f 92       	push	r5
    2c12:	4f 92       	push	r4
    2c14:	84 e4       	ldi	r24, 0x44	; 68
    2c16:	95 e0       	ldi	r25, 0x05	; 5
    2c18:	9f 93       	push	r25
    2c1a:	8f 93       	push	r24
    2c1c:	08 eb       	ldi	r16, 0xB8	; 184
    2c1e:	13 e0       	ldi	r17, 0x03	; 3
    2c20:	1f 93       	push	r17
    2c22:	0f 93       	push	r16
    2c24:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2c28:	c8 01       	movw	r24, r16
    2c2a:	42 d7       	rcall	.+3716   	; 0x3ab0 <uart_putstr>
		UART_PUTF("MessageID=%u;", messageid);
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	2f 93       	push	r18
    2c30:	3b 81       	ldd	r19, Y+3	; 0x03
    2c32:	3f 93       	push	r19
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	8f 93       	push	r24
    2c38:	99 81       	ldd	r25, Y+1	; 0x01
    2c3a:	9f 93       	push	r25
    2c3c:	86 e3       	ldi	r24, 0x36	; 54
    2c3e:	95 e0       	ldi	r25, 0x05	; 5
    2c40:	9f 93       	push	r25
    2c42:	8f 93       	push	r24
    2c44:	1f 93       	push	r17
    2c46:	0f 93       	push	r16
    2c48:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	30 d7       	rcall	.+3680   	; 0x3ab0 <uart_putstr>
	}
	
	// show raw message data for all MessageTypes with data (= all except "Get" and "Ack")
	if ((messagetype != MESSAGETYPE_GET) && (messagetype != MESSAGETYPE_ACK))
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	33 20       	and	r3, r3
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <decode_data+0x638>
    2c5e:	84 c2       	rjmp	.+1288   	; 0x3168 <decode_data+0xb40>
	{
		uint8_t i;
		uint16_t count = (((uint16_t)len * 8) - __HEADEROFFSETBITS + 7) / 8;
    2c60:	20 91 51 02 	lds	r18, 0x0251
    2c64:	87 e0       	ldi	r24, 0x07	; 7
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	82 1b       	sub	r24, r18
    2c6a:	91 09       	sbc	r25, r1
    2c6c:	b8 e0       	ldi	r27, 0x08	; 8
    2c6e:	9b 9e       	mul	r9, r27
    2c70:	80 0d       	add	r24, r0
    2c72:	91 1d       	adc	r25, r1
    2c74:	11 24       	eor	r1, r1
    2c76:	1c 01       	movw	r2, r24
    2c78:	36 94       	lsr	r3
    2c7a:	27 94       	ror	r2
    2c7c:	36 94       	lsr	r3
    2c7e:	27 94       	ror	r2
    2c80:	36 94       	lsr	r3
    2c82:	27 94       	ror	r2
	
		//UART_PUTF4("\r\n\r\nLEN=%u, START=%u, SHIFT=%u, COUNT=%u\r\n\r\n", len, start, shift, count);
	
		UART_PUTS("MessageData=");
    2c84:	89 e2       	ldi	r24, 0x29	; 41
    2c86:	95 e0       	ldi	r25, 0x05	; 5
    2c88:	21 d7       	rcall	.+3650   	; 0x3acc <uart_putstr_P>
	
		for (i = 0; i < count; i++)
    2c8a:	21 14       	cp	r2, r1
    2c8c:	31 04       	cpc	r3, r1
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <decode_data+0x66a>
    2c90:	44 c0       	rjmp	.+136    	; 0x2d1a <decode_data+0x6f2>
    2c92:	10 e0       	ldi	r17, 0x00	; 0
		{
			UART_PUTF("%02x", array_read_UIntValue8(__HEADEROFFSETBITS + i * 8, 8, 0, 255, bufx));
    2c94:	0f 2e       	mov	r0, r31
    2c96:	f8 eb       	ldi	r31, 0xB8	; 184
    2c98:	8f 2e       	mov	r8, r31
    2c9a:	f3 e0       	ldi	r31, 0x03	; 3
    2c9c:	9f 2e       	mov	r9, r31
    2c9e:	f0 2d       	mov	r31, r0
    2ca0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ca2:	ee 87       	std	Y+14, r30	; 0x0e
    2ca4:	1d 87       	std	Y+13, r17	; 0x0d
    2ca6:	80 91 51 02 	lds	r24, 0x0251
    2caa:	90 e0       	ldi	r25, 0x00	; 0
}

// function wrappers for ARRAY access
static inline uint8_t array_read_UIntValue8(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return (uint8_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 8, array);
    2cac:	0f 2e       	mov	r0, r31
    2cae:	f3 e5       	ldi	r31, 0x53	; 83
    2cb0:	af 2e       	mov	r10, r31
    2cb2:	f2 e0       	ldi	r31, 0x02	; 2
    2cb4:	bf 2e       	mov	r11, r31
    2cb6:	f0 2d       	mov	r31, r0
    2cb8:	68 94       	set
    2cba:	cc 24       	eor	r12, r12
    2cbc:	c3 f8       	bld	r12, 3
    2cbe:	d1 2c       	mov	r13, r1
    2cc0:	e1 2c       	mov	r14, r1
    2cc2:	f1 2c       	mov	r15, r1
    2cc4:	87 01       	movw	r16, r14
    2cc6:	ea 94       	dec	r14
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	a9 01       	movw	r20, r18
    2cce:	68 e0       	ldi	r22, 0x08	; 8
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	ad 85       	ldd	r26, Y+13	; 0x0d
    2cd4:	f8 e0       	ldi	r31, 0x08	; 8
    2cd6:	af 9f       	mul	r26, r31
    2cd8:	80 0d       	add	r24, r0
    2cda:	91 1d       	adc	r25, r1
    2cdc:	11 24       	eor	r1, r1
    2cde:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2ce2:	1f 92       	push	r1
    2ce4:	6f 93       	push	r22
    2ce6:	a4 e2       	ldi	r26, 0x24	; 36
    2ce8:	b5 e0       	ldi	r27, 0x05	; 5
    2cea:	bf 93       	push	r27
    2cec:	af 93       	push	r26
    2cee:	9f 92       	push	r9
    2cf0:	8f 92       	push	r8
    2cf2:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2cf6:	c4 01       	movw	r24, r8
    2cf8:	db d6       	rcall	.+3510   	; 0x3ab0 <uart_putstr>
	
		//UART_PUTF4("\r\n\r\nLEN=%u, START=%u, SHIFT=%u, COUNT=%u\r\n\r\n", len, start, shift, count);
	
		UART_PUTS("MessageData=");
	
		for (i = 0; i < count; i++)
    2cfa:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cfc:	ff 5f       	subi	r31, 0xFF	; 255
    2cfe:	fd 87       	std	Y+13, r31	; 0x0d
    2d00:	8f 2f       	mov	r24, r31
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	82 15       	cp	r24, r2
    2d12:	93 05       	cpc	r25, r3
    2d14:	40 f2       	brcs	.-112    	; 0x2ca6 <decode_data+0x67e>
    2d16:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d18:	2d 87       	std	Y+13, r18	; 0x0d
		{
			UART_PUTF("%02x", array_read_UIntValue8(__HEADEROFFSETBITS + i * 8, 8, 0, 255, bufx));
		}
		
		UART_PUTS(";");
    2d1a:	82 e2       	ldi	r24, 0x22	; 34
    2d1c:	95 e0       	ldi	r25, 0x05	; 5
    2d1e:	d6 d6       	rcall	.+3500   	; 0x3acc <uart_putstr_P>

		// additionally decode the message data for a small number of messages
		switch (messagegroupid)
    2d20:	3a e0       	ldi	r19, 0x0A	; 10
    2d22:	43 16       	cp	r4, r19
    2d24:	51 04       	cpc	r5, r1
    2d26:	61 04       	cpc	r6, r1
    2d28:	71 04       	cpc	r7, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <decode_data+0x706>
    2d2c:	cc c0       	rjmp	.+408    	; 0x2ec6 <decode_data+0x89e>
    2d2e:	84 e1       	ldi	r24, 0x14	; 20
    2d30:	48 16       	cp	r4, r24
    2d32:	51 04       	cpc	r5, r1
    2d34:	61 04       	cpc	r6, r1
    2d36:	71 04       	cpc	r7, r1
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <decode_data+0x714>
    2d3a:	b1 c1       	rjmp	.+866    	; 0x309e <decode_data+0xa76>
    2d3c:	45 28       	or	r4, r5
    2d3e:	46 28       	or	r4, r6
    2d40:	47 28       	or	r4, r7
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <decode_data+0x71e>
    2d44:	11 c2       	rjmp	.+1058   	; 0x3168 <decode_data+0xb40>
		{
			case MESSAGEGROUP_GENERIC:

				switch (messageid)
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d4c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	91 05       	cpc	r25, r1
    2d52:	a1 05       	cpc	r26, r1
    2d54:	b1 05       	cpc	r27, r1
    2d56:	31 f0       	breq	.+12     	; 0x2d64 <decode_data+0x73c>
    2d58:	05 97       	sbiw	r24, 0x05	; 5
    2d5a:	a1 05       	cpc	r26, r1
    2d5c:	b1 05       	cpc	r27, r1
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <decode_data+0x73a>
    2d60:	82 c0       	rjmp	.+260    	; 0x2e66 <decode_data+0x83e>
    2d62:	02 c2       	rjmp	.+1028   	; 0x3168 <decode_data+0xb40>

// Get Major (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 8, min val 0, max val 255
static inline uint32_t msg_generic_version_get_major(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 8, 0, 255, bufx);
    2d64:	80 91 51 02 	lds	r24, 0x0251
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    2d68:	0f 2e       	mov	r0, r31
    2d6a:	f3 e5       	ldi	r31, 0x53	; 83
    2d6c:	af 2e       	mov	r10, r31
    2d6e:	f2 e0       	ldi	r31, 0x02	; 2
    2d70:	bf 2e       	mov	r11, r31
    2d72:	f0 2d       	mov	r31, r0
    2d74:	68 94       	set
    2d76:	cc 24       	eor	r12, r12
    2d78:	c5 f8       	bld	r12, 5
    2d7a:	d1 2c       	mov	r13, r1
    2d7c:	e1 2c       	mov	r14, r1
    2d7e:	f1 2c       	mov	r15, r1
    2d80:	87 01       	movw	r16, r14
    2d82:	ea 94       	dec	r14
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	a9 01       	movw	r20, r18
    2d8a:	68 e0       	ldi	r22, 0x08	; 8
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
				{
					case MESSAGEID_GENERIC_VERSION:
						UART_PUTF("Major=%u;", msg_generic_version_get_major());
    2d94:	9f 93       	push	r25
    2d96:	8f 93       	push	r24
    2d98:	7f 93       	push	r23
    2d9a:	6f 93       	push	r22
    2d9c:	88 e1       	ldi	r24, 0x18	; 24
    2d9e:	95 e0       	ldi	r25, 0x05	; 5
    2da0:	9f 93       	push	r25
    2da2:	8f 93       	push	r24
    2da4:	0f 2e       	mov	r0, r31
    2da6:	f8 eb       	ldi	r31, 0xB8	; 184
    2da8:	8f 2e       	mov	r8, r31
    2daa:	f3 e0       	ldi	r31, 0x03	; 3
    2dac:	9f 2e       	mov	r9, r31
    2dae:	f0 2d       	mov	r31, r0
    2db0:	9f 92       	push	r9
    2db2:	8f 92       	push	r8
    2db4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2db8:	c4 01       	movw	r24, r8
    2dba:	7a d6       	rcall	.+3316   	; 0x3ab0 <uart_putstr>

// Get Minor (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 8, length bits 8, min val 0, max val 255
static inline uint32_t msg_generic_version_get_minor(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 8, 8, 0, 255, bufx);
    2dbc:	80 91 51 02 	lds	r24, 0x0251
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	a9 01       	movw	r20, r18
    2dc8:	68 e0       	ldi	r22, 0x08	; 8
    2dca:	70 e0       	ldi	r23, 0x00	; 0
    2dcc:	08 96       	adiw	r24, 0x08	; 8
    2dce:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
						UART_PUTF("Minor=%u;", msg_generic_version_get_minor());
    2dd2:	9f 93       	push	r25
    2dd4:	8f 93       	push	r24
    2dd6:	7f 93       	push	r23
    2dd8:	6f 93       	push	r22
    2dda:	8e e0       	ldi	r24, 0x0E	; 14
    2ddc:	95 e0       	ldi	r25, 0x05	; 5
    2dde:	9f 93       	push	r25
    2de0:	8f 93       	push	r24
    2de2:	9f 92       	push	r9
    2de4:	8f 92       	push	r8
    2de6:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2dea:	c4 01       	movw	r24, r8
    2dec:	61 d6       	rcall	.+3266   	; 0x3ab0 <uart_putstr>

// Get Patch (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 16, length bits 8, min val 0, max val 255
static inline uint32_t msg_generic_version_get_patch(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 16, 8, 0, 255, bufx);
    2dee:	80 91 51 02 	lds	r24, 0x0251
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	a9 01       	movw	r20, r18
    2dfa:	68 e0       	ldi	r22, 0x08	; 8
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	40 96       	adiw	r24, 0x10	; 16
    2e00:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
						UART_PUTF("Patch=%u;", msg_generic_version_get_patch());
    2e04:	9f 93       	push	r25
    2e06:	8f 93       	push	r24
    2e08:	7f 93       	push	r23
    2e0a:	6f 93       	push	r22
    2e0c:	84 e0       	ldi	r24, 0x04	; 4
    2e0e:	95 e0       	ldi	r25, 0x05	; 5
    2e10:	9f 93       	push	r25
    2e12:	8f 93       	push	r24
    2e14:	9f 92       	push	r9
    2e16:	8f 92       	push	r8
    2e18:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2e1c:	c4 01       	movw	r24, r8
    2e1e:	48 d6       	rcall	.+3216   	; 0x3ab0 <uart_putstr>

// Get Hash (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 24, length bits 32, min val 0, max val 4294967295
static inline uint32_t msg_generic_version_get_hash(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 24, 32, 0, 4294967295, bufx);
    2e20:	80 91 51 02 	lds	r24, 0x0251
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	ee 24       	eor	r14, r14
    2e28:	ea 94       	dec	r14
    2e2a:	fe 2c       	mov	r15, r14
    2e2c:	87 01       	movw	r16, r14
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	a9 01       	movw	r20, r18
    2e34:	60 e2       	ldi	r22, 0x20	; 32
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	48 96       	adiw	r24, 0x18	; 24
    2e3a:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
						UART_PUTF("Hash=%08lx;", msg_generic_version_get_hash());
    2e3e:	9f 93       	push	r25
    2e40:	8f 93       	push	r24
    2e42:	7f 93       	push	r23
    2e44:	6f 93       	push	r22
    2e46:	88 ef       	ldi	r24, 0xF8	; 248
    2e48:	94 e0       	ldi	r25, 0x04	; 4
    2e4a:	9f 93       	push	r25
    2e4c:	8f 93       	push	r24
    2e4e:	9f 92       	push	r9
    2e50:	8f 92       	push	r8
    2e52:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	c4 01       	movw	r24, r8
    2e62:	26 d6       	rcall	.+3148   	; 0x3ab0 <uart_putstr>
						break;
    2e64:	81 c1       	rjmp	.+770    	; 0x3168 <decode_data+0xb40>

// Get Percentage (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 7, min val 0, max val 100
static inline uint32_t msg_generic_batterystatus_get_percentage(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 7, 0, 100, bufx);
    2e66:	80 91 51 02 	lds	r24, 0x0251
    2e6a:	0f 2e       	mov	r0, r31
    2e6c:	f3 e5       	ldi	r31, 0x53	; 83
    2e6e:	af 2e       	mov	r10, r31
    2e70:	f2 e0       	ldi	r31, 0x02	; 2
    2e72:	bf 2e       	mov	r11, r31
    2e74:	f0 2d       	mov	r31, r0
    2e76:	68 94       	set
    2e78:	cc 24       	eor	r12, r12
    2e7a:	c5 f8       	bld	r12, 5
    2e7c:	d1 2c       	mov	r13, r1
    2e7e:	14 e6       	ldi	r17, 0x64	; 100
    2e80:	e1 2e       	mov	r14, r17
    2e82:	f1 2c       	mov	r15, r1
    2e84:	00 e0       	ldi	r16, 0x00	; 0
    2e86:	10 e0       	ldi	r17, 0x00	; 0
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	a9 01       	movw	r20, r18
    2e8e:	67 e0       	ldi	r22, 0x07	; 7
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
						
					case MESSAGEID_GENERIC_BATTERYSTATUS:
						UART_PUTF("Percentage=%u;", msg_generic_batterystatus_get_percentage());
    2e98:	9f 93       	push	r25
    2e9a:	8f 93       	push	r24
    2e9c:	7f 93       	push	r23
    2e9e:	6f 93       	push	r22
    2ea0:	89 ee       	ldi	r24, 0xE9	; 233
    2ea2:	94 e0       	ldi	r25, 0x04	; 4
    2ea4:	9f 93       	push	r25
    2ea6:	8f 93       	push	r24
    2ea8:	88 eb       	ldi	r24, 0xB8	; 184
    2eaa:	93 e0       	ldi	r25, 0x03	; 3
    2eac:	9f 93       	push	r25
    2eae:	8f 93       	push	r24
    2eb0:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2eb4:	88 eb       	ldi	r24, 0xB8	; 184
    2eb6:	93 e0       	ldi	r25, 0x03	; 3
    2eb8:	fb d5       	rcall	.+3062   	; 0x3ab0 <uart_putstr>
						break;
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	51 c1       	rjmp	.+674    	; 0x3168 <decode_data+0xb40>
				
				break;

			case MESSAGEGROUP_WEATHER:
				
				switch (messageid)
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	ab 81       	ldd	r26, Y+3	; 0x03
    2ecc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ece:	82 30       	cpi	r24, 0x02	; 2
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	a1 05       	cpc	r26, r1
    2ed4:	b1 05       	cpc	r27, r1
    2ed6:	59 f1       	breq	.+86     	; 0x2f2e <decode_data+0x906>
    2ed8:	83 30       	cpi	r24, 0x03	; 3
    2eda:	91 05       	cpc	r25, r1
    2edc:	a1 05       	cpc	r26, r1
    2ede:	b1 05       	cpc	r27, r1
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <decode_data+0x8bc>
    2ee2:	95 c0       	rjmp	.+298    	; 0x300e <decode_data+0x9e6>
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	a1 05       	cpc	r26, r1
    2ee8:	b1 05       	cpc	r27, r1
    2eea:	09 f0       	breq	.+2      	; 0x2eee <decode_data+0x8c6>
    2eec:	3d c1       	rjmp	.+634    	; 0x3168 <decode_data+0xb40>
				{
					case MESSAGEID_WEATHER_TEMPERATURE:
						UART_PUTS("Temperature=");
    2eee:	8c ed       	ldi	r24, 0xDC	; 220
    2ef0:	94 e0       	ldi	r25, 0x04	; 4
    2ef2:	ec d5       	rcall	.+3032   	; 0x3acc <uart_putstr_P>

// Get Temperature (IntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 16, min val -32768, max val 32767
static inline int32_t msg_weather_temperature_get_temperature(void)
{
  return array_read_IntValue32((uint16_t)__HEADEROFFSETBITS + 0, 16, -32768, 32767, bufx);
    2ef4:	80 91 51 02 	lds	r24, 0x0251
}

static inline int32_t array_read_IntValue32(uint16_t bit, uint16_t length, int32_t minval, int32_t maxval, uint8_t * array)
{
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
    2ef8:	0f 2e       	mov	r0, r31
    2efa:	f3 e5       	ldi	r31, 0x53	; 83
    2efc:	cf 2e       	mov	r12, r31
    2efe:	f2 e0       	ldi	r31, 0x02	; 2
    2f00:	df 2e       	mov	r13, r31
    2f02:	f0 2d       	mov	r31, r0
    2f04:	ee 24       	eor	r14, r14
    2f06:	ea 94       	dec	r14
    2f08:	1f e7       	ldi	r17, 0x7F	; 127
    2f0a:	f1 2e       	mov	r15, r17
    2f0c:	00 e0       	ldi	r16, 0x00	; 0
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e8       	ldi	r19, 0x80	; 128
    2f14:	4f ef       	ldi	r20, 0xFF	; 255
    2f16:	5f ef       	ldi	r21, 0xFF	; 255
    2f18:	60 e1       	ldi	r22, 0x10	; 16
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 23 23 	call	0x4646	; 0x4646 <_eeprom_read_IntValue32>
						print_signed(msg_weather_temperature_get_temperature());
    2f22:	cb 01       	movw	r24, r22
    2f24:	e3 d5       	rcall	.+3014   	; 0x3aec <print_signed>
						UART_PUTS(";");
    2f26:	8a ed       	ldi	r24, 0xDA	; 218
    2f28:	94 e0       	ldi	r25, 0x04	; 4
    2f2a:	d0 d5       	rcall	.+2976   	; 0x3acc <uart_putstr_P>
						break;
    2f2c:	1d c1       	rjmp	.+570    	; 0x3168 <decode_data+0xb40>

// Get Humidity (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 10, min val 0, max val 1000
static inline uint32_t msg_weather_humiditytemperature_get_humidity(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 10, 0, 1000, bufx);
    2f2e:	80 91 51 02 	lds	r24, 0x0251
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    2f32:	0f 2e       	mov	r0, r31
    2f34:	f3 e5       	ldi	r31, 0x53	; 83
    2f36:	af 2e       	mov	r10, r31
    2f38:	f2 e0       	ldi	r31, 0x02	; 2
    2f3a:	bf 2e       	mov	r11, r31
    2f3c:	f0 2d       	mov	r31, r0
    2f3e:	68 94       	set
    2f40:	cc 24       	eor	r12, r12
    2f42:	c5 f8       	bld	r12, 5
    2f44:	d1 2c       	mov	r13, r1
    2f46:	18 ee       	ldi	r17, 0xE8	; 232
    2f48:	e1 2e       	mov	r14, r17
    2f4a:	13 e0       	ldi	r17, 0x03	; 3
    2f4c:	f1 2e       	mov	r15, r17
    2f4e:	00 e0       	ldi	r16, 0x00	; 0
    2f50:	10 e0       	ldi	r17, 0x00	; 0
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	a9 01       	movw	r20, r18
    2f58:	6a e0       	ldi	r22, 0x0A	; 10
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    2f62:	2b 01       	movw	r4, r22
    2f64:	3c 01       	movw	r6, r24
					case MESSAGEID_WEATHER_HUMIDITYTEMPERATURE:
						u16 = msg_weather_humiditytemperature_get_humidity();
						UART_PUTF2("Humidity=%u.%u;Temperature=", u16 / 10, u16 % 10);
    2f66:	9b 01       	movw	r18, r22
    2f68:	ad ec       	ldi	r26, 0xCD	; 205
    2f6a:	bc ec       	ldi	r27, 0xCC	; 204
    2f6c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__umulhisi3>
    2f70:	96 95       	lsr	r25
    2f72:	87 95       	ror	r24
    2f74:	96 95       	lsr	r25
    2f76:	87 95       	ror	r24
    2f78:	96 95       	lsr	r25
    2f7a:	87 95       	ror	r24
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	88 0f       	add	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	d2 01       	movw	r26, r4
    2f94:	a8 1b       	sub	r26, r24
    2f96:	b9 0b       	sbc	r27, r25
    2f98:	cd 01       	movw	r24, r26
    2f9a:	9f 93       	push	r25
    2f9c:	af 93       	push	r26
    2f9e:	92 01       	movw	r18, r4
    2fa0:	ad ec       	ldi	r26, 0xCD	; 205
    2fa2:	bc ec       	ldi	r27, 0xCC	; 204
    2fa4:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__umulhisi3>
    2fa8:	96 95       	lsr	r25
    2faa:	87 95       	ror	r24
    2fac:	96 95       	lsr	r25
    2fae:	87 95       	ror	r24
    2fb0:	96 95       	lsr	r25
    2fb2:	87 95       	ror	r24
    2fb4:	9f 93       	push	r25
    2fb6:	8f 93       	push	r24
    2fb8:	8e eb       	ldi	r24, 0xBE	; 190
    2fba:	94 e0       	ldi	r25, 0x04	; 4
    2fbc:	9f 93       	push	r25
    2fbe:	8f 93       	push	r24
    2fc0:	88 eb       	ldi	r24, 0xB8	; 184
    2fc2:	93 e0       	ldi	r25, 0x03	; 3
    2fc4:	9f 93       	push	r25
    2fc6:	8f 93       	push	r24
    2fc8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    2fcc:	88 eb       	ldi	r24, 0xB8	; 184
    2fce:	93 e0       	ldi	r25, 0x03	; 3
    2fd0:	6f d5       	rcall	.+2782   	; 0x3ab0 <uart_putstr>

// Get Temperature (IntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 10, length bits 16, min val -32768, max val 32767
static inline int32_t msg_weather_humiditytemperature_get_temperature(void)
{
  return array_read_IntValue32((uint16_t)__HEADEROFFSETBITS + 10, 16, -32768, 32767, bufx);
    2fd2:	80 91 51 02 	lds	r24, 0x0251
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
}

static inline int32_t array_read_IntValue32(uint16_t bit, uint16_t length, int32_t minval, int32_t maxval, uint8_t * array)
{
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
    2fd8:	65 01       	movw	r12, r10
    2fda:	ee 24       	eor	r14, r14
    2fdc:	ea 94       	dec	r14
    2fde:	1f e7       	ldi	r17, 0x7F	; 127
    2fe0:	f1 2e       	mov	r15, r17
    2fe2:	00 e0       	ldi	r16, 0x00	; 0
    2fe4:	10 e0       	ldi	r17, 0x00	; 0
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e8       	ldi	r19, 0x80	; 128
    2fea:	4f ef       	ldi	r20, 0xFF	; 255
    2fec:	5f ef       	ldi	r21, 0xFF	; 255
    2fee:	60 e1       	ldi	r22, 0x10	; 16
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	0a 96       	adiw	r24, 0x0a	; 10
    2ff4:	0e 94 23 23 	call	0x4646	; 0x4646 <_eeprom_read_IntValue32>
						print_signed(msg_weather_humiditytemperature_get_temperature());
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	78 d5       	rcall	.+2800   	; 0x3aec <print_signed>
						UART_PUTS(";");
    2ffc:	8c eb       	ldi	r24, 0xBC	; 188
    2ffe:	94 e0       	ldi	r25, 0x04	; 4
    3000:	65 d5       	rcall	.+2762   	; 0x3acc <uart_putstr_P>
						break;
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	ad c0       	rjmp	.+346    	; 0x3168 <decode_data+0xb40>

// Get BarometricPressure (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 17, min val 0, max val 131071
static inline uint32_t msg_weather_barometricpressuretemperature_get_barometricpressure(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 17, 0, 131071, bufx);
    300e:	80 91 51 02 	lds	r24, 0x0251
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    3012:	0f 2e       	mov	r0, r31
    3014:	f3 e5       	ldi	r31, 0x53	; 83
    3016:	af 2e       	mov	r10, r31
    3018:	f2 e0       	ldi	r31, 0x02	; 2
    301a:	bf 2e       	mov	r11, r31
    301c:	f0 2d       	mov	r31, r0
    301e:	68 94       	set
    3020:	cc 24       	eor	r12, r12
    3022:	c5 f8       	bld	r12, 5
    3024:	d1 2c       	mov	r13, r1
    3026:	ee 24       	eor	r14, r14
    3028:	ea 94       	dec	r14
    302a:	fe 2c       	mov	r15, r14
    302c:	01 e0       	ldi	r16, 0x01	; 1
    302e:	10 e0       	ldi	r17, 0x00	; 0
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	a9 01       	movw	r20, r18
    3036:	61 e1       	ldi	r22, 0x11	; 17
    3038:	70 e0       	ldi	r23, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
					case MESSAGEID_WEATHER_BAROMETRICPRESSURETEMPERATURE:
						u32 = msg_weather_barometricpressuretemperature_get_barometricpressure();
						UART_PUTF("Pressure=%ld;Temperature=", u32);
    3040:	9f 93       	push	r25
    3042:	8f 93       	push	r24
    3044:	7f 93       	push	r23
    3046:	6f 93       	push	r22
    3048:	82 ea       	ldi	r24, 0xA2	; 162
    304a:	94 e0       	ldi	r25, 0x04	; 4
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	88 eb       	ldi	r24, 0xB8	; 184
    3052:	93 e0       	ldi	r25, 0x03	; 3
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    305c:	88 eb       	ldi	r24, 0xB8	; 184
    305e:	93 e0       	ldi	r25, 0x03	; 3
    3060:	27 d5       	rcall	.+2638   	; 0x3ab0 <uart_putstr>

// Get Temperature (IntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 17, length bits 16, min val -32768, max val 32767
static inline int32_t msg_weather_barometricpressuretemperature_get_temperature(void)
{
  return array_read_IntValue32((uint16_t)__HEADEROFFSETBITS + 17, 16, -32768, 32767, bufx);
    3062:	80 91 51 02 	lds	r24, 0x0251
    3066:	90 e0       	ldi	r25, 0x00	; 0
}

static inline int32_t array_read_IntValue32(uint16_t bit, uint16_t length, int32_t minval, int32_t maxval, uint8_t * array)
{
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
    3068:	65 01       	movw	r12, r10
    306a:	ee 24       	eor	r14, r14
    306c:	ea 94       	dec	r14
    306e:	1f e7       	ldi	r17, 0x7F	; 127
    3070:	f1 2e       	mov	r15, r17
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e8       	ldi	r19, 0x80	; 128
    307a:	4f ef       	ldi	r20, 0xFF	; 255
    307c:	5f ef       	ldi	r21, 0xFF	; 255
    307e:	60 e1       	ldi	r22, 0x10	; 16
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	41 96       	adiw	r24, 0x11	; 17
    3084:	0e 94 23 23 	call	0x4646	; 0x4646 <_eeprom_read_IntValue32>
						print_signed(msg_weather_barometricpressuretemperature_get_temperature());
    3088:	cb 01       	movw	r24, r22
    308a:	30 d5       	rcall	.+2656   	; 0x3aec <print_signed>
						UART_PUTS(";");
    308c:	80 ea       	ldi	r24, 0xA0	; 160
    308e:	94 e0       	ldi	r25, 0x04	; 4
    3090:	1d d5       	rcall	.+2618   	; 0x3acc <uart_putstr_P>
						break;
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	65 c0       	rjmp	.+202    	; 0x3168 <decode_data+0xb40>
				
				break;

			case MESSAGEGROUP_POWERSWITCH:
				
				switch (messageid)
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	ab 81       	ldd	r26, Y+3	; 0x03
    30a4:	bc 81       	ldd	r27, Y+4	; 0x04
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	a1 05       	cpc	r26, r1
    30aa:	b1 05       	cpc	r27, r1
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <decode_data+0xa88>
    30ae:	5c c0       	rjmp	.+184    	; 0x3168 <decode_data+0xb40>

// Get On (BoolValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 1
static inline bool msg_powerswitch_switchstate_get_on(void)
{
  return array_read_UIntValue8((uint16_t)__HEADEROFFSETBITS + 0, 1, 0, 1, bufx) == 1;
    30b0:	80 91 51 02 	lds	r24, 0x0251
}

// function wrappers for ARRAY access
static inline uint8_t array_read_UIntValue8(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return (uint8_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 8, array);
    30b4:	0f 2e       	mov	r0, r31
    30b6:	f3 e5       	ldi	r31, 0x53	; 83
    30b8:	af 2e       	mov	r10, r31
    30ba:	f2 e0       	ldi	r31, 0x02	; 2
    30bc:	bf 2e       	mov	r11, r31
    30be:	f0 2d       	mov	r31, r0
    30c0:	68 94       	set
    30c2:	cc 24       	eor	r12, r12
    30c4:	c3 f8       	bld	r12, 3
    30c6:	d1 2c       	mov	r13, r1
    30c8:	e1 2c       	mov	r14, r1
    30ca:	f1 2c       	mov	r15, r1
    30cc:	87 01       	movw	r16, r14
    30ce:	e3 94       	inc	r14
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	a9 01       	movw	r20, r18
    30d6:	61 e0       	ldi	r22, 0x01	; 1
    30d8:	70 e0       	ldi	r23, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	61 30       	cpi	r22, 0x01	; 1
    30e6:	09 f0       	breq	.+2      	; 0x30ea <decode_data+0xac2>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
				{
					case MESSAGEID_POWERSWITCH_SWITCHSTATE:
						UART_PUTF("On=%u;", msg_powerswitch_switchstate_get_on());
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	89 e9       	ldi	r24, 0x99	; 153
    30f0:	94 e0       	ldi	r25, 0x04	; 4
    30f2:	9f 93       	push	r25
    30f4:	8f 93       	push	r24
    30f6:	0f 2e       	mov	r0, r31
    30f8:	f8 eb       	ldi	r31, 0xB8	; 184
    30fa:	8f 2e       	mov	r8, r31
    30fc:	f3 e0       	ldi	r31, 0x03	; 3
    30fe:	9f 2e       	mov	r9, r31
    3100:	f0 2d       	mov	r31, r0
    3102:	9f 92       	push	r9
    3104:	8f 92       	push	r8
    3106:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    310a:	c4 01       	movw	r24, r8
    310c:	d1 d4       	rcall	.+2466   	; 0x3ab0 <uart_putstr>

// Get TimeoutSec (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 1, length bits 16, min val 0, max val 65535
static inline uint32_t msg_powerswitch_switchstate_get_timeoutsec(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 1, 16, 0, 65535, bufx);
    310e:	80 91 51 02 	lds	r24, 0x0251
    3112:	90 e0       	ldi	r25, 0x00	; 0
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, array);
}

static inline uint32_t array_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval, uint8_t * array)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, array);
    3114:	0f 2e       	mov	r0, r31
    3116:	f3 e5       	ldi	r31, 0x53	; 83
    3118:	af 2e       	mov	r10, r31
    311a:	f2 e0       	ldi	r31, 0x02	; 2
    311c:	bf 2e       	mov	r11, r31
    311e:	f0 2d       	mov	r31, r0
    3120:	68 94       	set
    3122:	cc 24       	eor	r12, r12
    3124:	c5 f8       	bld	r12, 5
    3126:	d1 2c       	mov	r13, r1
    3128:	ee 24       	eor	r14, r14
    312a:	ea 94       	dec	r14
    312c:	fe 2c       	mov	r15, r14
    312e:	00 e0       	ldi	r16, 0x00	; 0
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	a9 01       	movw	r20, r18
    3138:	60 e1       	ldi	r22, 0x10	; 16
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
						UART_PUTF("TimeoutSec=%u;", msg_powerswitch_switchstate_get_timeoutsec());
    3142:	9f 93       	push	r25
    3144:	8f 93       	push	r24
    3146:	7f 93       	push	r23
    3148:	6f 93       	push	r22
    314a:	8a e8       	ldi	r24, 0x8A	; 138
    314c:	94 e0       	ldi	r25, 0x04	; 4
    314e:	9f 93       	push	r25
    3150:	8f 93       	push	r24
    3152:	9f 92       	push	r9
    3154:	8f 92       	push	r8
    3156:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    315a:	c4 01       	movw	r24, r8
    315c:	a9 d4       	rcall	.+2386   	; 0x3ab0 <uart_putstr>
						break;
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
			default:
				break;
		}
	}

	UART_PUTS("\r\n");
    3168:	87 e8       	ldi	r24, 0x87	; 135
    316a:	94 e0       	ldi	r25, 0x04	; 4
    316c:	af d4       	rcall	.+2398   	; 0x3acc <uart_putstr_P>
	
	// Detect and process Acknowledges to base station, whose requests have to be removed from the request queue
	if ((messagetype == MESSAGETYPE_ACK) || (messagetype == MESSAGETYPE_ACKSTATUS))
    316e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3170:	b2 30       	cpi	r27, 0x02	; 2
    3172:	90 f4       	brcc	.+36     	; 0x3198 <decode_data+0xb70>
	{
		if (acksenderid == device_id) // request sent from base station
    3174:	80 91 42 03 	lds	r24, 0x0342
    3178:	90 91 43 03 	lds	r25, 0x0343
    317c:	ef 81       	ldd	r30, Y+7	; 0x07
    317e:	f8 85       	ldd	r31, Y+8	; 0x08
    3180:	e8 17       	cp	r30, r24
    3182:	f9 07       	cpc	r31, r25
    3184:	49 f4       	brne	.+18     	; 0x3198 <decode_data+0xb70>
		{
			remove_request(senderid, device_id, ackpacketcounter);
    3186:	29 85       	ldd	r18, Y+9	; 0x09
    3188:	3a 85       	ldd	r19, Y+10	; 0x0a
    318a:	4b 85       	ldd	r20, Y+11	; 0x0b
    318c:	5c 85       	ldd	r21, Y+12	; 0x0c
    318e:	bf 01       	movw	r22, r30
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <remove_request>
		}
	}
}
    3198:	2e 96       	adiw	r28, 0x0e	; 14
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	df 91       	pop	r29
    31a6:	cf 91       	pop	r28
    31a8:	1f 91       	pop	r17
    31aa:	0f 91       	pop	r16
    31ac:	ff 90       	pop	r15
    31ae:	ef 90       	pop	r14
    31b0:	df 90       	pop	r13
    31b2:	cf 90       	pop	r12
    31b4:	bf 90       	pop	r11
    31b6:	af 90       	pop	r10
    31b8:	9f 90       	pop	r9
    31ba:	8f 90       	pop	r8
    31bc:	7f 90       	pop	r7
    31be:	6f 90       	pop	r6
    31c0:	5f 90       	pop	r5
    31c2:	4f 90       	pop	r4
    31c4:	3f 90       	pop	r3
    31c6:	2f 90       	pop	r2
    31c8:	08 95       	ret

000031ca <send_packet>:

// Set senderid, packetcounter and CRC into the partly filled packet, encrypt it using the given AES key number and send it.
void send_packet(uint8_t aes_key_nr, uint8_t packet_len)
{
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	d8 2f       	mov	r29, r24
    31d4:	c6 2f       	mov	r28, r22
	pkg_header_set_senderid(device_id);
    31d6:	20 91 42 03 	lds	r18, 0x0342
    31da:	30 91 43 03 	lds	r19, 0x0343
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	50 e0       	ldi	r21, 0x00	; 0
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
}

static inline void array_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array)
{
	_eeprom_write_UIntValue(bit, length, val, array);
    31e2:	03 e5       	ldi	r16, 0x53	; 83
    31e4:	12 e0       	ldi	r17, 0x02	; 2
    31e6:	6c e0       	ldi	r22, 0x0C	; 12
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e2       	ldi	r24, 0x20	; 32
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>

	inc_packetcounter();
    31f2:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <inc_packetcounter>
    31f6:	20 91 4d 02 	lds	r18, 0x024D
    31fa:	30 91 4e 02 	lds	r19, 0x024E
    31fe:	40 91 4f 02 	lds	r20, 0x024F
    3202:	50 91 50 02 	lds	r21, 0x0250
    3206:	68 e1       	ldi	r22, 0x18	; 24
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	8c e2       	ldi	r24, 0x2C	; 44
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
	pkg_header_set_packetcounter(packetcounter);

	// set CRC32
	pkg_header_set_crc32(crc32(bufx + 4, packet_len - 4));
    3212:	6c ef       	ldi	r22, 0xFC	; 252
    3214:	6c 0f       	add	r22, r28
    3216:	87 e5       	ldi	r24, 0x57	; 87
    3218:	92 e0       	ldi	r25, 0x02	; 2
    321a:	da d6       	rcall	.+3508   	; 0x3fd0 <crc32>
    321c:	9b 01       	movw	r18, r22
    321e:	ac 01       	movw	r20, r24
    3220:	60 e2       	ldi	r22, 0x20	; 32
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
	
	// load AES key (0 is first AES key)
	if (aes_key_nr >= aes_key_count)
    322c:	80 91 41 03 	lds	r24, 0x0341
    3230:	d8 17       	cp	r29, r24
    3232:	10 f0       	brcs	.+4      	; 0x3238 <send_packet+0x6e>
	{
		aes_key_nr = aes_key_count - 1;
    3234:	df ef       	ldi	r29, 0xFF	; 255
    3236:	d8 0f       	add	r29, r24

// Get AesKey (ByteArray)
// Offset: 520, length bits 256
static inline void e2p_basestation_get_aeskey(uint8_t index, void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((520 + (uint16_t)index * 256) / 8), 32);
    3238:	6d 2f       	mov	r22, r29
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	76 2f       	mov	r23, r22
    323e:	66 27       	eor	r22, r22
    3240:	68 5f       	subi	r22, 0xF8	; 248
    3242:	7d 4f       	sbci	r23, 0xFD	; 253
    3244:	76 95       	lsr	r23
    3246:	67 95       	ror	r22
    3248:	76 95       	lsr	r23
    324a:	67 95       	ror	r22
    324c:	76 95       	lsr	r23
    324e:	67 95       	ror	r22
    3250:	40 e2       	ldi	r20, 0x20	; 32
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	89 ef       	ldi	r24, 0xF9	; 249
    3256:	93 e0       	ldi	r25, 0x03	; 3
    3258:	0e 94 4d 28 	call	0x509a	; 0x509a <__eerd_block_m328>
	}
	
	e2p_basestation_get_aeskey(aes_key_nr, aes_key);
	
	// show info
	decode_data(packet_len);
    325c:	8c 2f       	mov	r24, r28
    325e:	e4 d9       	rcall	.-3128   	; 0x2628 <decode_data>

	// encrypt and send
	__PACKETSIZEBYTES = packet_len;
    3260:	c0 93 4c 02 	sts	0x024C, r28
	rfm12_send_bufx();
    3264:	f4 d7       	rcall	.+4072   	; 0x424e <rfm12_send_bufx>
}
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	08 95       	ret

00003270 <main>:

int main(void)
{
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	00 d0       	rcall	.+0      	; 0x3276 <main+0x6>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <main+0x8>
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    327c:	2f ef       	ldi	r18, 0xFF	; 255
    327e:	88 e0       	ldi	r24, 0x08	; 8
    3280:	9d e3       	ldi	r25, 0x3D	; 61
    3282:	21 50       	subi	r18, 0x01	; 1
    3284:	80 40       	sbci	r24, 0x00	; 0
    3286:	90 40       	sbci	r25, 0x00	; 0
    3288:	e1 f7       	brne	.-8      	; 0x3282 <main+0x12>
    328a:	00 c0       	rjmp	.+0      	; 0x328c <main+0x1c>
    328c:	00 00       	nop
	uint8_t loop2 = 0;
	
	// delay 1s to avoid further communication with uart or RFM12 when my programmer resets the MC after 500ms...
	_delay_ms(1000);

	util_init();
    328e:	07 d7       	rcall	.+3598   	; 0x409e <util_init>

	check_eeprom_compatibility(DEVICETYPE_BASESTATION);
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <check_eeprom_compatibility>

	request_queue_init();
    3296:	0e 94 00 0c 	call	0x1800	; 0x1800 <request_queue_init>
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, NULL);
}

static inline uint32_t eeprom_read_UIntValue32(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval)
{
	return _eeprom_read_UIntValue32(bit, length, minval, maxval, 32, NULL);
    329a:	a1 2c       	mov	r10, r1
    329c:	b1 2c       	mov	r11, r1
    329e:	68 94       	set
    32a0:	cc 24       	eor	r12, r12
    32a2:	c5 f8       	bld	r12, 5
    32a4:	d1 2c       	mov	r13, r1
    32a6:	ee 24       	eor	r14, r14
    32a8:	ea 94       	dec	r14
    32aa:	fe 2c       	mov	r15, r14
    32ac:	0f ef       	ldi	r16, 0xFF	; 255
    32ae:	10 e0       	ldi	r17, 0x00	; 0
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	a9 01       	movw	r20, r18
    32b6:	68 e1       	ldi	r22, 0x18	; 24
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	80 e5       	ldi	r24, 0x50	; 80
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>

	// read packetcounter, increase by cycle and write back
	packetcounter = e2p_generic_get_packetcounter() + PACKET_COUNTER_WRITE_CYCLE;
    32c2:	9b 01       	movw	r18, r22
    32c4:	ac 01       	movw	r20, r24
    32c6:	2c 59       	subi	r18, 0x9C	; 156
    32c8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ca:	4f 4f       	sbci	r20, 0xFF	; 255
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	20 93 4d 02 	sts	0x024D, r18
    32d2:	30 93 4e 02 	sts	0x024E, r19
    32d6:	40 93 4f 02 	sts	0x024F, r20
    32da:	50 93 50 02 	sts	0x0250, r21
	return _eeprom_read_IntValue32(bit, length, minval, maxval, NULL);
}

static inline void eeprom_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val)
{
	_eeprom_write_UIntValue(bit, length, val, NULL);
    32de:	00 e0       	ldi	r16, 0x00	; 0
    32e0:	10 e0       	ldi	r17, 0x00	; 0
    32e2:	68 e1       	ldi	r22, 0x18	; 24
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	80 e5       	ldi	r24, 0x50	; 80
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
void _eeprom_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array);

// function wrappers for EEPROM access
static inline uint8_t eeprom_read_UIntValue8(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval)
{
	return (uint8_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 8, NULL);
    32ee:	68 94       	set
    32f0:	cc 24       	eor	r12, r12
    32f2:	c3 f8       	bld	r12, 3
    32f4:	d1 2c       	mov	r13, r1
    32f6:	10 e1       	ldi	r17, 0x10	; 16
    32f8:	e1 2e       	mov	r14, r17
    32fa:	f1 2c       	mov	r15, r1
    32fc:	00 e0       	ldi	r16, 0x00	; 0
    32fe:	10 e0       	ldi	r17, 0x00	; 0
    3300:	21 e0       	ldi	r18, 0x01	; 1
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	68 e0       	ldi	r22, 0x08	; 8
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	92 e0       	ldi	r25, 0x02	; 2
    3310:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    3314:	60 93 41 03 	sts	0x0341, r22
}

static inline uint16_t eeprom_read_UIntValue16(uint16_t bit, uint16_t length, uint32_t minval, uint32_t maxval)
{
	return (uint16_t)_eeprom_read_UIntValue32(bit, length, minval, maxval, 16, NULL);
    3318:	68 94       	set
    331a:	cc 24       	eor	r12, r12
    331c:	c4 f8       	bld	r12, 4
    331e:	d1 2c       	mov	r13, r1
    3320:	ee 24       	eor	r14, r14
    3322:	ea 94       	dec	r14
    3324:	1f e0       	ldi	r17, 0x0F	; 15
    3326:	f1 2e       	mov	r15, r17
    3328:	00 e0       	ldi	r16, 0x00	; 0
    332a:	10 e0       	ldi	r17, 0x00	; 0
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	a9 01       	movw	r20, r18
    3332:	6c e0       	ldi	r22, 0x0C	; 12
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	80 e4       	ldi	r24, 0x40	; 64
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 b6 22 	call	0x456c	; 0x456c <_eeprom_read_UIntValue32>
    333e:	70 93 43 03 	sts	0x0343, r23
    3342:	60 93 42 03 	sts	0x0342, r22
	// read device specific config
	aes_key_count = e2p_basestation_get_aeskeycount();

	device_id = e2p_generic_get_deviceid();

	uart_init();
    3346:	95 d3       	rcall	.+1834   	; 0x3a72 <uart_init>
	UART_PUTS("\r\n");
    3348:	84 e8       	ldi	r24, 0x84	; 132
    334a:	94 e0       	ldi	r25, 0x04	; 4
    334c:	bf d3       	rcall	.+1918   	; 0x3acc <uart_putstr_P>
	UART_PUTF4("smarthomatic Base Station v%u.%u.%u (%08lx)\r\n", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_HASH);
    334e:	1f 92       	push	r1
    3350:	1f 92       	push	r1
    3352:	1f 92       	push	r1
    3354:	1f 92       	push	r1
    3356:	1f 92       	push	r1
    3358:	1f 92       	push	r1
    335a:	1f 92       	push	r1
    335c:	1f 92       	push	r1
    335e:	1f 92       	push	r1
    3360:	1f 92       	push	r1
    3362:	86 e5       	ldi	r24, 0x56	; 86
    3364:	94 e0       	ldi	r25, 0x04	; 4
    3366:	9f 93       	push	r25
    3368:	8f 93       	push	r24
    336a:	08 eb       	ldi	r16, 0xB8	; 184
    336c:	13 e0       	ldi	r17, 0x03	; 3
    336e:	1f 93       	push	r17
    3370:	0f 93       	push	r16
    3372:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3376:	c8 01       	movw	r24, r16
    3378:	9b d3       	rcall	.+1846   	; 0x3ab0 <uart_putstr>
	UART_PUTS("(c) 2012..2014 Uwe Freese, www.smarthomatic.org\r\n");
    337a:	84 e2       	ldi	r24, 0x24	; 36
    337c:	94 e0       	ldi	r25, 0x04	; 4
    337e:	a6 d3       	rcall	.+1868   	; 0x3acc <uart_putstr_P>
	UART_PUTF("Device ID: %u\r\n", device_id);
    3380:	80 91 43 03 	lds	r24, 0x0343
    3384:	8f 93       	push	r24
    3386:	80 91 42 03 	lds	r24, 0x0342
    338a:	8f 93       	push	r24
    338c:	84 e1       	ldi	r24, 0x14	; 20
    338e:	94 e0       	ldi	r25, 0x04	; 4
    3390:	9f 93       	push	r25
    3392:	8f 93       	push	r24
    3394:	1f 93       	push	r17
    3396:	0f 93       	push	r16
    3398:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    339c:	c8 01       	movw	r24, r16
    339e:	88 d3       	rcall	.+1808   	; 0x3ab0 <uart_putstr>
	UART_PUTF("Packet counter: %lu\r\n", packetcounter);
    33a0:	80 91 50 02 	lds	r24, 0x0250
    33a4:	8f 93       	push	r24
    33a6:	80 91 4f 02 	lds	r24, 0x024F
    33aa:	8f 93       	push	r24
    33ac:	80 91 4e 02 	lds	r24, 0x024E
    33b0:	8f 93       	push	r24
    33b2:	80 91 4d 02 	lds	r24, 0x024D
    33b6:	8f 93       	push	r24
    33b8:	8e ef       	ldi	r24, 0xFE	; 254
    33ba:	93 e0       	ldi	r25, 0x03	; 3
    33bc:	9f 93       	push	r25
    33be:	8f 93       	push	r24
    33c0:	1f 93       	push	r17
    33c2:	0f 93       	push	r16
    33c4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    33c8:	c8 01       	movw	r24, r16
    33ca:	72 d3       	rcall	.+1764   	; 0x3ab0 <uart_putstr>
	UART_PUTF("AES key count: %u\r\n", aes_key_count);
    33cc:	80 91 41 03 	lds	r24, 0x0341
    33d0:	1f 92       	push	r1
    33d2:	8f 93       	push	r24
    33d4:	8a ee       	ldi	r24, 0xEA	; 234
    33d6:	93 e0       	ldi	r25, 0x03	; 3
    33d8:	9f 93       	push	r25
    33da:	8f 93       	push	r24
    33dc:	1f 93       	push	r17
    33de:	0f 93       	push	r16
    33e0:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	c8 01       	movw	r24, r16
    33f0:	5f d3       	rcall	.+1726   	; 0x3ab0 <uart_putstr>
	UART_PUTS("Waiting for incoming data. Press h for help.\r\n\r\n");
    33f2:	89 eb       	ldi	r24, 0xB9	; 185
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	6a d3       	rcall	.+1748   	; 0x3acc <uart_putstr_P>

	led_blink(500, 500, 3);
    33f8:	43 e0       	ldi	r20, 0x03	; 3
    33fa:	64 ef       	ldi	r22, 0xF4	; 244
    33fc:	71 e0       	ldi	r23, 0x01	; 1
    33fe:	84 ef       	ldi	r24, 0xF4	; 244
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	4f d6       	rcall	.+3230   	; 0x40a2 <led_blink>

	rfm12_init();
    3404:	0e 94 7f 11 	call	0x22fe	; 0x22fe <rfm12_init>
	sei();
    3408:	78 94       	sei

int main(void)
{
	uint8_t aes_key_nr;
	uint8_t loop = 0;
	uint8_t loop2 = 0;
    340a:	1a 82       	std	Y+2, r1	; 0x02
}

int main(void)
{
	uint8_t aes_key_nr;
	uint8_t loop = 0;
    340c:	61 2c       	mov	r6, r1
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void)
	{
		return ctrl.rf_buffer_out->status;
    340e:	0f 2e       	mov	r0, r31
    3410:	fa e9       	ldi	r31, 0x9A	; 154
    3412:	2f 2e       	mov	r2, r31
    3414:	f2 e0       	ldi	r31, 0x02	; 2
    3416:	3f 2e       	mov	r3, r31
    3418:	f0 2d       	mov	r31, r0
			}
			else // try to decrypt with all keys stored in EEPROM
			{
				bool crcok = false;

				for (aes_key_nr = 0; aes_key_nr < aes_key_count ; aes_key_nr++)
    341a:	51 2c       	mov	r5, r1
    341c:	d1 01       	movw	r26, r2
    341e:	ed 91       	ld	r30, X+
    3420:	fc 91       	ld	r31, X
    3422:	80 81       	ld	r24, Z
	while(1);
	*/

	while (42)
	{
		if (rfm12_rx_status() == STATUS_COMPLETE)
    3424:	82 30       	cpi	r24, 0x02	; 2
    3426:	09 f0       	breq	.+2      	; 0x342a <main+0x1ba>
    3428:	83 c0       	rjmp	.+262    	; 0x3530 <main+0x2c0>
	/** \returns The length of the data inside the buffer
	* \see rfm12_rx_status(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_len(void)
	{
		return ctrl.rf_buffer_out->len;
    342a:	01 81       	ldd	r16, Z+1	; 0x01
		{
			uint8_t len = rfm12_rx_len();
			
			if ((len == 0) || (len % 16 != 0))
    342c:	00 23       	and	r16, r16
    342e:	41 f0       	breq	.+16     	; 0x3440 <main+0x1d0>
    3430:	80 2f       	mov	r24, r16
    3432:	8f 70       	andi	r24, 0x0F	; 15
    3434:	29 f4       	brne	.+10     	; 0x3440 <main+0x1d0>
			}
			else // try to decrypt with all keys stored in EEPROM
			{
				bool crcok = false;

				for (aes_key_nr = 0; aes_key_nr < aes_key_count ; aes_key_nr++)
    3436:	80 91 41 03 	lds	r24, 0x0341
    343a:	81 11       	cpse	r24, r1
    343c:	1b c0       	rjmp	.+54     	; 0x3474 <main+0x204>
    343e:	cd c2       	rjmp	.+1434   	; 0x39da <main+0x76a>
		{
			uint8_t len = rfm12_rx_len();
			
			if ((len == 0) || (len % 16 != 0))
			{
				UART_PUTF("Received garbage (%u bytes not multiple of 16): ", len);
    3440:	1f 92       	push	r1
    3442:	0f 93       	push	r16
    3444:	a8 e8       	ldi	r26, 0x88	; 136
    3446:	b3 e0       	ldi	r27, 0x03	; 3
    3448:	bf 93       	push	r27
    344a:	af 93       	push	r26
    344c:	a8 eb       	ldi	r26, 0xB8	; 184
    344e:	b3 e0       	ldi	r27, 0x03	; 3
    3450:	bf 93       	push	r27
    3452:	af 93       	push	r26
    3454:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3458:	88 eb       	ldi	r24, 0xB8	; 184
    345a:	93 e0       	ldi	r25, 0x03	; 3
    345c:	29 d3       	rcall	.+1618   	; 0x3ab0 <uart_putstr>
				print_bytearray(bufx, len);
    345e:	60 2f       	mov	r22, r16
    3460:	83 e5       	ldi	r24, 0x53	; 83
    3462:	92 e0       	ldi	r25, 0x02	; 2
    3464:	6f d3       	rcall	.+1758   	; 0x3b44 <print_bytearray>
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	5c c0       	rjmp	.+184    	; 0x352c <main+0x2bc>
			}
			else // try to decrypt with all keys stored in EEPROM
			{
				bool crcok = false;

				for (aes_key_nr = 0; aes_key_nr < aes_key_count ; aes_key_nr++)
    3474:	15 2d       	mov	r17, r5
				{
					memcpy(bufx, rfm12_rx_buffer(), len);
    3476:	80 2e       	mov	r8, r16
    3478:	91 2c       	mov	r9, r1
}

// Function to check CRC value against calculated one (after reception).
static inline bool pkg_header_check_crc32(uint8_t packet_size_bytes)
{
  return getBuf32(0) == crc32(bufx + 4, packet_size_bytes - 4);
    347a:	0f 2e       	mov	r0, r31
    347c:	fc ef       	ldi	r31, 0xFC	; 252
    347e:	bf 2e       	mov	r11, r31
    3480:	f0 2d       	mov	r31, r0
    3482:	b0 0e       	add	r11, r16
    3484:	d1 01       	movw	r26, r2
    3486:	6d 91       	ld	r22, X+
    3488:	7c 91       	ld	r23, X
    348a:	6c 5f       	subi	r22, 0xFC	; 252
    348c:	7f 4f       	sbci	r23, 0xFF	; 255
    348e:	a4 01       	movw	r20, r8
    3490:	83 e5       	ldi	r24, 0x53	; 83
    3492:	92 e0       	ldi	r25, 0x02	; 2
    3494:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <memcpy>
    3498:	61 2f       	mov	r22, r17
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	76 2f       	mov	r23, r22
    349e:	66 27       	eor	r22, r22
    34a0:	68 5f       	subi	r22, 0xF8	; 248
    34a2:	7d 4f       	sbci	r23, 0xFD	; 253
    34a4:	76 95       	lsr	r23
    34a6:	67 95       	ror	r22
    34a8:	76 95       	lsr	r23
    34aa:	67 95       	ror	r22
    34ac:	76 95       	lsr	r23
    34ae:	67 95       	ror	r22
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	89 ef       	ldi	r24, 0xF9	; 249
    34b6:	93 e0       	ldi	r25, 0x03	; 3
    34b8:	0e 94 4d 28 	call	0x509a	; 0x509a <__eerd_block_m328>
				
					e2p_basestation_get_aeskey(aes_key_nr, aes_key);
					//UART_PUTS("Trying AES key 2 ");
					//print_bytearray((uint8_t *)aes_key, 32);

					aes256_decrypt_cbc(bufx, len);
    34bc:	60 2f       	mov	r22, r16
    34be:	83 e5       	ldi	r24, 0x53	; 83
    34c0:	92 e0       	ldi	r25, 0x02	; 2
    34c2:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <aes256_decrypt_cbc>
    34c6:	85 2d       	mov	r24, r5
    34c8:	71 d5       	rcall	.+2786   	; 0x3fac <getBuf32>
    34ca:	6b 01       	movw	r12, r22
    34cc:	7c 01       	movw	r14, r24
    34ce:	6b 2d       	mov	r22, r11
    34d0:	87 e5       	ldi	r24, 0x57	; 87
    34d2:	92 e0       	ldi	r25, 0x02	; 2
    34d4:	7d d5       	rcall	.+2810   	; 0x3fd0 <crc32>
					//UART_PUTS("Decrypted bytes: ");
					//print_bytearray(bufx, len);
					
					crcok = pkg_header_check_crc32(len);
					
					if (crcok)
    34d6:	c6 16       	cp	r12, r22
    34d8:	d7 06       	cpc	r13, r23
    34da:	e8 06       	cpc	r14, r24
    34dc:	f9 06       	cpc	r15, r25
    34de:	e1 f4       	brne	.+56     	; 0x3518 <main+0x2a8>
					{
						//UART_PUTS("CRC correct, AES key found!\r\n");
						UART_PUTF("Received (AES key %u): ", aes_key_nr);
    34e0:	1f 92       	push	r1
    34e2:	1f 93       	push	r17
    34e4:	a0 e7       	ldi	r26, 0x70	; 112
    34e6:	b3 e0       	ldi	r27, 0x03	; 3
    34e8:	bf 93       	push	r27
    34ea:	af 93       	push	r26
    34ec:	a8 eb       	ldi	r26, 0xB8	; 184
    34ee:	b3 e0       	ldi	r27, 0x03	; 3
    34f0:	bf 93       	push	r27
    34f2:	af 93       	push	r26
    34f4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    34f8:	88 eb       	ldi	r24, 0xB8	; 184
    34fa:	93 e0       	ldi	r25, 0x03	; 3
    34fc:	d9 d2       	rcall	.+1458   	; 0x3ab0 <uart_putstr>
						print_bytearray(bufx, len);
    34fe:	60 2f       	mov	r22, r16
    3500:	83 e5       	ldi	r24, 0x53	; 83
    3502:	92 e0       	ldi	r25, 0x02	; 2
    3504:	1f d3       	rcall	.+1598   	; 0x3b44 <print_bytearray>
						
						decode_data(len);
    3506:	80 2f       	mov	r24, r16
    3508:	8f d8       	rcall	.-3810   	; 0x2628 <decode_data>
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	07 c0       	rjmp	.+14     	; 0x3526 <main+0x2b6>
			}
			else // try to decrypt with all keys stored in EEPROM
			{
				bool crcok = false;

				for (aes_key_nr = 0; aes_key_nr < aes_key_count ; aes_key_nr++)
    3518:	1f 5f       	subi	r17, 0xFF	; 255
    351a:	80 91 41 03 	lds	r24, 0x0341
    351e:	18 17       	cp	r17, r24
    3520:	08 f4       	brcc	.+2      	; 0x3524 <main+0x2b4>
    3522:	b0 cf       	rjmp	.-160    	; 0x3484 <main+0x214>
    3524:	5a c2       	rjmp	.+1204   	; 0x39da <main+0x76a>
					UART_PUTS("Received garbage (CRC wrong after decryption): ");
					memcpy(bufx, rfm12_rx_buffer(), len);
					print_bytearray(bufx, len);
				}
				
				UART_PUTS("\r\n");
    3526:	8d e3       	ldi	r24, 0x3D	; 61
    3528:	93 e0       	ldi	r25, 0x03	; 3
    352a:	d0 d2       	rcall	.+1440   	; 0x3acc <uart_putstr_P>

			//uart_hexdump((char *)bufcontents, rfm12_rx_len());
			//UART_PUTS("\r\n");

			// tell the implementation that the buffer can be reused for the next data.
			rfm12_rx_clear();
    352c:	0e 94 67 11 	call	0x22ce	; 0x22ce <rfm12_rx_clear>
		}

		// send data, if waiting in send buffer
		if (send_data_avail)
    3530:	80 91 17 01 	lds	r24, 0x0117
    3534:	88 23       	and	r24, r24
    3536:	09 f4       	brne	.+2      	; 0x353a <main+0x2ca>
    3538:	02 c2       	rjmp	.+1028   	; 0x393e <main+0x6ce>
		{
			uint8_t i;
			
			// set AES key nr
			aes_key_nr = hex_to_uint8((uint8_t *)cmdbuf, 1);
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	80 e8       	ldi	r24, 0x80	; 128
    353e:	93 e0       	ldi	r25, 0x03	; 3
    3540:	22 d5       	rcall	.+2628   	; 0x3f86 <hex_to_uint8>
    3542:	89 83       	std	Y+1, r24	; 0x01
			//UART_PUTF("AES KEY = %u\r\n", aes_key_nr);

			// init packet buffer
			memset(&bufx[0], 0, sizeof(bufx));
    3544:	e3 e5       	ldi	r30, 0x53	; 83
    3546:	f2 e0       	ldi	r31, 0x02	; 2
    3548:	df 01       	movw	r26, r30
    354a:	21 e4       	ldi	r18, 0x41	; 65
    354c:	1d 92       	st	X+, r1
    354e:	2a 95       	dec	r18
    3550:	e9 f7       	brne	.-6      	; 0x354c <main+0x2dc>

			// set message type
			uint8_t message_type = hex_to_uint8((uint8_t *)cmdbuf, 3);
    3552:	63 e0       	ldi	r22, 0x03	; 3
    3554:	80 e8       	ldi	r24, 0x80	; 128
    3556:	93 e0       	ldi	r25, 0x03	; 3
    3558:	16 d5       	rcall	.+2604   	; 0x3f86 <hex_to_uint8>
    355a:	78 2e       	mov	r7, r24

// Set MessageType (EnumValue)
// Offset: 68, length bits 4
static inline void pkg_header_set_messagetype(MessageTypeEnum val)
{
  array_write_UIntValue(68, 4, val, bufx);
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	50 e0       	ldi	r21, 0x00	; 0
	return _eeprom_read_IntValue32(bit, length, minval, maxval, array);
}

static inline void array_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array)
{
	_eeprom_write_UIntValue(bit, length, val, array);
    3564:	03 e5       	ldi	r16, 0x53	; 83
    3566:	12 e0       	ldi	r17, 0x02	; 2
    3568:	64 e0       	ldi	r22, 0x04	; 4
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	84 e4       	ldi	r24, 0x44	; 68
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
			pkg_header_set_messagetype(message_type);
			pkg_header_adjust_offset();
    3574:	08 d8       	rcall	.-4080   	; 0x2586 <pkg_header_adjust_offset>
			UART_PUTS("sKK0ASSSSPPPPPPEEGGMMDD...AckStatus\r\n");
			*/
			
			// set header extension fields in bufx to the values given as hex string in the user input
			uint16_t receiverid = 0;
			switch (message_type)
    3576:	88 e0       	ldi	r24, 0x08	; 8
    3578:	78 16       	cp	r7, r24
    357a:	09 f4       	brne	.+2      	; 0x357e <main+0x30e>
    357c:	5a c0       	rjmp	.+180    	; 0x3632 <main+0x3c2>
    357e:	87 15       	cp	r24, r7
    3580:	20 f0       	brcs	.+8      	; 0x358a <main+0x31a>
    3582:	92 e0       	ldi	r25, 0x02	; 2
    3584:	97 15       	cp	r25, r7
    3586:	50 f4       	brcc	.+20     	; 0x359c <main+0x32c>
    3588:	0d c1       	rjmp	.+538    	; 0x37a4 <main+0x534>
    358a:	a9 e0       	ldi	r26, 0x09	; 9
    358c:	7a 16       	cp	r7, r26
    358e:	09 f4       	brne	.+2      	; 0x3592 <main+0x322>
    3590:	6a c0       	rjmp	.+212    	; 0x3666 <main+0x3f6>
    3592:	ba e0       	ldi	r27, 0x0A	; 10
    3594:	7b 16       	cp	r7, r27
    3596:	09 f4       	brne	.+2      	; 0x359a <main+0x32a>
    3598:	ea c0       	rjmp	.+468    	; 0x376e <main+0x4fe>
    359a:	04 c1       	rjmp	.+520    	; 0x37a4 <main+0x534>
uint8_t hex_to_byte(char c);
uint8_t hex_to_uint8(uint8_t * buf, uint8_t offset);

static inline uint16_t hex_to_uint16(uint8_t * buf, uint8_t offset)
{
	return ((uint16_t)hex_to_uint8(buf, offset) << 8) + hex_to_uint8(buf, offset + 2);
    359c:	65 e0       	ldi	r22, 0x05	; 5
    359e:	80 e8       	ldi	r24, 0x80	; 128
    35a0:	93 e0       	ldi	r25, 0x03	; 3
    35a2:	f1 d4       	rcall	.+2530   	; 0x3f86 <hex_to_uint8>
    35a4:	e8 2e       	mov	r14, r24
    35a6:	67 e0       	ldi	r22, 0x07	; 7
    35a8:	80 e8       	ldi	r24, 0x80	; 128
    35aa:	93 e0       	ldi	r25, 0x03	; 3
    35ac:	ec d4       	rcall	.+2520   	; 0x3f86 <hex_to_uint8>
    35ae:	f1 2c       	mov	r15, r1
    35b0:	fe 2c       	mov	r15, r14
    35b2:	ee 24       	eor	r14, r14
    35b4:	e8 0e       	add	r14, r24
    35b6:	f1 1c       	adc	r15, r1
			{
				case MESSAGETYPE_GET:
				case MESSAGETYPE_SET:
				case MESSAGETYPE_SETGET:
					receiverid = hex_to_uint16((uint8_t *)cmdbuf, 5);
					pkg_headerext_common_set_receiverid(receiverid);
    35b8:	97 01       	movw	r18, r14
    35ba:	40 e0       	ldi	r20, 0x00	; 0
    35bc:	50 e0       	ldi	r21, 0x00	; 0
// Set ReceiverID (UIntValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_receiverid(uint32_t val) __attribute__ ((unused));
static void pkg_headerext_common_set_receiverid(uint32_t val)
{
  switch (__MESSAGETYPE)
    35be:	80 91 52 02 	lds	r24, 0x0252
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	61 f0       	breq	.+24     	; 0x35de <main+0x36e>
    35c6:	a0 f0       	brcs	.+40     	; 0x35f0 <main+0x380>
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	d1 f4       	brne	.+52     	; 0x3600 <main+0x390>
    35cc:	03 e5       	ldi	r16, 0x53	; 83
    35ce:	12 e0       	ldi	r17, 0x02	; 2
    35d0:	6c e0       	ldi	r22, 0x0C	; 12
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	88 e4       	ldi	r24, 0x48	; 72
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    35dc:	11 c0       	rjmp	.+34     	; 0x3600 <main+0x390>
    35de:	03 e5       	ldi	r16, 0x53	; 83
    35e0:	12 e0       	ldi	r17, 0x02	; 2
    35e2:	6c e0       	ldi	r22, 0x0C	; 12
    35e4:	70 e0       	ldi	r23, 0x00	; 0
    35e6:	88 e4       	ldi	r24, 0x48	; 72
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    35ee:	08 c0       	rjmp	.+16     	; 0x3600 <main+0x390>
    35f0:	03 e5       	ldi	r16, 0x53	; 83
    35f2:	12 e0       	ldi	r17, 0x02	; 2
    35f4:	6c e0       	ldi	r22, 0x0C	; 12
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	88 e4       	ldi	r24, 0x48	; 72
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
					pkg_headerext_common_set_messagegroupid(hex_to_uint8((uint8_t *)cmdbuf, 9));
    3600:	69 e0       	ldi	r22, 0x09	; 9
    3602:	80 e8       	ldi	r24, 0x80	; 128
    3604:	93 e0       	ldi	r25, 0x03	; 3
    3606:	bf d4       	rcall	.+2430   	; 0x3f86 <hex_to_uint8>
    3608:	68 2f       	mov	r22, r24
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 31 12 	call	0x2462	; 0x2462 <pkg_headerext_common_set_messagegroupid>
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 11));
    3614:	6b e0       	ldi	r22, 0x0B	; 11
    3616:	80 e8       	ldi	r24, 0x80	; 128
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	b5 d4       	rcall	.+2410   	; 0x3f86 <hex_to_uint8>
    361c:	68 2f       	mov	r22, r24
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <pkg_headerext_common_set_messageid>
					string_offset_data = 12;
    3628:	0f 2e       	mov	r0, r31
    362a:	fc e0       	ldi	r31, 0x0C	; 12
    362c:	af 2e       	mov	r10, r31
    362e:	f0 2d       	mov	r31, r0
					break;
    3630:	bc c0       	rjmp	.+376    	; 0x37aa <main+0x53a>
				case MESSAGETYPE_STATUS:
					pkg_headerext_common_set_messagegroupid(hex_to_uint8((uint8_t *)cmdbuf, 5));
    3632:	65 e0       	ldi	r22, 0x05	; 5
    3634:	80 e8       	ldi	r24, 0x80	; 128
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	a6 d4       	rcall	.+2380   	; 0x3f86 <hex_to_uint8>
    363a:	68 2f       	mov	r22, r24
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 31 12 	call	0x2462	; 0x2462 <pkg_headerext_common_set_messagegroupid>
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 7));
    3646:	67 e0       	ldi	r22, 0x07	; 7
    3648:	80 e8       	ldi	r24, 0x80	; 128
    364a:	93 e0       	ldi	r25, 0x03	; 3
    364c:	9c d4       	rcall	.+2360   	; 0x3f86 <hex_to_uint8>
    364e:	68 2f       	mov	r22, r24
    3650:	70 e0       	ldi	r23, 0x00	; 0
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <pkg_headerext_common_set_messageid>
			UART_PUTS("sKK09SSSSPPPPPPEE.........Ack\r\n");
			UART_PUTS("sKK0ASSSSPPPPPPEEGGMMDD...AckStatus\r\n");
			*/
			
			// set header extension fields in bufx to the values given as hex string in the user input
			uint16_t receiverid = 0;
    365a:	e1 2c       	mov	r14, r1
    365c:	f1 2c       	mov	r15, r1
					string_offset_data = 12;
					break;
				case MESSAGETYPE_STATUS:
					pkg_headerext_common_set_messagegroupid(hex_to_uint8((uint8_t *)cmdbuf, 5));
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 7));
					string_offset_data = 8;
    365e:	68 94       	set
    3660:	aa 24       	eor	r10, r10
    3662:	a3 f8       	bld	r10, 3
    3664:	a9 c0       	rjmp	.+338    	; 0x37b8 <main+0x548>
    3666:	65 e0       	ldi	r22, 0x05	; 5
    3668:	80 e8       	ldi	r24, 0x80	; 128
    366a:	93 e0       	ldi	r25, 0x03	; 3
    366c:	8c d4       	rcall	.+2328   	; 0x3f86 <hex_to_uint8>
    366e:	18 2f       	mov	r17, r24
    3670:	67 e0       	ldi	r22, 0x07	; 7
    3672:	80 e8       	ldi	r24, 0x80	; 128
    3674:	93 e0       	ldi	r25, 0x03	; 3
    3676:	87 d4       	rcall	.+2318   	; 0x3f86 <hex_to_uint8>
    3678:	21 2f       	mov	r18, r17
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	32 2f       	mov	r19, r18
    367e:	22 27       	eor	r18, r18
    3680:	28 0f       	add	r18, r24
    3682:	31 1d       	adc	r19, r1
					break;
				case MESSAGETYPE_ACK:
					pkg_headerext_common_set_acksenderid(hex_to_uint16((uint8_t *)cmdbuf, 5));
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	50 e0       	ldi	r21, 0x00	; 0
// Set AckSenderID (UIntValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_acksenderid(uint32_t val) __attribute__ ((unused));
static void pkg_headerext_common_set_acksenderid(uint32_t val)
{
  switch (__MESSAGETYPE)
    3688:	80 91 52 02 	lds	r24, 0x0252
    368c:	89 30       	cpi	r24, 0x09	; 9
    368e:	59 f0       	breq	.+22     	; 0x36a6 <main+0x436>
    3690:	8a 30       	cpi	r24, 0x0A	; 10
    3692:	89 f4       	brne	.+34     	; 0x36b6 <main+0x446>
    3694:	03 e5       	ldi	r16, 0x53	; 83
    3696:	12 e0       	ldi	r17, 0x02	; 2
    3698:	6c e0       	ldi	r22, 0x0C	; 12
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	88 e4       	ldi	r24, 0x48	; 72
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
    36a4:	08 c0       	rjmp	.+16     	; 0x36b6 <main+0x446>
    36a6:	03 e5       	ldi	r16, 0x53	; 83
    36a8:	12 e0       	ldi	r17, 0x02	; 2
    36aa:	6c e0       	ldi	r22, 0x0C	; 12
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	88 e4       	ldi	r24, 0x48	; 72
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 85 23 	call	0x470a	; 0x470a <_eeprom_write_UIntValue>
}

static inline uint32_t hex_to_uint24(uint8_t * buf, uint8_t offset)
{
	return ((uint32_t)hex_to_uint8(buf, offset) << 16) + ((uint32_t)hex_to_uint8(buf, offset + 2) << 8) + hex_to_uint8(buf, offset + 4);
    36b6:	69 e0       	ldi	r22, 0x09	; 9
    36b8:	80 e8       	ldi	r24, 0x80	; 128
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	64 d4       	rcall	.+2248   	; 0x3f86 <hex_to_uint8>
    36be:	c8 2e       	mov	r12, r24
    36c0:	6b e0       	ldi	r22, 0x0B	; 11
    36c2:	80 e8       	ldi	r24, 0x80	; 128
    36c4:	93 e0       	ldi	r25, 0x03	; 3
    36c6:	5f d4       	rcall	.+2238   	; 0x3f86 <hex_to_uint8>
    36c8:	d1 2c       	mov	r13, r1
    36ca:	e1 2c       	mov	r14, r1
    36cc:	f1 2c       	mov	r15, r1
    36ce:	76 01       	movw	r14, r12
    36d0:	dd 24       	eor	r13, r13
    36d2:	cc 24       	eor	r12, r12
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	a0 e0       	ldi	r26, 0x00	; 0
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ba 2f       	mov	r27, r26
    36dc:	a9 2f       	mov	r26, r25
    36de:	98 2f       	mov	r25, r24
    36e0:	88 27       	eor	r24, r24
    36e2:	c8 0e       	add	r12, r24
    36e4:	d9 1e       	adc	r13, r25
    36e6:	ea 1e       	adc	r14, r26
    36e8:	fb 1e       	adc	r15, r27
    36ea:	6d e0       	ldi	r22, 0x0D	; 13
    36ec:	80 e8       	ldi	r24, 0x80	; 128
    36ee:	93 e0       	ldi	r25, 0x03	; 3
    36f0:	4a d4       	rcall	.+2196   	; 0x3f86 <hex_to_uint8>
    36f2:	a7 01       	movw	r20, r14
    36f4:	96 01       	movw	r18, r12
    36f6:	28 0f       	add	r18, r24
    36f8:	31 1d       	adc	r19, r1
    36fa:	41 1d       	adc	r20, r1
    36fc:	51 1d       	adc	r21, r1
// Set AckPacketCounter (UIntValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_ackpacketcounter(uint32_t val) __attribute__ ((unused));
static void pkg_headerext_common_set_ackpacketcounter(uint32_t val)
{
  switch (__MESSAGETYPE)
    36fe:	80 91 52 02 	lds	r24, 0x0252
    3702:	89 30       	cpi	r24, 0x09	; 9
    3704:	51 f0       	breq	.+20     	; 0x371a <main+0x4aa>
    3706:	8a 30       	cpi	r24, 0x0A	; 10
    3708:	79 f4       	brne	.+30     	; 0x3728 <main+0x4b8>
    370a:	03 e5       	ldi	r16, 0x53	; 83
    370c:	12 e0       	ldi	r17, 0x02	; 2
    370e:	68 e1       	ldi	r22, 0x18	; 24
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	84 e5       	ldi	r24, 0x54	; 84
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	f9 d7       	rcall	.+4082   	; 0x470a <_eeprom_write_UIntValue>
    3718:	07 c0       	rjmp	.+14     	; 0x3728 <main+0x4b8>
    371a:	03 e5       	ldi	r16, 0x53	; 83
    371c:	12 e0       	ldi	r17, 0x02	; 2
    371e:	68 e1       	ldi	r22, 0x18	; 24
    3720:	70 e0       	ldi	r23, 0x00	; 0
    3722:	84 e5       	ldi	r24, 0x54	; 84
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	f1 d7       	rcall	.+4066   	; 0x470a <_eeprom_write_UIntValue>
					pkg_headerext_common_set_ackpacketcounter(hex_to_uint24((uint8_t *)cmdbuf, 9));
					pkg_headerext_common_set_error(hex_to_uint8((uint8_t *)cmdbuf, 15));
    3728:	6f e0       	ldi	r22, 0x0F	; 15
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	93 e0       	ldi	r25, 0x03	; 3
    372e:	2b d4       	rcall	.+2134   	; 0x3f86 <hex_to_uint8>
    3730:	21 e0       	ldi	r18, 0x01	; 1
    3732:	81 11       	cpse	r24, r1
    3734:	01 c0       	rjmp	.+2      	; 0x3738 <main+0x4c8>
    3736:	25 2d       	mov	r18, r5
// Set Error (BoolValue)
// Same function for all MessageTypes!
static void pkg_headerext_common_set_error(bool val) __attribute__ ((unused));
static void pkg_headerext_common_set_error(bool val)
{
  switch (__MESSAGETYPE)
    3738:	80 91 52 02 	lds	r24, 0x0252
    373c:	89 30       	cpi	r24, 0x09	; 9
    373e:	69 f0       	breq	.+26     	; 0x375a <main+0x4ea>
    3740:	8a 30       	cpi	r24, 0x0A	; 10
    3742:	a9 f4       	brne	.+42     	; 0x376e <main+0x4fe>

// Set Error (BoolValue)
// Offset: 108, length bits 1
static inline void pkg_headerext_ackstatus_set_error(bool val)
{
  array_write_UIntValue(108, 1, val ? 1 : 0, bufx);
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e0       	ldi	r20, 0x00	; 0
    3748:	50 e0       	ldi	r21, 0x00	; 0
    374a:	03 e5       	ldi	r16, 0x53	; 83
    374c:	12 e0       	ldi	r17, 0x02	; 2
    374e:	61 e0       	ldi	r22, 0x01	; 1
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	8c e6       	ldi	r24, 0x6C	; 108
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	d9 d7       	rcall	.+4018   	; 0x470a <_eeprom_write_UIntValue>
    3758:	0a c0       	rjmp	.+20     	; 0x376e <main+0x4fe>

// Set Error (BoolValue)
// Offset: 108, length bits 1
static inline void pkg_headerext_ack_set_error(bool val)
{
  array_write_UIntValue(108, 1, val ? 1 : 0, bufx);
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	50 e0       	ldi	r21, 0x00	; 0
    3760:	03 e5       	ldi	r16, 0x53	; 83
    3762:	12 e0       	ldi	r17, 0x02	; 2
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	8c e6       	ldi	r24, 0x6C	; 108
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	ce d7       	rcall	.+3996   	; 0x470a <_eeprom_write_UIntValue>
					// fallthrough!
				case MESSAGETYPE_ACKSTATUS:
					pkg_headerext_common_set_messagegroupid(hex_to_uint8((uint8_t *)cmdbuf, 17));
    376e:	61 e1       	ldi	r22, 0x11	; 17
    3770:	80 e8       	ldi	r24, 0x80	; 128
    3772:	93 e0       	ldi	r25, 0x03	; 3
    3774:	08 d4       	rcall	.+2064   	; 0x3f86 <hex_to_uint8>
    3776:	68 2f       	mov	r22, r24
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0e 94 31 12 	call	0x2462	; 0x2462 <pkg_headerext_common_set_messagegroupid>
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 19));
    3782:	63 e1       	ldi	r22, 0x13	; 19
    3784:	80 e8       	ldi	r24, 0x80	; 128
    3786:	93 e0       	ldi	r25, 0x03	; 3
    3788:	fe d3       	rcall	.+2044   	; 0x3f86 <hex_to_uint8>
    378a:	68 2f       	mov	r22, r24
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <pkg_headerext_common_set_messageid>
			UART_PUTS("sKK09SSSSPPPPPPEE.........Ack\r\n");
			UART_PUTS("sKK0ASSSSPPPPPPEEGGMMDD...AckStatus\r\n");
			*/
			
			// set header extension fields in bufx to the values given as hex string in the user input
			uint16_t receiverid = 0;
    3796:	e1 2c       	mov	r14, r1
    3798:	f1 2c       	mov	r15, r1
					pkg_headerext_common_set_error(hex_to_uint8((uint8_t *)cmdbuf, 15));
					// fallthrough!
				case MESSAGETYPE_ACKSTATUS:
					pkg_headerext_common_set_messagegroupid(hex_to_uint8((uint8_t *)cmdbuf, 17));
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 19));
					string_offset_data = 22;
    379a:	0f 2e       	mov	r0, r31
    379c:	f6 e1       	ldi	r31, 0x16	; 22
    379e:	af 2e       	mov	r10, r31
    37a0:	f0 2d       	mov	r31, r0
					break;
    37a2:	03 c0       	rjmp	.+6      	; 0x37aa <main+0x53a>
			UART_PUTS("sKK09SSSSPPPPPPEE.........Ack\r\n");
			UART_PUTS("sKK0ASSSSPPPPPPEEGGMMDD...AckStatus\r\n");
			*/
			
			// set header extension fields in bufx to the values given as hex string in the user input
			uint16_t receiverid = 0;
    37a4:	e1 2c       	mov	r14, r1
    37a6:	f1 2c       	mov	r15, r1
			uint8_t message_type = hex_to_uint8((uint8_t *)cmdbuf, 3);
			pkg_header_set_messagetype(message_type);
			pkg_header_adjust_offset();
			//UART_PUTF("MessageType = %u\r\n", message_type);

			uint8_t string_offset_data = 0;
    37a8:	a5 2c       	mov	r10, r5
			}

			uint8_t messagedata_len_raw = 0;

			// copy message data, which exists in all packets except in Get and Ack packets
			if ((message_type != MESSAGETYPE_GET) && (message_type != MESSAGETYPE_ACK))
    37aa:	77 20       	and	r7, r7
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <main+0x540>
    37ae:	5b c0       	rjmp	.+182    	; 0x3866 <main+0x5f6>
    37b0:	e9 e0       	ldi	r30, 0x09	; 9
    37b2:	7e 16       	cp	r7, r30
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <main+0x548>
    37b6:	59 c0       	rjmp	.+178    	; 0x386a <main+0x5fa>
			{
				messagedata_len_raw = (strlen(cmdbuf) - 1 - string_offset_data) / 2;
    37b8:	e0 e8       	ldi	r30, 0x80	; 128
    37ba:	f3 e0       	ldi	r31, 0x03	; 3
    37bc:	01 90       	ld	r0, Z+
    37be:	00 20       	and	r0, r0
    37c0:	e9 f7       	brne	.-6      	; 0x37bc <main+0x54c>
    37c2:	cf 01       	movw	r24, r30
    37c4:	82 58       	subi	r24, 0x82	; 130
    37c6:	93 40       	sbci	r25, 0x03	; 3
    37c8:	6c 01       	movw	r12, r24
    37ca:	ca 18       	sub	r12, r10
    37cc:	d1 08       	sbc	r13, r1
    37ce:	d6 94       	lsr	r13
    37d0:	c7 94       	ror	r12
    37d2:	8c 2c       	mov	r8, r12
				uint8_t messagedata_len_trunc = 0;
				//UART_PUTF("User entered %u bytes MessageData.\r\n", messagedata_len_raw);

				// copy message data, using __HEADEROFFSETBITS value and string_offset_data
				for (i = 0; i < messagedata_len_raw; i++)
    37d4:	cc 20       	and	r12, r12
    37d6:	09 f4       	brne	.+2      	; 0x37da <main+0x56a>
    37d8:	49 c0       	rjmp	.+146    	; 0x386c <main+0x5fc>
    37da:	a3 94       	inc	r10
    37dc:	00 e0       	ldi	r16, 0x00	; 0
    37de:	10 e0       	ldi	r17, 0x00	; 0

			// copy message data, which exists in all packets except in Get and Ack packets
			if ((message_type != MESSAGETYPE_GET) && (message_type != MESSAGETYPE_ACK))
			{
				messagedata_len_raw = (strlen(cmdbuf) - 1 - string_offset_data) / 2;
				uint8_t messagedata_len_trunc = 0;
    37e0:	45 2c       	mov	r4, r5
				//UART_PUTF("User entered %u bytes MessageData.\r\n", messagedata_len_raw);

				// copy message data, using __HEADEROFFSETBITS value and string_offset_data
				for (i = 0; i < messagedata_len_raw; i++)
    37e2:	b5 2c       	mov	r11, r5
    37e4:	1c 83       	std	Y+4, r17	; 0x04
    37e6:	0b 83       	std	Y+3, r16	; 0x03
				{
					uint8_t val = hex_to_uint8((uint8_t *)cmdbuf, string_offset_data + 2 * i + 1);
    37e8:	6a 2d       	mov	r22, r10
    37ea:	80 e8       	ldi	r24, 0x80	; 128
    37ec:	93 e0       	ldi	r25, 0x03	; 3
    37ee:	cb d3       	rcall	.+1942   	; 0x3f86 <hex_to_uint8>
    37f0:	98 2e       	mov	r9, r24
					array_write_UIntValue(__HEADEROFFSETBITS + i * 8, 8, val, bufx);
    37f2:	28 2f       	mov	r18, r24
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	80 91 51 02 	lds	r24, 0x0251
    37fe:	03 e5       	ldi	r16, 0x53	; 83
    3800:	12 e0       	ldi	r17, 0x02	; 2
    3802:	68 e0       	ldi	r22, 0x08	; 8
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	ab 81       	ldd	r26, Y+3	; 0x03
    3808:	bc 81       	ldd	r27, Y+4	; 0x04
    380a:	a8 0f       	add	r26, r24
    380c:	b1 1d       	adc	r27, r1
    380e:	cd 01       	movw	r24, r26
    3810:	7c d7       	rcall	.+3832   	; 0x470a <_eeprom_write_UIntValue>
					
					if (val)
    3812:	99 20       	and	r9, r9
    3814:	19 f0       	breq	.+6      	; 0x381c <main+0x5ac>
					{
						messagedata_len_trunc = i + 1;
    3816:	44 24       	eor	r4, r4
    3818:	43 94       	inc	r4
    381a:	4b 0c       	add	r4, r11
				messagedata_len_raw = (strlen(cmdbuf) - 1 - string_offset_data) / 2;
				uint8_t messagedata_len_trunc = 0;
				//UART_PUTF("User entered %u bytes MessageData.\r\n", messagedata_len_raw);

				// copy message data, using __HEADEROFFSETBITS value and string_offset_data
				for (i = 0; i < messagedata_len_raw; i++)
    381c:	b3 94       	inc	r11
    381e:	a3 94       	inc	r10
    3820:	a3 94       	inc	r10
    3822:	eb 81       	ldd	r30, Y+3	; 0x03
    3824:	fc 81       	ldd	r31, Y+4	; 0x04
    3826:	38 96       	adiw	r30, 0x08	; 8
    3828:	fc 83       	std	Y+4, r31	; 0x04
    382a:	eb 83       	std	Y+3, r30	; 0x03
    382c:	b8 14       	cp	r11, r8
    382e:	e0 f2       	brcs	.-72     	; 0x37e8 <main+0x578>
						messagedata_len_trunc = i + 1;
					}
				}
				
				// truncate message data after last byte which is not 0
				if (messagedata_len_trunc < messagedata_len_raw)
    3830:	48 14       	cp	r4, r8
    3832:	e0 f4       	brcc	.+56     	; 0x386c <main+0x5fc>
				{
					UART_PUTF2("Truncate MessageData from %u to %u bytes.\r\n", messagedata_len_raw, messagedata_len_trunc);
    3834:	1f 92       	push	r1
    3836:	4f 92       	push	r4
    3838:	dd 24       	eor	r13, r13
    383a:	df 92       	push	r13
    383c:	cf 92       	push	r12
    383e:	a1 e1       	ldi	r26, 0x11	; 17
    3840:	b3 e0       	ldi	r27, 0x03	; 3
    3842:	bf 93       	push	r27
    3844:	af 93       	push	r26
    3846:	a8 eb       	ldi	r26, 0xB8	; 184
    3848:	b3 e0       	ldi	r27, 0x03	; 3
    384a:	bf 93       	push	r27
    384c:	af 93       	push	r26
    384e:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3852:	88 eb       	ldi	r24, 0xB8	; 184
    3854:	93 e0       	ldi	r25, 0x03	; 3
    3856:	2c d1       	rcall	.+600    	; 0x3ab0 <uart_putstr>
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	84 2c       	mov	r8, r4
    3864:	03 c0       	rjmp	.+6      	; 0x386c <main+0x5fc>
					pkg_headerext_common_set_messageid(hex_to_uint8((uint8_t *)cmdbuf, 19));
					string_offset_data = 22;
					break;
			}

			uint8_t messagedata_len_raw = 0;
    3866:	85 2c       	mov	r8, r5
    3868:	01 c0       	rjmp	.+2      	; 0x386c <main+0x5fc>
    386a:	85 2c       	mov	r8, r5
			
			// round packet length to x * 16 bytes
			// __HEADEROFFSETBITS == Header + Ext.Header length
			// Message Data bytes = messagedata_len_raw * 8
			//UART_PUTF("__HEADEROFFSETBITS = %d\r\n", __HEADEROFFSETBITS);
			uint8_t packet_len = ((uint16_t)__HEADEROFFSETBITS + (uint16_t)messagedata_len_raw * 8 + 7) / 8;
    386c:	80 91 51 02 	lds	r24, 0x0251
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	07 96       	adiw	r24, 0x07	; 7
    3874:	a8 e0       	ldi	r26, 0x08	; 8
    3876:	8a 9e       	mul	r8, r26
    3878:	80 0d       	add	r24, r0
    387a:	91 1d       	adc	r25, r1
    387c:	11 24       	eor	r1, r1
    387e:	96 95       	lsr	r25
    3880:	87 95       	ror	r24
    3882:	96 95       	lsr	r25
    3884:	87 95       	ror	r24
    3886:	96 95       	lsr	r25
    3888:	87 95       	ror	r24
    388a:	99 27       	eor	r25, r25
			packet_len = ((packet_len - 1) / 16 + 1) * 16;
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	bc 01       	movw	r22, r24
    3890:	99 23       	and	r25, r25
    3892:	14 f4       	brge	.+4      	; 0x3898 <main+0x628>
    3894:	61 5f       	subi	r22, 0xF1	; 241
    3896:	7f 4f       	sbci	r23, 0xFF	; 255
    3898:	75 95       	asr	r23
    389a:	67 95       	ror	r22
    389c:	75 95       	asr	r23
    389e:	67 95       	ror	r22
    38a0:	75 95       	asr	r23
    38a2:	67 95       	ror	r22
    38a4:	75 95       	asr	r23
    38a6:	67 95       	ror	r22
    38a8:	6f 5f       	subi	r22, 0xFF	; 255
    38aa:	7f 4f       	sbci	r23, 0xFF	; 255
    38ac:	16 2f       	mov	r17, r22
    38ae:	12 95       	swap	r17
    38b0:	10 7f       	andi	r17, 0xF0	; 240

			// send packet which doesn't require an acknowledge immediately
			if ((message_type != MESSAGETYPE_GET) && (message_type != MESSAGETYPE_SET) && (message_type != MESSAGETYPE_SETGET))
    38b2:	b2 e0       	ldi	r27, 0x02	; 2
    38b4:	b7 15       	cp	r27, r7
    38b6:	20 f4       	brcc	.+8      	; 0x38c0 <main+0x650>
			{
				send_packet(aes_key_nr, packet_len);
    38b8:	61 2f       	mov	r22, r17
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	86 dc       	rcall	.-1780   	; 0x31ca <send_packet>
    38be:	35 c0       	rjmp	.+106    	; 0x392a <main+0x6ba>
			}
			else if (receiverid == 4095)
    38c0:	ef ef       	ldi	r30, 0xFF	; 255
    38c2:	ee 16       	cp	r14, r30
    38c4:	ef e0       	ldi	r30, 0x0F	; 15
    38c6:	fe 06       	cpc	r15, r30
    38c8:	39 f4       	brne	.+14     	; 0x38d8 <main+0x668>
			{
				UART_PUTS("Sending broadcast request without using queue.\r\n");
    38ca:	80 ee       	ldi	r24, 0xE0	; 224
    38cc:	92 e0       	ldi	r25, 0x02	; 2
    38ce:	fe d0       	rcall	.+508    	; 0x3acc <uart_putstr_P>
				send_packet(aes_key_nr, packet_len);
    38d0:	61 2f       	mov	r22, r17
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	7a dc       	rcall	.-1804   	; 0x31ca <send_packet>
    38d6:	29 c0       	rjmp	.+82     	; 0x392a <main+0x6ba>
			}
			else // enqueue request (don't send immediately)
			{ 
				// header size = 9 bytes!
				if (queue_request(pkg_headerext_common_get_receiverid(), message_type, aes_key_nr, bufx + 9, packet_len - 9))
    38d8:	0e 94 c7 11 	call	0x238e	; 0x238e <pkg_headerext_common_get_receiverid>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	07 ef       	ldi	r16, 0xF7	; 247
    38e2:	01 0f       	add	r16, r17
    38e4:	2c e5       	ldi	r18, 0x5C	; 92
    38e6:	32 e0       	ldi	r19, 0x02	; 2
    38e8:	49 81       	ldd	r20, Y+1	; 0x01
    38ea:	67 2d       	mov	r22, r7
    38ec:	0e 94 1f 0c 	call	0x183e	; 0x183e <queue_request>
    38f0:	88 23       	and	r24, r24
    38f2:	b1 f0       	breq	.+44     	; 0x3920 <main+0x6b0>
				{
					UART_PUTF("Request added to queue (%u bytes packet).\r\n", packet_len);
    38f4:	1f 92       	push	r1
    38f6:	1f 93       	push	r17
    38f8:	a4 eb       	ldi	r26, 0xB4	; 180
    38fa:	b2 e0       	ldi	r27, 0x02	; 2
    38fc:	bf 93       	push	r27
    38fe:	af 93       	push	r26
    3900:	a8 eb       	ldi	r26, 0xB8	; 184
    3902:	b3 e0       	ldi	r27, 0x03	; 3
    3904:	bf 93       	push	r27
    3906:	af 93       	push	r26
    3908:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    390c:	88 eb       	ldi	r24, 0xB8	; 184
    390e:	93 e0       	ldi	r25, 0x03	; 3
    3910:	cf d0       	rcall	.+414    	; 0x3ab0 <uart_putstr>
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <main+0x6b6>
				}
				else
				{
					UART_PUTS("Warning! Request queue full. Packet will not be sent.\r\n");
    3920:	8c e7       	ldi	r24, 0x7C	; 124
    3922:	92 e0       	ldi	r25, 0x02	; 2
    3924:	d3 d0       	rcall	.+422    	; 0x3acc <uart_putstr_P>
				}

				print_request_queue();
    3926:	0e 94 a9 0c 	call	0x1952	; 0x1952 <print_request_queue>
			}
		
			// clear cmdbuf to receive more input from UART
			send_data_avail = false;
    392a:	50 92 17 01 	sts	0x0117, r5

			rfm12_tick();
    392e:	0e 94 03 11 	call	0x2206	; 0x2206 <rfm12_tick>

			led_blink(200, 0, 1);
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	88 ec       	ldi	r24, 0xC8	; 200
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	b2 d3       	rcall	.+1892   	; 0x40a2 <led_blink>
		}

		// flash LED every second to show the device is alive
		if (loop == 50)
    393e:	f2 e3       	ldi	r31, 0x32	; 50
    3940:	6f 12       	cpse	r6, r31
    3942:	2d c0       	rjmp	.+90     	; 0x399e <main+0x72e>
		{
			led_blink(10, 10, 1);
    3944:	41 e0       	ldi	r20, 0x01	; 1
    3946:	6a e0       	ldi	r22, 0x0A	; 10
    3948:	70 e0       	ldi	r23, 0x00	; 0
    394a:	8a e0       	ldi	r24, 0x0A	; 10
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	a9 d3       	rcall	.+1874   	; 0x40a2 <led_blink>
			
			loop = 0;
			
			request_t* request = find_request_to_repeat(packetcounter + 1);
    3950:	80 91 4d 02 	lds	r24, 0x024D
    3954:	90 91 4e 02 	lds	r25, 0x024E
    3958:	a0 91 4f 02 	lds	r26, 0x024F
    395c:	b0 91 50 02 	lds	r27, 0x0250
    3960:	bc 01       	movw	r22, r24
    3962:	cd 01       	movw	r24, r26
    3964:	6f 5f       	subi	r22, 0xFF	; 255
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	8f 4f       	sbci	r24, 0xFF	; 255
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <find_request_to_repeat>
    3970:	8c 01       	movw	r16, r24

			if (request != 0) // if request to repeat was found in queue
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	69 f0       	breq	.+26     	; 0x3990 <main+0x720>
			{
				UART_PUTS("Repeating request.\r\n");					
    3976:	87 e6       	ldi	r24, 0x67	; 103
    3978:	92 e0       	ldi	r25, 0x02	; 2
    397a:	a8 d0       	rcall	.+336    	; 0x3acc <uart_putstr_P>
				send_packet((*request).aes_key, (*request).data_bytes + 9); // header size = 9 bytes!
    397c:	d8 01       	movw	r26, r16
    397e:	5d 96       	adiw	r26, 0x1d	; 29
    3980:	6c 91       	ld	r22, X
    3982:	5d 97       	sbiw	r26, 0x1d	; 29
    3984:	67 5f       	subi	r22, 0xF7	; 247
    3986:	11 96       	adiw	r26, 0x01	; 1
    3988:	8c 91       	ld	r24, X
    398a:	1f dc       	rcall	.-1986   	; 0x31ca <send_packet>
				print_request_queue();
    398c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <print_request_queue>
			}
			
			// Auto-send something for debugging purposes...
			if (loop2 == 50)
    3990:	ba 81       	ldd	r27, Y+2	; 0x02
    3992:	b2 33       	cpi	r27, 0x32	; 50
    3994:	71 f0       	breq	.+28     	; 0x39b2 <main+0x742>
				
				loop2 = 0;
			}
			else
			{
				loop2++;
    3996:	bf 5f       	subi	r27, 0xFF	; 255
    3998:	ba 83       	std	Y+2, r27	; 0x02
		// flash LED every second to show the device is alive
		if (loop == 50)
		{
			led_blink(10, 10, 1);
			
			loop = 0;
    399a:	65 2c       	mov	r6, r5
    399c:	0c c0       	rjmp	.+24     	; 0x39b6 <main+0x746>
    399e:	ef e7       	ldi	r30, 0x7F	; 127
    39a0:	f8 e3       	ldi	r31, 0x38	; 56
    39a2:	21 e0       	ldi	r18, 0x01	; 1
    39a4:	e1 50       	subi	r30, 0x01	; 1
    39a6:	f0 40       	sbci	r31, 0x00	; 0
    39a8:	20 40       	sbci	r18, 0x00	; 0
    39aa:	e1 f7       	brne	.-8      	; 0x39a4 <main+0x734>
    39ac:	00 c0       	rjmp	.+0      	; 0x39ae <main+0x73e>
    39ae:	00 00       	nop
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <main+0x746>
			if (loop2 == 50)
			{
				//strcpy(cmdbuf, "s000102828300");
				//send_data_avail = true;
				
				loop2 = 0;
    39b2:	5a 82       	std	Y+2, r5	; 0x02
		// flash LED every second to show the device is alive
		if (loop == 50)
		{
			led_blink(10, 10, 1);
			
			loop = 0;
    39b4:	65 2c       	mov	r6, r5
		else
		{
			_delay_ms(20);
		}

		rfm12_tick();
    39b6:	0e 94 03 11 	call	0x2206	; 0x2206 <rfm12_tick>

		loop++;
    39ba:	63 94       	inc	r6
		
		process_rxbuf();
    39bc:	8c d1       	rcall	.+792    	; 0x3cd6 <process_rxbuf>
		
		if (uart_timeout > 0)
    39be:	80 91 1b 01 	lds	r24, 0x011B
    39c2:	88 23       	and	r24, r24
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <main+0x758>
    39c6:	2a cd       	rjmp	.-1452   	; 0x341c <main+0x1ac>
		{
			uart_timeout--;
    39c8:	81 50       	subi	r24, 0x01	; 1
    39ca:	80 93 1b 01 	sts	0x011B, r24
			
			if (uart_timeout == 0)
    39ce:	81 11       	cpse	r24, r1
    39d0:	25 cd       	rjmp	.-1462   	; 0x341c <main+0x1ac>
			{
				UART_PUTS("*** UART user timeout. Input was ignored. ***\r\n");
    39d2:	87 e3       	ldi	r24, 0x37	; 55
    39d4:	92 e0       	ldi	r25, 0x02	; 2
    39d6:	7a d0       	rcall	.+244    	; 0x3acc <uart_putstr_P>
    39d8:	21 cd       	rjmp	.-1470   	; 0x341c <main+0x1ac>
					}
				}
				
				if (!crcok)
				{
					UART_PUTS("Received garbage (CRC wrong after decryption): ");
    39da:	80 e4       	ldi	r24, 0x40	; 64
    39dc:	93 e0       	ldi	r25, 0x03	; 3
    39de:	76 d0       	rcall	.+236    	; 0x3acc <uart_putstr_P>
					memcpy(bufx, rfm12_rx_buffer(), len);
    39e0:	40 2f       	mov	r20, r16
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	d1 01       	movw	r26, r2
    39e6:	6d 91       	ld	r22, X+
    39e8:	7c 91       	ld	r23, X
    39ea:	6c 5f       	subi	r22, 0xFC	; 252
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	83 e5       	ldi	r24, 0x53	; 83
    39f0:	92 e0       	ldi	r25, 0x02	; 2
    39f2:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <memcpy>
					print_bytearray(bufx, len);
    39f6:	60 2f       	mov	r22, r16
    39f8:	83 e5       	ldi	r24, 0x53	; 83
    39fa:	92 e0       	ldi	r25, 0x02	; 2
    39fc:	a3 d0       	rcall	.+326    	; 0x3b44 <print_bytearray>
    39fe:	93 cd       	rjmp	.-1242   	; 0x3526 <main+0x2b6>

00003a00 <__vector_18>:
uint8_t bytes_pos = 0;
bool send_data_avail = false;

// Store received byte in ringbuffer. No processing.
ISR(USART_RX_vect)
{
    3a00:	1f 92       	push	r1
    3a02:	0f 92       	push	r0
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31
	if (rxbuf_count < RXBUF_LENGTH)
    3a22:	20 91 1c 01 	lds	r18, 0x011C
    3a26:	2c 33       	cpi	r18, 0x3C	; 60
    3a28:	98 f4       	brcc	.+38     	; 0x3a50 <__vector_18+0x50>
	{
		rxbuf[(rxbuf_startpos + rxbuf_count) % RXBUF_LENGTH] = UDR0;
    3a2a:	30 91 c6 00 	lds	r19, 0x00C6
    3a2e:	40 91 1d 01 	lds	r20, 0x011D
    3a32:	82 2f       	mov	r24, r18
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	84 0f       	add	r24, r20
    3a38:	91 1d       	adc	r25, r1
    3a3a:	6c e3       	ldi	r22, 0x3C	; 60
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__divmodhi4>
    3a42:	fc 01       	movw	r30, r24
    3a44:	ec 5b       	subi	r30, 0xBC	; 188
    3a46:	fc 4f       	sbci	r31, 0xFC	; 252
    3a48:	30 83       	st	Z, r19
		rxbuf_count++;
    3a4a:	2f 5f       	subi	r18, 0xFF	; 255
    3a4c:	20 93 1c 01 	sts	0x011C, r18
	} // else: Buffer overflow (undetected!)
}
    3a50:	ff 91       	pop	r31
    3a52:	ef 91       	pop	r30
    3a54:	bf 91       	pop	r27
    3a56:	af 91       	pop	r26
    3a58:	9f 91       	pop	r25
    3a5a:	8f 91       	pop	r24
    3a5c:	7f 91       	pop	r23
    3a5e:	6f 91       	pop	r22
    3a60:	5f 91       	pop	r21
    3a62:	4f 91       	pop	r20
    3a64:	3f 91       	pop	r19
    3a66:	2f 91       	pop	r18
    3a68:	0f 90       	pop	r0
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	0f 90       	pop	r0
    3a6e:	1f 90       	pop	r1
    3a70:	18 95       	reti

00003a72 <uart_init>:
#endif // UART_RX

void uart_init(void)
{
#ifdef UART_DEBUG
	PORTD |= 0x01;				            // Pullup an RXD an
    3a72:	58 9a       	sbi	0x0b, 0	; 11

 	UCSR0B |= (1 << TXEN0);			        // UART TX einschalten
    3a74:	e1 ec       	ldi	r30, 0xC1	; 193
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	88 60       	ori	r24, 0x08	; 8
    3a7c:	80 83       	st	Z, r24
 	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);	// Asynchron 8N1
    3a7e:	a2 ec       	ldi	r26, 0xC2	; 194
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	8c 91       	ld	r24, X
    3a84:	8e 60       	ori	r24, 0x0E	; 14
    3a86:	8c 93       	st	X, r24
 	UCSR0B |= (1 << RXEN0 );			    // Uart RX einschalten
    3a88:	80 81       	ld	r24, Z
    3a8a:	80 61       	ori	r24, 0x10	; 16
    3a8c:	80 83       	st	Z, r24
 
 	UBRR0H = (uint8_t)((UBRR_VAL) >> 8);
    3a8e:	10 92 c5 00 	sts	0x00C5, r1
 	UBRR0L = (uint8_t)((UBRR_VAL) & 0xFF);
    3a92:	80 e4       	ldi	r24, 0x40	; 64
    3a94:	80 93 c4 00 	sts	0x00C4, r24

#ifdef UART_RX
	// activate rx IRQ
	UCSR0B |= (1 << RXCIE0);
    3a98:	80 81       	ld	r24, Z
    3a9a:	80 68       	ori	r24, 0x80	; 128
    3a9c:	80 83       	st	Z, r24
    3a9e:	08 95       	ret

00003aa0 <uart_putc>:
}

#ifdef UART_DEBUG
void uart_putc(char c)
{
	while (!(UCSR0A & (1<<UDRE0))); /* warten bis Senden moeglich                   */
    3aa0:	e0 ec       	ldi	r30, 0xC0	; 192
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	90 81       	ld	r25, Z
    3aa6:	95 ff       	sbrs	r25, 5
    3aa8:	fd cf       	rjmp	.-6      	; 0x3aa4 <uart_putc+0x4>
	UDR0 = c;                       /* schreibt das Zeichen x auf die Schnittstelle */
    3aaa:	80 93 c6 00 	sts	0x00C6, r24
    3aae:	08 95       	ret

00003ab0 <uart_putstr>:
}
#endif // UART_DEBUG

void uart_putstr(char *str)
{
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	ec 01       	movw	r28, r24
#ifdef UART_DEBUG
	while (*str)
    3ab6:	88 81       	ld	r24, Y
    3ab8:	88 23       	and	r24, r24
    3aba:	29 f0       	breq	.+10     	; 0x3ac6 <uart_putstr+0x16>
    3abc:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putc(*str++);
    3abe:	f0 df       	rcall	.-32     	; 0x3aa0 <uart_putc>
#endif // UART_DEBUG

void uart_putstr(char *str)
{
#ifdef UART_DEBUG
	while (*str)
    3ac0:	89 91       	ld	r24, Y+
    3ac2:	81 11       	cpse	r24, r1
    3ac4:	fc cf       	rjmp	.-8      	; 0x3abe <uart_putstr+0xe>
	{
		uart_putc(*str++);
	}
#endif // UART_DEBUG
}
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <uart_putstr_P>:

void uart_putstr_P(PGM_P str)
{
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	ec 01       	movw	r28, r24
#ifdef UART_DEBUG
	char tmp;

	while ((tmp = pgm_read_byte(str)))
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	84 91       	lpm	r24, Z
    3ad6:	88 23       	and	r24, r24
    3ad8:	31 f0       	breq	.+12     	; 0x3ae6 <uart_putstr_P+0x1a>
	{
		uart_putc(tmp);
    3ada:	e2 df       	rcall	.-60     	; 0x3aa0 <uart_putc>
		str++;
    3adc:	21 96       	adiw	r28, 0x01	; 1
void uart_putstr_P(PGM_P str)
{
#ifdef UART_DEBUG
	char tmp;

	while ((tmp = pgm_read_byte(str)))
    3ade:	fe 01       	movw	r30, r28
    3ae0:	84 91       	lpm	r24, Z
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	fa cf       	rjmp	.-12     	; 0x3ada <uart_putstr_P+0xe>
	{
		uart_putc(tmp);
		str++;
	}
#endif // UART_DEBUG
}
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	08 95       	ret

00003aec <print_signed>:

// printf for floating point numbers takes ~1500 bytes program size.
// Therefore, we use a smaller special function instead
// as long it is used so rarely.
void print_signed(int16_t i)
{
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	ec 01       	movw	r28, r24
#ifdef UART_DEBUG
	if (i < 0)
    3af2:	99 23       	and	r25, r25
    3af4:	34 f4       	brge	.+12     	; 0x3b02 <print_signed+0x16>
	{
		UART_PUTS("-");
    3af6:	85 e1       	ldi	r24, 0x15	; 21
    3af8:	9c e0       	ldi	r25, 0x0C	; 12
    3afa:	e8 df       	rcall	.-48     	; 0x3acc <uart_putstr_P>
		i = -i;
    3afc:	d1 95       	neg	r29
    3afe:	c1 95       	neg	r28
    3b00:	d1 09       	sbc	r29, r1
	}
	
	UART_PUTF2("%d.%02d", i / 100, i % 100);
    3b02:	ce 01       	movw	r24, r28
    3b04:	64 e6       	ldi	r22, 0x64	; 100
    3b06:	70 e0       	ldi	r23, 0x00	; 0
    3b08:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__divmodhi4>
    3b0c:	9f 93       	push	r25
    3b0e:	8f 93       	push	r24
    3b10:	7f 93       	push	r23
    3b12:	6f 93       	push	r22
    3b14:	8d e0       	ldi	r24, 0x0D	; 13
    3b16:	9c e0       	ldi	r25, 0x0C	; 12
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	88 eb       	ldi	r24, 0xB8	; 184
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	9f 93       	push	r25
    3b22:	8f 93       	push	r24
    3b24:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3b28:	88 eb       	ldi	r24, 0xB8	; 184
    3b2a:	93 e0       	ldi	r25, 0x03	; 3
    3b2c:	c1 df       	rcall	.-126    	; 0x3ab0 <uart_putstr>
    3b2e:	8d b7       	in	r24, 0x3d	; 61
    3b30:	9e b7       	in	r25, 0x3e	; 62
    3b32:	08 96       	adiw	r24, 0x08	; 8
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	9e bf       	out	0x3e, r25	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	8d bf       	out	0x3d, r24	; 61
#endif // UART_DEBUG
}
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	08 95       	ret

00003b44 <print_bytearray>:

void print_bytearray(uint8_t * b, uint8_t len)
{
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	c6 2e       	mov	r12, r22
#ifdef UART_DEBUG
	uint8_t i;
	
	for (i = 0; i < len; i++)
    3b56:	66 23       	and	r22, r22
    3b58:	09 f1       	breq	.+66     	; 0x3b9c <print_bytearray+0x58>
    3b5a:	08 2f       	mov	r16, r24
    3b5c:	19 2f       	mov	r17, r25
    3b5e:	d1 2c       	mov	r13, r1
	{
		UART_PUTF("%02x ", b[i]);
    3b60:	0f 2e       	mov	r0, r31
    3b62:	f7 e0       	ldi	r31, 0x07	; 7
    3b64:	ef 2e       	mov	r14, r31
    3b66:	fc e0       	ldi	r31, 0x0C	; 12
    3b68:	ff 2e       	mov	r15, r31
    3b6a:	f0 2d       	mov	r31, r0
    3b6c:	c8 eb       	ldi	r28, 0xB8	; 184
    3b6e:	d3 e0       	ldi	r29, 0x03	; 3
    3b70:	f8 01       	movw	r30, r16
    3b72:	81 91       	ld	r24, Z+
    3b74:	8f 01       	movw	r16, r30
    3b76:	1f 92       	push	r1
    3b78:	8f 93       	push	r24
    3b7a:	ff 92       	push	r15
    3b7c:	ef 92       	push	r14
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3b86:	ce 01       	movw	r24, r28
    3b88:	93 df       	rcall	.-218    	; 0x3ab0 <uart_putstr>
void print_bytearray(uint8_t * b, uint8_t len)
{
#ifdef UART_DEBUG
	uint8_t i;
	
	for (i = 0; i < len; i++)
    3b8a:	d3 94       	inc	r13
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	dc 10       	cpse	r13, r12
    3b9a:	ea cf       	rjmp	.-44     	; 0x3b70 <print_bytearray+0x2c>
	{
		UART_PUTF("%02x ", b[i]);
	}
	
	UART_PUTS ("\r\n");
    3b9c:	84 e0       	ldi	r24, 0x04	; 4
    3b9e:	9c e0       	ldi	r25, 0x0C	; 12
    3ba0:	95 df       	rcall	.-214    	; 0x3acc <uart_putstr_P>
#endif // UART_DEBUG
}
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	df 90       	pop	r13
    3bb0:	cf 90       	pop	r12
    3bb2:	08 95       	ret

00003bb4 <process_cmd>:

#ifdef UART_RX

// Process the user command now contained in the cmdbuf array.
void process_cmd(void)
{
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
	uart_putstr("Processing command: ");
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	77 df       	rcall	.-274    	; 0x3ab0 <uart_putstr>
	uart_putstr(cmdbuf);
    3bc2:	80 e8       	ldi	r24, 0x80	; 128
    3bc4:	93 e0       	ldi	r25, 0x03	; 3
    3bc6:	74 df       	rcall	.-280    	; 0x3ab0 <uart_putstr>
	UART_PUTS("\r\n");
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	9c e0       	ldi	r25, 0x0C	; 12
    3bcc:	7f df       	rcall	.-258    	; 0x3acc <uart_putstr_P>
	
	if ((cmdbuf[0] == 'w') && (strlen(cmdbuf) == 5)) // E2P write command
    3bce:	80 91 80 03 	lds	r24, 0x0380
    3bd2:	87 37       	cpi	r24, 0x77	; 119
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <process_cmd+0x24>
    3bd6:	3b c0       	rjmp	.+118    	; 0x3c4e <process_cmd+0x9a>
    3bd8:	e0 e8       	ldi	r30, 0x80	; 128
    3bda:	f3 e0       	ldi	r31, 0x03	; 3
    3bdc:	01 90       	ld	r0, Z+
    3bde:	00 20       	and	r0, r0
    3be0:	e9 f7       	brne	.-6      	; 0x3bdc <process_cmd+0x28>
    3be2:	e6 58       	subi	r30, 0x86	; 134
    3be4:	f3 40       	sbci	r31, 0x03	; 3
    3be6:	09 f0       	breq	.+2      	; 0x3bea <process_cmd+0x36>
    3be8:	6e c0       	rjmp	.+220    	; 0x3cc6 <process_cmd+0x112>
	{
		if (enable_write_eeprom)
    3bea:	80 91 1a 01 	lds	r24, 0x011A
    3bee:	88 23       	and	r24, r24
    3bf0:	51 f1       	breq	.+84     	; 0x3c46 <process_cmd+0x92>
		{
			uint16_t adr = hex_to_uint8((uint8_t *)cmdbuf, 1);
    3bf2:	61 e0       	ldi	r22, 0x01	; 1
    3bf4:	80 e8       	ldi	r24, 0x80	; 128
    3bf6:	93 e0       	ldi	r25, 0x03	; 3
    3bf8:	c6 d1       	rcall	.+908    	; 0x3f86 <hex_to_uint8>
    3bfa:	08 2f       	mov	r16, r24
    3bfc:	c8 2f       	mov	r28, r24
    3bfe:	d0 e0       	ldi	r29, 0x00	; 0
			uint8_t val = hex_to_uint8((uint8_t *)cmdbuf, 3);
    3c00:	63 e0       	ldi	r22, 0x03	; 3
    3c02:	80 e8       	ldi	r24, 0x80	; 128
    3c04:	93 e0       	ldi	r25, 0x03	; 3
    3c06:	bf d1       	rcall	.+894    	; 0x3f86 <hex_to_uint8>
    3c08:	18 2f       	mov	r17, r24
			UART_PUTF2("Writing data 0x%x to EEPROM pos 0x%x.\r\n", val, adr);
    3c0a:	1f 92       	push	r1
    3c0c:	0f 93       	push	r16
    3c0e:	1f 92       	push	r1
    3c10:	8f 93       	push	r24
    3c12:	29 ed       	ldi	r18, 0xD9	; 217
    3c14:	3b e0       	ldi	r19, 0x0B	; 11
    3c16:	3f 93       	push	r19
    3c18:	2f 93       	push	r18
    3c1a:	28 eb       	ldi	r18, 0xB8	; 184
    3c1c:	33 e0       	ldi	r19, 0x03	; 3
    3c1e:	3f 93       	push	r19
    3c20:	2f 93       	push	r18
    3c22:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3c26:	88 eb       	ldi	r24, 0xB8	; 184
    3c28:	93 e0       	ldi	r25, 0x03	; 3
    3c2a:	42 df       	rcall	.-380    	; 0x3ab0 <uart_putstr>
			eeprom_write_byte((uint8_t *)adr, val);
    3c2c:	61 2f       	mov	r22, r17
    3c2e:	ce 01       	movw	r24, r28
    3c30:	0e 94 65 28 	call	0x50ca	; 0x50ca <__eewr_byte_m328>
    3c34:	8d b7       	in	r24, 0x3d	; 61
    3c36:	9e b7       	in	r25, 0x3e	; 62
    3c38:	08 96       	adiw	r24, 0x08	; 8
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	9e bf       	out	0x3e, r25	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	8d bf       	out	0x3d, r24	; 61
    3c44:	43 c0       	rjmp	.+134    	; 0x3ccc <process_cmd+0x118>
		}
		else
		{
			UART_PUTS("Ignoring EEPROM write, since write mode is DISABLED.\r\n");
    3c46:	82 ea       	ldi	r24, 0xA2	; 162
    3c48:	9b e0       	ldi	r25, 0x0B	; 11
    3c4a:	40 df       	rcall	.-384    	; 0x3acc <uart_putstr_P>
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <process_cmd+0x118>
		}
	}
	else if ((cmdbuf[0] == 'r') && (strlen(cmdbuf) == 3)) // E2P read command
    3c4e:	82 37       	cpi	r24, 0x72	; 114
    3c50:	51 f5       	brne	.+84     	; 0x3ca6 <process_cmd+0xf2>
    3c52:	e0 e8       	ldi	r30, 0x80	; 128
    3c54:	f3 e0       	ldi	r31, 0x03	; 3
    3c56:	01 90       	ld	r0, Z+
    3c58:	00 20       	and	r0, r0
    3c5a:	e9 f7       	brne	.-6      	; 0x3c56 <process_cmd+0xa2>
    3c5c:	e4 58       	subi	r30, 0x84	; 132
    3c5e:	f3 40       	sbci	r31, 0x03	; 3
    3c60:	91 f5       	brne	.+100    	; 0x3cc6 <process_cmd+0x112>
	{
		uint16_t adr = hex_to_uint8((uint8_t *)cmdbuf, 1);
    3c62:	61 e0       	ldi	r22, 0x01	; 1
    3c64:	80 e8       	ldi	r24, 0x80	; 128
    3c66:	93 e0       	ldi	r25, 0x03	; 3
    3c68:	8e d1       	rcall	.+796    	; 0x3f86 <hex_to_uint8>
    3c6a:	c8 2f       	mov	r28, r24
		uint8_t val = eeprom_read_byte((uint8_t *)adr);
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__eerd_byte_m328>
		UART_PUTF2("EEPROM value at position 0x%x is 0x%x.\r\n", adr, val);
    3c72:	1f 92       	push	r1
    3c74:	8f 93       	push	r24
    3c76:	1f 92       	push	r1
    3c78:	cf 93       	push	r28
    3c7a:	89 e7       	ldi	r24, 0x79	; 121
    3c7c:	9b e0       	ldi	r25, 0x0B	; 11
    3c7e:	9f 93       	push	r25
    3c80:	8f 93       	push	r24
    3c82:	88 eb       	ldi	r24, 0xB8	; 184
    3c84:	93 e0       	ldi	r25, 0x03	; 3
    3c86:	9f 93       	push	r25
    3c88:	8f 93       	push	r24
    3c8a:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf_P>
    3c8e:	88 eb       	ldi	r24, 0xB8	; 184
    3c90:	93 e0       	ldi	r25, 0x03	; 3
    3c92:	0e df       	rcall	.-484    	; 0x3ab0 <uart_putstr>
		{
			UART_PUTS("Ignoring EEPROM write, since write mode is DISABLED.\r\n");
		}
	}
	else if ((cmdbuf[0] == 'r') && (strlen(cmdbuf) == 3)) // E2P read command
	{
    3c94:	8d b7       	in	r24, 0x3d	; 61
    3c96:	9e b7       	in	r25, 0x3e	; 62
    3c98:	08 96       	adiw	r24, 0x08	; 8
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	9e bf       	out	0x3e, r25	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	8d bf       	out	0x3d, r24	; 61
    3ca4:	13 c0       	rjmp	.+38     	; 0x3ccc <process_cmd+0x118>
		uint16_t adr = hex_to_uint8((uint8_t *)cmdbuf, 1);
		uint8_t val = eeprom_read_byte((uint8_t *)adr);
		UART_PUTF2("EEPROM value at position 0x%x is 0x%x.\r\n", adr, val);
	}
	else if ((cmdbuf[0] == 's') && (strlen(cmdbuf) > 4)) // "send" command
    3ca6:	83 37       	cpi	r24, 0x73	; 115
    3ca8:	71 f4       	brne	.+28     	; 0x3cc6 <process_cmd+0x112>
    3caa:	e0 e8       	ldi	r30, 0x80	; 128
    3cac:	f3 e0       	ldi	r31, 0x03	; 3
    3cae:	01 90       	ld	r0, Z+
    3cb0:	00 20       	and	r0, r0
    3cb2:	e9 f7       	brne	.-6      	; 0x3cae <process_cmd+0xfa>
    3cb4:	31 97       	sbiw	r30, 0x01	; 1
    3cb6:	e0 58       	subi	r30, 0x80	; 128
    3cb8:	f3 40       	sbci	r31, 0x03	; 3
    3cba:	35 97       	sbiw	r30, 0x05	; 5
    3cbc:	20 f0       	brcs	.+8      	; 0x3cc6 <process_cmd+0x112>
	{
		send_data_avail = true;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	80 93 17 01 	sts	0x0117, r24
    3cc4:	03 c0       	rjmp	.+6      	; 0x3ccc <process_cmd+0x118>
	}
	else
	{
		UART_PUTS("Unknown command.\r\n");
    3cc6:	86 e6       	ldi	r24, 0x66	; 102
    3cc8:	9b e0       	ldi	r25, 0x0B	; 11
    3cca:	00 df       	rcall	.-512    	; 0x3acc <uart_putstr_P>
	}
}
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	08 95       	ret

00003cd6 <process_rxbuf>:

// Process all bytes in the UART RX ringbuffer ("rxbuf"). This function should be called in the
// main loop. It can be interrupted by a UART RX interrupt, so additional bytes can be added
// into the ringbuffer while this function is running.
void process_rxbuf(void)
{
    3cd6:	2f 92       	push	r2
    3cd8:	3f 92       	push	r3
    3cda:	4f 92       	push	r4
    3cdc:	5f 92       	push	r5
    3cde:	6f 92       	push	r6
    3ce0:	7f 92       	push	r7
    3ce2:	8f 92       	push	r8
    3ce4:	af 92       	push	r10
    3ce6:	bf 92       	push	r11
    3ce8:	cf 92       	push	r12
    3cea:	df 92       	push	r13
    3cec:	ef 92       	push	r14
    3cee:	ff 92       	push	r15
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
	// Only process characters if the cmdbuf is clear to be overwritten.
	// If not, wait for the main loop to clear it by processing the user "send" command.	
	if (send_data_avail)
    3cf6:	80 91 17 01 	lds	r24, 0x0117
    3cfa:	81 11       	cpse	r24, r1
    3cfc:	19 c1       	rjmp	.+562    	; 0x3f30 <process_rxbuf+0x25a>
	{
		return;
	}
	
	while (rxbuf_count > 0)
    3cfe:	80 91 1c 01 	lds	r24, 0x011C
    3d02:	88 23       	and	r24, r24
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <process_rxbuf+0x32>
    3d06:	14 c1       	rjmp	.+552    	; 0x3f30 <process_rxbuf+0x25a>
		char input;
		
		// get one char from the ringbuffer and reduce its size without interruption through the UART ISR
		cli();
		input = rxbuf[rxbuf_startpos];
		rxbuf_startpos = (rxbuf_startpos + 1) % RXBUF_LENGTH;
    3d08:	cc e3       	ldi	r28, 0x3C	; 60
    3d0a:	d0 e0       	ldi	r29, 0x00	; 0
			bytes_pos = 1;
		}
		else if (input == 's')
		{
			UART_PUTS("*** Enter AES key nr, MessageType, header extension + data in hex format to send, finish with ENTER. ***\r\n");
			cmdbuf[0] = 's';
    3d0c:	0f 2e       	mov	r0, r31
    3d0e:	f0 e8       	ldi	r31, 0x80	; 128
    3d10:	af 2e       	mov	r10, r31
    3d12:	f3 e0       	ldi	r31, 0x03	; 3
    3d14:	bf 2e       	mov	r11, r31
    3d16:	f0 2d       	mov	r31, r0
    3d18:	0f 2e       	mov	r0, r31
    3d1a:	f3 e7       	ldi	r31, 0x73	; 115
    3d1c:	6f 2e       	mov	r6, r31
    3d1e:	f0 2d       	mov	r31, r0
			bytes_to_read = 54; // 2 characters for key nr + 2 characters for MessageType + 16 characters for hdr.ext. + 2*17 characters for data
    3d20:	0f 2e       	mov	r0, r31
    3d22:	f6 e3       	ldi	r31, 0x36	; 54
    3d24:	7f 2e       	mov	r7, r31
    3d26:	f0 2d       	mov	r31, r0
			bytes_pos = 1;
    3d28:	88 24       	eor	r8, r8
    3d2a:	83 94       	inc	r8
			bytes_pos = 1;
		}
		else if (input == 'w')
		{
			UART_PUTS("*** Write to EEPROM. Enter address and data (4 characters). ***\r\n");
			cmdbuf[0] = 'w';
    3d2c:	0f 2e       	mov	r0, r31
    3d2e:	f7 e7       	ldi	r31, 0x77	; 119
    3d30:	2f 2e       	mov	r2, r31
    3d32:	f0 2d       	mov	r31, r0
			bytes_to_read = 5;
    3d34:	0f 2e       	mov	r0, r31
    3d36:	f5 e0       	ldi	r31, 0x05	; 5
    3d38:	3f 2e       	mov	r3, r31
    3d3a:	f0 2d       	mov	r31, r0
			UART_PUTS("*** Writing to EEPROM is now DISABLED. ***\r\n");
		}
		else if (input == 'r')
		{
			UART_PUTS("*** Read from EEPROM. Enter address (2 characters). ***\r\n");
			cmdbuf[0] = 'r';
    3d3c:	0f 2e       	mov	r0, r31
    3d3e:	f2 e7       	ldi	r31, 0x72	; 114
    3d40:	4f 2e       	mov	r4, r31
    3d42:	f0 2d       	mov	r31, r0
			bytes_to_read = 3;
    3d44:	0f 2e       	mov	r0, r31
    3d46:	f3 e0       	ldi	r31, 0x03	; 3
    3d48:	5f 2e       	mov	r5, r31
    3d4a:	f0 2d       	mov	r31, r0
			}
			else if (((input >= 48) && (input <= 57)) || ((input >= 65) && (input <= 70)) || ((input >= 97) && (input <= 102)))
			{
				cmdbuf[bytes_pos] = input;
				bytes_pos++;
				UART_PUTF4("*** Received character %c (ASCII %u) = value 0x%x, %u bytes to go. ***\r\n", input, input, hex_to_byte(input), bytes_to_read - bytes_pos);
    3d4c:	0f 2e       	mov	r0, r31
    3d4e:	fd e1       	ldi	r31, 0x1D	; 29
    3d50:	cf 2e       	mov	r12, r31
    3d52:	fb e0       	ldi	r31, 0x0B	; 11
    3d54:	df 2e       	mov	r13, r31
    3d56:	f0 2d       	mov	r31, r0
	while (rxbuf_count > 0)
	{
		char input;
		
		// get one char from the ringbuffer and reduce its size without interruption through the UART ISR
		cli();
    3d58:	f8 94       	cli
		input = rxbuf[rxbuf_startpos];
    3d5a:	80 91 1d 01 	lds	r24, 0x011D
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	fc 01       	movw	r30, r24
    3d62:	ec 5b       	subi	r30, 0xBC	; 188
    3d64:	fc 4f       	sbci	r31, 0xFC	; 252
    3d66:	10 81       	ld	r17, Z
		rxbuf_startpos = (rxbuf_startpos + 1) % RXBUF_LENGTH;
    3d68:	01 96       	adiw	r24, 0x01	; 1
    3d6a:	be 01       	movw	r22, r28
    3d6c:	60 d7       	rcall	.+3776   	; 0x4c2e <__divmodhi4>
    3d6e:	80 93 1d 01 	sts	0x011D, r24
		rxbuf_count--;
    3d72:	80 91 1c 01 	lds	r24, 0x011C
    3d76:	81 50       	subi	r24, 0x01	; 1
    3d78:	80 93 1c 01 	sts	0x011C, r24
		sei();
    3d7c:	78 94       	sei
		
		// process character	
		if (uart_timeout == 0)
    3d7e:	80 91 1b 01 	lds	r24, 0x011B
    3d82:	81 11       	cpse	r24, r1
    3d84:	05 c0       	rjmp	.+10     	; 0x3d90 <process_rxbuf+0xba>
		{
			bytes_to_read = bytes_pos = 0;
    3d86:	10 92 18 01 	sts	0x0118, r1
    3d8a:	10 92 19 01 	sts	0x0119, r1
    3d8e:	50 c0       	rjmp	.+160    	; 0x3e30 <process_rxbuf+0x15a>
		}
		
		if (bytes_to_read > bytes_pos)
    3d90:	e0 90 19 01 	lds	r14, 0x0119
    3d94:	80 91 18 01 	lds	r24, 0x0118
    3d98:	8e 15       	cp	r24, r14
    3d9a:	08 f0       	brcs	.+2      	; 0x3d9e <process_rxbuf+0xc8>
    3d9c:	49 c0       	rjmp	.+146    	; 0x3e30 <process_rxbuf+0x15a>
		{
			if (input == 13)
    3d9e:	1d 30       	cpi	r17, 0x0D	; 13
    3da0:	19 f4       	brne	.+6      	; 0x3da8 <process_rxbuf+0xd2>
			{
				bytes_to_read = bytes_pos;
    3da2:	80 93 19 01 	sts	0x0119, r24
    3da6:	38 c0       	rjmp	.+112    	; 0x3e18 <process_rxbuf+0x142>
			}
			else if (((input >= 48) && (input <= 57)) || ((input >= 65) && (input <= 70)) || ((input >= 97) && (input <= 102)))
    3da8:	90 ed       	ldi	r25, 0xD0	; 208
    3daa:	91 0f       	add	r25, r17
    3dac:	9a 30       	cpi	r25, 0x0A	; 10
    3dae:	28 f0       	brcs	.+10     	; 0x3dba <process_rxbuf+0xe4>
    3db0:	91 2f       	mov	r25, r17
    3db2:	9f 7d       	andi	r25, 0xDF	; 223
    3db4:	91 54       	subi	r25, 0x41	; 65
    3db6:	96 30       	cpi	r25, 0x06	; 6
    3db8:	60 f5       	brcc	.+88     	; 0x3e12 <process_rxbuf+0x13c>
			{
				cmdbuf[bytes_pos] = input;
    3dba:	e8 2f       	mov	r30, r24
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	e0 58       	subi	r30, 0x80	; 128
    3dc0:	fc 4f       	sbci	r31, 0xFC	; 252
    3dc2:	10 83       	st	Z, r17
				bytes_pos++;
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	80 93 18 01 	sts	0x0118, r24
				UART_PUTF4("*** Received character %c (ASCII %u) = value 0x%x, %u bytes to go. ***\r\n", input, input, hex_to_byte(input), bytes_to_read - bytes_pos);
    3dca:	f1 2c       	mov	r15, r1
    3dcc:	e8 1a       	sub	r14, r24
    3dce:	f1 08       	sbc	r15, r1
    3dd0:	81 2f       	mov	r24, r17
    3dd2:	bf d0       	rcall	.+382    	; 0x3f52 <hex_to_byte>
    3dd4:	21 2f       	mov	r18, r17
    3dd6:	33 27       	eor	r19, r19
    3dd8:	27 fd       	sbrc	r18, 7
    3dda:	30 95       	com	r19
    3ddc:	ff 92       	push	r15
    3dde:	ef 92       	push	r14
    3de0:	1f 92       	push	r1
    3de2:	8f 93       	push	r24
    3de4:	3f 93       	push	r19
    3de6:	1f 93       	push	r17
    3de8:	3f 93       	push	r19
    3dea:	1f 93       	push	r17
    3dec:	df 92       	push	r13
    3dee:	cf 92       	push	r12
    3df0:	a8 eb       	ldi	r26, 0xB8	; 184
    3df2:	b3 e0       	ldi	r27, 0x03	; 3
    3df4:	bf 93       	push	r27
    3df6:	af 93       	push	r26
    3df8:	6e d7       	rcall	.+3804   	; 0x4cd6 <sprintf_P>
    3dfa:	88 eb       	ldi	r24, 0xB8	; 184
    3dfc:	93 e0       	ldi	r25, 0x03	; 3
    3dfe:	58 de       	rcall	.-848    	; 0x3ab0 <uart_putstr>
    3e00:	8d b7       	in	r24, 0x3d	; 61
    3e02:	9e b7       	in	r25, 0x3e	; 62
    3e04:	0c 96       	adiw	r24, 0x0c	; 12
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	9e bf       	out	0x3e, r25	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	8d bf       	out	0x3d, r24	; 61
    3e10:	03 c0       	rjmp	.+6      	; 0x3e18 <process_rxbuf+0x142>
			}
			else
			{
				UART_PUTS("*** Illegal character. Use only 0..9, a..f, A..F. ***\r\n");
    3e12:	85 ee       	ldi	r24, 0xE5	; 229
    3e14:	9a e0       	ldi	r25, 0x0A	; 10
    3e16:	5a de       	rcall	.-844    	; 0x3acc <uart_putstr_P>
			}
			
			if (bytes_pos == bytes_to_read)
    3e18:	e0 91 18 01 	lds	r30, 0x0118
    3e1c:	80 91 19 01 	lds	r24, 0x0119
    3e20:	e8 13       	cpse	r30, r24
    3e22:	77 c0       	rjmp	.+238    	; 0x3f12 <process_rxbuf+0x23c>
			{
				cmdbuf[bytes_pos] = '\0';
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	e0 58       	subi	r30, 0x80	; 128
    3e28:	fc 4f       	sbci	r31, 0xFC	; 252
    3e2a:	10 82       	st	Z, r1
				process_cmd();
    3e2c:	c3 de       	rcall	.-634    	; 0x3bb4 <process_cmd>
    3e2e:	71 c0       	rjmp	.+226    	; 0x3f12 <process_rxbuf+0x23c>
			}
		}	
		else if (input == 'h')
    3e30:	18 36       	cpi	r17, 0x68	; 104
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <process_rxbuf+0x160>
    3e34:	37 c0       	rjmp	.+110    	; 0x3ea4 <process_rxbuf+0x1ce>
		{
			UART_PUTS("*** Help ***\r\n");
    3e36:	86 ed       	ldi	r24, 0xD6	; 214
    3e38:	9a e0       	ldi	r25, 0x0A	; 10
    3e3a:	48 de       	rcall	.-880    	; 0x3acc <uart_putstr_P>
			UART_PUTS("h..............this help\r\n");
    3e3c:	8b eb       	ldi	r24, 0xBB	; 187
    3e3e:	9a e0       	ldi	r25, 0x0A	; 10
    3e40:	45 de       	rcall	.-886    	; 0x3acc <uart_putstr_P>
			UART_PUTS("rAA............read EEPROM at hex address AA\r\n");
    3e42:	8c e8       	ldi	r24, 0x8C	; 140
    3e44:	9a e0       	ldi	r25, 0x0A	; 10
    3e46:	42 de       	rcall	.-892    	; 0x3acc <uart_putstr_P>
			UART_PUTS("wAAXX..........write EEPROM at hex address AA to hex value XX\r\n");
    3e48:	8c e4       	ldi	r24, 0x4C	; 76
    3e4a:	9a e0       	ldi	r25, 0x0A	; 10
    3e4c:	3f de       	rcall	.-898    	; 0x3acc <uart_putstr_P>
			UART_PUTS("x..............enable writing to EEPROM\r\n");
    3e4e:	82 e2       	ldi	r24, 0x22	; 34
    3e50:	9a e0       	ldi	r25, 0x0A	; 10
    3e52:	3c de       	rcall	.-904    	; 0x3acc <uart_putstr_P>
			UART_PUTS("z..............disable writing to EEPROM\r\n");
    3e54:	87 ef       	ldi	r24, 0xF7	; 247
    3e56:	99 e0       	ldi	r25, 0x09	; 9
    3e58:	39 de       	rcall	.-910    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK{T}{X}{D}...Use AES key KK to send a packet with MessageType T, followed\r\n");
    3e5a:	89 ea       	ldi	r24, 0xA9	; 169
    3e5c:	99 e0       	ldi	r25, 0x09	; 9
    3e5e:	36 de       	rcall	.-916    	; 0x3acc <uart_putstr_P>
			UART_PUTS("               by all necessary extension header fields and message data.\r\n");
    3e60:	8d e5       	ldi	r24, 0x5D	; 93
    3e62:	99 e0       	ldi	r25, 0x09	; 9
    3e64:	33 de       	rcall	.-922    	; 0x3acc <uart_putstr_P>
			UART_PUTS("               Fields are: ReceiverID (RRRR), MessageGroup (GG), MessageID (MM)\r\n");
    3e66:	8b e0       	ldi	r24, 0x0B	; 11
    3e68:	99 e0       	ldi	r25, 0x09	; 9
    3e6a:	30 de       	rcall	.-928    	; 0x3acc <uart_putstr_P>
			UART_PUTS("               AckSenderID (SSSS), AckPacketCounter (PPPPPP), Error (EE).\r\n");
    3e6c:	8f eb       	ldi	r24, 0xBF	; 191
    3e6e:	98 e0       	ldi	r25, 0x08	; 8
    3e70:	2d de       	rcall	.-934    	; 0x3acc <uart_putstr_P>
			UART_PUTS("               MessageData (DD) can be 0..17 bytes with bits moved to the left.\r\n");
    3e72:	8d e6       	ldi	r24, 0x6D	; 109
    3e74:	98 e0       	ldi	r25, 0x08	; 8
    3e76:	2a de       	rcall	.-940    	; 0x3acc <uart_putstr_P>
			UART_PUTS("               End data with ENTER. SenderID, PacketCounter and CRC are automatically added.\r\n");
    3e78:	8e e0       	ldi	r24, 0x0E	; 14
    3e7a:	98 e0       	ldi	r25, 0x08	; 8
    3e7c:	27 de       	rcall	.-946    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK00RRRRGGMMDD...........Get\r\n");
    3e7e:	8e ee       	ldi	r24, 0xEE	; 238
    3e80:	97 e0       	ldi	r25, 0x07	; 7
    3e82:	24 de       	rcall	.-952    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK01RRRRGGMMDD...........Set\r\n");
    3e84:	8e ec       	ldi	r24, 0xCE	; 206
    3e86:	97 e0       	ldi	r25, 0x07	; 7
    3e88:	21 de       	rcall	.-958    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK02RRRRGGMMDD...........SetGet\r\n");
    3e8a:	8b ea       	ldi	r24, 0xAB	; 171
    3e8c:	97 e0       	ldi	r25, 0x07	; 7
    3e8e:	1e de       	rcall	.-964    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK08GGMMDD...............Status\r\n");
    3e90:	88 e8       	ldi	r24, 0x88	; 136
    3e92:	97 e0       	ldi	r25, 0x07	; 7
    3e94:	1b de       	rcall	.-970    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK09SSSSPPPPPPEE.........Ack\r\n");
    3e96:	88 e6       	ldi	r24, 0x68	; 104
    3e98:	97 e0       	ldi	r25, 0x07	; 7
    3e9a:	18 de       	rcall	.-976    	; 0x3acc <uart_putstr_P>
			UART_PUTS("sKK0ASSSSPPPPPPEEGGMMDD...AckStatus\r\n");
    3e9c:	82 e4       	ldi	r24, 0x42	; 66
    3e9e:	97 e0       	ldi	r25, 0x07	; 7
    3ea0:	15 de       	rcall	.-982    	; 0x3acc <uart_putstr_P>
    3ea2:	37 c0       	rjmp	.+110    	; 0x3f12 <process_rxbuf+0x23c>
		}
		else if (input == 'x')
    3ea4:	18 37       	cpi	r17, 0x78	; 120
    3ea6:	31 f4       	brne	.+12     	; 0x3eb4 <process_rxbuf+0x1de>
		{
			enable_write_eeprom = true;
    3ea8:	80 92 1a 01 	sts	0x011A, r8
			UART_PUTS("*** Writing to EEPROM is now ENABLED. ***\r\n");
    3eac:	86 e1       	ldi	r24, 0x16	; 22
    3eae:	97 e0       	ldi	r25, 0x07	; 7
    3eb0:	0d de       	rcall	.-998    	; 0x3acc <uart_putstr_P>
    3eb2:	2f c0       	rjmp	.+94     	; 0x3f12 <process_rxbuf+0x23c>
		}
		else if (input == 'z')
    3eb4:	1a 37       	cpi	r17, 0x7A	; 122
    3eb6:	31 f4       	brne	.+12     	; 0x3ec4 <process_rxbuf+0x1ee>
		{
			enable_write_eeprom = false;
    3eb8:	10 92 1a 01 	sts	0x011A, r1
			UART_PUTS("*** Writing to EEPROM is now DISABLED. ***\r\n");
    3ebc:	89 ee       	ldi	r24, 0xE9	; 233
    3ebe:	96 e0       	ldi	r25, 0x06	; 6
    3ec0:	05 de       	rcall	.-1014   	; 0x3acc <uart_putstr_P>
    3ec2:	27 c0       	rjmp	.+78     	; 0x3f12 <process_rxbuf+0x23c>
		}
		else if (input == 'r')
    3ec4:	12 37       	cpi	r17, 0x72	; 114
    3ec6:	51 f4       	brne	.+20     	; 0x3edc <process_rxbuf+0x206>
		{
			UART_PUTS("*** Read from EEPROM. Enter address (2 characters). ***\r\n");
    3ec8:	8f ea       	ldi	r24, 0xAF	; 175
    3eca:	96 e0       	ldi	r25, 0x06	; 6
    3ecc:	ff dd       	rcall	.-1026   	; 0x3acc <uart_putstr_P>
			cmdbuf[0] = 'r';
    3ece:	d5 01       	movw	r26, r10
    3ed0:	4c 92       	st	X, r4
			bytes_to_read = 3;
    3ed2:	50 92 19 01 	sts	0x0119, r5
			bytes_pos = 1;
    3ed6:	80 92 18 01 	sts	0x0118, r8
    3eda:	1b c0       	rjmp	.+54     	; 0x3f12 <process_rxbuf+0x23c>
		}
		else if (input == 'w')
    3edc:	17 37       	cpi	r17, 0x77	; 119
    3ede:	51 f4       	brne	.+20     	; 0x3ef4 <process_rxbuf+0x21e>
		{
			UART_PUTS("*** Write to EEPROM. Enter address and data (4 characters). ***\r\n");
    3ee0:	8d e6       	ldi	r24, 0x6D	; 109
    3ee2:	96 e0       	ldi	r25, 0x06	; 6
    3ee4:	f3 dd       	rcall	.-1050   	; 0x3acc <uart_putstr_P>
			cmdbuf[0] = 'w';
    3ee6:	f5 01       	movw	r30, r10
    3ee8:	20 82       	st	Z, r2
			bytes_to_read = 5;
    3eea:	30 92 19 01 	sts	0x0119, r3
			bytes_pos = 1;
    3eee:	80 92 18 01 	sts	0x0118, r8
    3ef2:	0f c0       	rjmp	.+30     	; 0x3f12 <process_rxbuf+0x23c>
		}
		else if (input == 's')
    3ef4:	13 37       	cpi	r17, 0x73	; 115
    3ef6:	51 f4       	brne	.+20     	; 0x3f0c <process_rxbuf+0x236>
		{
			UART_PUTS("*** Enter AES key nr, MessageType, header extension + data in hex format to send, finish with ENTER. ***\r\n");
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	96 e0       	ldi	r25, 0x06	; 6
    3efc:	e7 dd       	rcall	.-1074   	; 0x3acc <uart_putstr_P>
			cmdbuf[0] = 's';
    3efe:	d5 01       	movw	r26, r10
    3f00:	6c 92       	st	X, r6
			bytes_to_read = 54; // 2 characters for key nr + 2 characters for MessageType + 16 characters for hdr.ext. + 2*17 characters for data
    3f02:	70 92 19 01 	sts	0x0119, r7
			bytes_pos = 1;
    3f06:	80 92 18 01 	sts	0x0118, r8
    3f0a:	03 c0       	rjmp	.+6      	; 0x3f12 <process_rxbuf+0x23c>
		}
		else
		{
			UART_PUTS("*** Character ignored. Press h for help. ***\r\n");
    3f0c:	83 ed       	ldi	r24, 0xD3	; 211
    3f0e:	95 e0       	ldi	r25, 0x05	; 5
    3f10:	dd dd       	rcall	.-1094   	; 0x3acc <uart_putstr_P>
		}
		
		// enable user timeout if waiting for further input
		uart_timeout = bytes_to_read == bytes_pos ? 0 : 255;
    3f12:	88 2d       	mov	r24, r8
    3f14:	20 91 19 01 	lds	r18, 0x0119
    3f18:	90 91 18 01 	lds	r25, 0x0118
    3f1c:	29 13       	cpse	r18, r25
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <process_rxbuf+0x24c>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	81 95       	neg	r24
    3f24:	80 93 1b 01 	sts	0x011B, r24
	if (send_data_avail)
	{
		return;
	}
	
	while (rxbuf_count > 0)
    3f28:	80 91 1c 01 	lds	r24, 0x011C
    3f2c:	81 11       	cpse	r24, r1
    3f2e:	14 cf       	rjmp	.-472    	; 0x3d58 <process_rxbuf+0x82>
		}
		
		// enable user timeout if waiting for further input
		uart_timeout = bytes_to_read == bytes_pos ? 0 : 255;
	}
}
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	ff 90       	pop	r15
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	cf 90       	pop	r12
    3f3e:	bf 90       	pop	r11
    3f40:	af 90       	pop	r10
    3f42:	8f 90       	pop	r8
    3f44:	7f 90       	pop	r7
    3f46:	6f 90       	pop	r6
    3f48:	5f 90       	pop	r5
    3f4a:	4f 90       	pop	r4
    3f4c:	3f 90       	pop	r3
    3f4e:	2f 90       	pop	r2
    3f50:	08 95       	ret

00003f52 <hex_to_byte>:
	else if (mode != 0)
	{
		float speedup = (float)mode / 1000;
		OSCCAL = (uint16_t)((float)OSCCAL * (1 + speedup));
	}
}
    3f52:	81 33       	cpi	r24, 0x31	; 49
    3f54:	84 f0       	brlt	.+32     	; 0x3f76 <hex_to_byte+0x24>
    3f56:	8a 33       	cpi	r24, 0x3A	; 58
    3f58:	14 f4       	brge	.+4      	; 0x3f5e <hex_to_byte+0xc>
    3f5a:	80 53       	subi	r24, 0x30	; 48
    3f5c:	08 95       	ret
    3f5e:	82 34       	cpi	r24, 0x42	; 66
    3f60:	64 f0       	brlt	.+24     	; 0x3f7a <hex_to_byte+0x28>
    3f62:	87 34       	cpi	r24, 0x47	; 71
    3f64:	14 f4       	brge	.+4      	; 0x3f6a <hex_to_byte+0x18>
    3f66:	87 53       	subi	r24, 0x37	; 55
    3f68:	08 95       	ret
    3f6a:	82 36       	cpi	r24, 0x62	; 98
    3f6c:	44 f0       	brlt	.+16     	; 0x3f7e <hex_to_byte+0x2c>
    3f6e:	87 36       	cpi	r24, 0x67	; 103
    3f70:	44 f4       	brge	.+16     	; 0x3f82 <hex_to_byte+0x30>
    3f72:	87 55       	subi	r24, 0x57	; 87
    3f74:	08 95       	ret
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	08 95       	ret
    3f7a:	8a e0       	ldi	r24, 0x0A	; 10
    3f7c:	08 95       	ret
    3f7e:	8a e0       	ldi	r24, 0x0A	; 10
    3f80:	08 95       	ret
    3f82:	8f e0       	ldi	r24, 0x0F	; 15
    3f84:	08 95       	ret

00003f86 <hex_to_uint8>:
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	ec 01       	movw	r28, r24
    3f8e:	c6 0f       	add	r28, r22
    3f90:	d1 1d       	adc	r29, r1
    3f92:	88 81       	ld	r24, Y
    3f94:	de df       	rcall	.-68     	; 0x3f52 <hex_to_byte>
    3f96:	18 2f       	mov	r17, r24
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	db df       	rcall	.-74     	; 0x3f52 <hex_to_byte>
    3f9c:	90 e1       	ldi	r25, 0x10	; 16
    3f9e:	19 9f       	mul	r17, r25
    3fa0:	80 0d       	add	r24, r0
    3fa2:	11 24       	eor	r1, r1
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	08 95       	ret

00003fac <getBuf32>:
    3fac:	e8 2f       	mov	r30, r24
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	ed 5a       	subi	r30, 0xAD	; 173
    3fb2:	fd 4f       	sbci	r31, 0xFD	; 253
    3fb4:	63 81       	ldd	r22, Z+3	; 0x03
    3fb6:	20 81       	ld	r18, Z
    3fb8:	86 2f       	mov	r24, r22
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	a0 e0       	ldi	r26, 0x00	; 0
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	b2 2b       	or	r27, r18
    3fc2:	21 81       	ldd	r18, Z+1	; 0x01
    3fc4:	a2 2b       	or	r26, r18
    3fc6:	22 81       	ldd	r18, Z+2	; 0x02
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	72 2b       	or	r23, r18
    3fce:	08 95       	ret

00003fd0 <crc32>:
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	c6 2f       	mov	r28, r22
    3fd8:	4f ef       	ldi	r20, 0xFF	; 255
    3fda:	5f ef       	ldi	r21, 0xFF	; 255
    3fdc:	ba 01       	movw	r22, r20
    3fde:	40 93 20 01 	sts	0x0120, r20
    3fe2:	50 93 21 01 	sts	0x0121, r21
    3fe6:	60 93 22 01 	sts	0x0122, r22
    3fea:	70 93 23 01 	sts	0x0123, r23
    3fee:	cc 23       	and	r28, r28
    3ff0:	71 f1       	breq	.+92     	; 0x404e <crc32+0x7e>
    3ff2:	18 2f       	mov	r17, r24
    3ff4:	e8 2f       	mov	r30, r24
    3ff6:	f9 2f       	mov	r31, r25
    3ff8:	8f ef       	ldi	r24, 0xFF	; 255
    3ffa:	9f ef       	ldi	r25, 0xFF	; 255
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	d8 e0       	ldi	r29, 0x08	; 8
    4000:	31 91       	ld	r19, Z+
    4002:	2d 2f       	mov	r18, r29
    4004:	ac 01       	movw	r20, r24
    4006:	bd 01       	movw	r22, r26
    4008:	43 27       	eor	r20, r19
    400a:	40 ff       	sbrs	r20, 0
    400c:	0d c0       	rjmp	.+26     	; 0x4028 <crc32+0x58>
    400e:	b6 95       	lsr	r27
    4010:	a7 95       	ror	r26
    4012:	97 95       	ror	r25
    4014:	87 95       	ror	r24
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	84 27       	eor	r24, r20
    401a:	43 e8       	ldi	r20, 0x83	; 131
    401c:	94 27       	eor	r25, r20
    401e:	48 eb       	ldi	r20, 0xB8	; 184
    4020:	a4 27       	eor	r26, r20
    4022:	4d ee       	ldi	r20, 0xED	; 237
    4024:	b4 27       	eor	r27, r20
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <crc32+0x60>
    4028:	b6 95       	lsr	r27
    402a:	a7 95       	ror	r26
    402c:	97 95       	ror	r25
    402e:	87 95       	ror	r24
    4030:	36 95       	lsr	r19
    4032:	21 50       	subi	r18, 0x01	; 1
    4034:	39 f7       	brne	.-50     	; 0x4004 <crc32+0x34>
    4036:	2e 2f       	mov	r18, r30
    4038:	21 1b       	sub	r18, r17
    403a:	2c 17       	cp	r18, r28
    403c:	08 f3       	brcs	.-62     	; 0x4000 <crc32+0x30>
    403e:	80 93 20 01 	sts	0x0120, r24
    4042:	90 93 21 01 	sts	0x0121, r25
    4046:	a0 93 22 01 	sts	0x0122, r26
    404a:	b0 93 23 01 	sts	0x0123, r27
    404e:	80 91 20 01 	lds	r24, 0x0120
    4052:	90 91 21 01 	lds	r25, 0x0121
    4056:	a0 91 22 01 	lds	r26, 0x0122
    405a:	b0 91 23 01 	lds	r27, 0x0123
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	60 95       	com	r22
    4064:	70 95       	com	r23
    4066:	80 95       	com	r24
    4068:	90 95       	com	r25
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	08 95       	ret

00004072 <__vector_21>:
    4072:	1f 92       	push	r1
    4074:	0f 92       	push	r0
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	0f 92       	push	r0
    407a:	11 24       	eor	r1, r1
    407c:	8f 93       	push	r24
    407e:	9f 93       	push	r25
    4080:	80 91 78 00 	lds	r24, 0x0078
    4084:	90 91 79 00 	lds	r25, 0x0079
    4088:	90 93 1f 01 	sts	0x011F, r25
    408c:	80 93 1e 01 	sts	0x011E, r24
    4090:	9f 91       	pop	r25
    4092:	8f 91       	pop	r24
    4094:	0f 90       	pop	r0
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	0f 90       	pop	r0
    409a:	1f 90       	pop	r1
    409c:	18 95       	reti

0000409e <util_init>:
    409e:	57 9a       	sbi	0x0a, 7	; 10
    40a0:	08 95       	ret

000040a2 <led_blink>:
    40a2:	2f 92       	push	r2
    40a4:	3f 92       	push	r3
    40a6:	4f 92       	push	r4
    40a8:	5f 92       	push	r5
    40aa:	6f 92       	push	r6
    40ac:	7f 92       	push	r7
    40ae:	8f 92       	push	r8
    40b0:	9f 92       	push	r9
    40b2:	af 92       	push	r10
    40b4:	bf 92       	push	r11
    40b6:	cf 92       	push	r12
    40b8:	df 92       	push	r13
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	28 97       	sbiw	r28, 0x08	; 8
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	7b 01       	movw	r14, r22
    40d8:	04 2f       	mov	r16, r20
    40da:	44 23       	and	r20, r20
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <led_blink+0x3e>
    40de:	97 c0       	rjmp	.+302    	; 0x420e <led_blink+0x16c>
    40e0:	bc 01       	movw	r22, r24
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	ee d3       	rcall	.+2012   	; 0x48c4 <__floatunsisf>
    40e8:	6d 83       	std	Y+5, r22	; 0x05
    40ea:	7e 83       	std	Y+6, r23	; 0x06
    40ec:	8f 83       	std	Y+7, r24	; 0x07
    40ee:	98 87       	std	Y+8, r25	; 0x08
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e4       	ldi	r19, 0x40	; 64
    40f4:	4c e9       	ldi	r20, 0x9C	; 156
    40f6:	55 e4       	ldi	r21, 0x45	; 69
    40f8:	9b d4       	rcall	.+2358   	; 0x4a30 <__mulsf3>
    40fa:	2b 01       	movw	r4, r22
    40fc:	3c 01       	movw	r6, r24
    40fe:	b6 d3       	rcall	.+1900   	; 0x486c <__fixunssfsi>
    4100:	4b 01       	movw	r8, r22
    4102:	5c 01       	movw	r10, r24
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e8       	ldi	r20, 0x80	; 128
    410a:	5f e3       	ldi	r21, 0x3F	; 63
    410c:	c3 01       	movw	r24, r6
    410e:	b2 01       	movw	r22, r4
    4110:	a9 d3       	rcall	.+1874   	; 0x4864 <__cmpsf2>
    4112:	88 23       	and	r24, r24
    4114:	1c f4       	brge	.+6      	; 0x411c <led_blink+0x7a>
    4116:	91 e0       	ldi	r25, 0x01	; 1
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <led_blink+0x7e>
    411c:	98 2d       	mov	r25, r8
    411e:	89 2d       	mov	r24, r9
    4120:	29 2e       	mov	r2, r25
    4122:	38 2e       	mov	r3, r24
    4124:	10 e0       	ldi	r17, 0x00	; 0
    4126:	c7 01       	movw	r24, r14
    4128:	a0 e0       	ldi	r26, 0x00	; 0
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	89 83       	std	Y+1, r24	; 0x01
    412e:	9a 83       	std	Y+2, r25	; 0x02
    4130:	ab 83       	std	Y+3, r26	; 0x03
    4132:	bc 83       	std	Y+4, r27	; 0x04
    4134:	5f 9a       	sbi	0x0b, 7	; 11
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	c3 01       	movw	r24, r6
    4140:	b2 01       	movw	r22, r4
    4142:	90 d3       	rcall	.+1824   	; 0x4864 <__cmpsf2>
    4144:	88 23       	and	r24, r24
    4146:	04 f1       	brlt	.+64     	; 0x4188 <led_blink+0xe6>
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	3f ef       	ldi	r19, 0xFF	; 255
    414c:	4f e7       	ldi	r20, 0x7F	; 127
    414e:	57 e4       	ldi	r21, 0x47	; 71
    4150:	c3 01       	movw	r24, r6
    4152:	b2 01       	movw	r22, r4
    4154:	69 d4       	rcall	.+2258   	; 0x4a28 <__gesf2>
    4156:	18 16       	cp	r1, r24
    4158:	bc f4       	brge	.+46     	; 0x4188 <led_blink+0xe6>
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e2       	ldi	r20, 0x20	; 32
    4160:	51 e4       	ldi	r21, 0x41	; 65
    4162:	6d 81       	ldd	r22, Y+5	; 0x05
    4164:	7e 81       	ldd	r23, Y+6	; 0x06
    4166:	8f 81       	ldd	r24, Y+7	; 0x07
    4168:	98 85       	ldd	r25, Y+8	; 0x08
    416a:	62 d4       	rcall	.+2244   	; 0x4a30 <__mulsf3>
    416c:	7f d3       	rcall	.+1790   	; 0x486c <__fixunssfsi>
    416e:	61 15       	cp	r22, r1
    4170:	71 05       	cpc	r23, r1
    4172:	69 f0       	breq	.+26     	; 0x418e <led_blink+0xec>
    4174:	84 ef       	ldi	r24, 0xF4	; 244
    4176:	91 e0       	ldi	r25, 0x01	; 1
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <led_blink+0xd6>
    417c:	61 50       	subi	r22, 0x01	; 1
    417e:	71 09       	sbc	r23, r1
    4180:	61 15       	cp	r22, r1
    4182:	71 05       	cpc	r23, r1
    4184:	b9 f7       	brne	.-18     	; 0x4174 <led_blink+0xd2>
    4186:	03 c0       	rjmp	.+6      	; 0x418e <led_blink+0xec>
    4188:	c1 01       	movw	r24, r2
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <led_blink+0xe8>
    418e:	5f 98       	cbi	0x0b, 7	; 11
    4190:	69 81       	ldd	r22, Y+1	; 0x01
    4192:	7a 81       	ldd	r23, Y+2	; 0x02
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	9c 81       	ldd	r25, Y+4	; 0x04
    4198:	95 d3       	rcall	.+1834   	; 0x48c4 <__floatunsisf>
    419a:	4b 01       	movw	r8, r22
    419c:	5c 01       	movw	r10, r24
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e4       	ldi	r19, 0x40	; 64
    41a2:	4c e9       	ldi	r20, 0x9C	; 156
    41a4:	55 e4       	ldi	r21, 0x45	; 69
    41a6:	44 d4       	rcall	.+2184   	; 0x4a30 <__mulsf3>
    41a8:	6b 01       	movw	r12, r22
    41aa:	7c 01       	movw	r14, r24
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e8       	ldi	r20, 0x80	; 128
    41b2:	5f e3       	ldi	r21, 0x3F	; 63
    41b4:	57 d3       	rcall	.+1710   	; 0x4864 <__cmpsf2>
    41b6:	88 23       	and	r24, r24
    41b8:	14 f1       	brlt	.+68     	; 0x41fe <led_blink+0x15c>
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	3f ef       	ldi	r19, 0xFF	; 255
    41be:	4f e7       	ldi	r20, 0x7F	; 127
    41c0:	57 e4       	ldi	r21, 0x47	; 71
    41c2:	c7 01       	movw	r24, r14
    41c4:	b6 01       	movw	r22, r12
    41c6:	30 d4       	rcall	.+2144   	; 0x4a28 <__gesf2>
    41c8:	18 16       	cp	r1, r24
    41ca:	ac f4       	brge	.+42     	; 0x41f6 <led_blink+0x154>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e2       	ldi	r20, 0x20	; 32
    41d2:	51 e4       	ldi	r21, 0x41	; 65
    41d4:	c5 01       	movw	r24, r10
    41d6:	b4 01       	movw	r22, r8
    41d8:	2b d4       	rcall	.+2134   	; 0x4a30 <__mulsf3>
    41da:	48 d3       	rcall	.+1680   	; 0x486c <__fixunssfsi>
    41dc:	61 15       	cp	r22, r1
    41de:	71 05       	cpc	r23, r1
    41e0:	99 f0       	breq	.+38     	; 0x4208 <led_blink+0x166>
    41e2:	84 ef       	ldi	r24, 0xF4	; 244
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	f1 f7       	brne	.-4      	; 0x41e6 <led_blink+0x144>
    41ea:	61 50       	subi	r22, 0x01	; 1
    41ec:	71 09       	sbc	r23, r1
    41ee:	61 15       	cp	r22, r1
    41f0:	71 05       	cpc	r23, r1
    41f2:	b9 f7       	brne	.-18     	; 0x41e2 <led_blink+0x140>
    41f4:	09 c0       	rjmp	.+18     	; 0x4208 <led_blink+0x166>
    41f6:	c7 01       	movw	r24, r14
    41f8:	b6 01       	movw	r22, r12
    41fa:	38 d3       	rcall	.+1648   	; 0x486c <__fixunssfsi>
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <led_blink+0x160>
    41fe:	61 e0       	ldi	r22, 0x01	; 1
    4200:	70 e0       	ldi	r23, 0x00	; 0
    4202:	cb 01       	movw	r24, r22
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <led_blink+0x162>
    4208:	1f 5f       	subi	r17, 0xFF	; 255
    420a:	10 13       	cpse	r17, r16
    420c:	93 cf       	rjmp	.-218    	; 0x4134 <led_blink+0x92>
    420e:	28 96       	adiw	r28, 0x08	; 8
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	de bf       	out	0x3e, r29	; 62
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	cd bf       	out	0x3d, r28	; 61
    421a:	df 91       	pop	r29
    421c:	cf 91       	pop	r28
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	ff 90       	pop	r15
    4224:	ef 90       	pop	r14
    4226:	df 90       	pop	r13
    4228:	cf 90       	pop	r12
    422a:	bf 90       	pop	r11
    422c:	af 90       	pop	r10
    422e:	9f 90       	pop	r9
    4230:	8f 90       	pop	r8
    4232:	7f 90       	pop	r7
    4234:	6f 90       	pop	r6
    4236:	5f 90       	pop	r5
    4238:	4f 90       	pop	r4
    423a:	3f 90       	pop	r3
    423c:	2f 90       	pop	r2
    423e:	08 95       	ret

00004240 <signal_error_state>:
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	68 ec       	ldi	r22, 0xC8	; 200
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	82 e3       	ldi	r24, 0x32	; 50
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	2b df       	rcall	.-426    	; 0x40a2 <led_blink>
    424c:	f9 cf       	rjmp	.-14     	; 0x4240 <signal_error_state>

0000424e <rfm12_send_bufx>:
    424e:	cf 93       	push	r28
    4250:	8b e2       	ldi	r24, 0x2B	; 43
    4252:	9c e0       	ldi	r25, 0x0C	; 12
    4254:	3b dc       	rcall	.-1930   	; 0x3acc <uart_putstr_P>
    4256:	60 91 4c 02 	lds	r22, 0x024C
    425a:	83 e5       	ldi	r24, 0x53	; 83
    425c:	92 e0       	ldi	r25, 0x02	; 2
    425e:	72 dc       	rcall	.-1820   	; 0x3b44 <print_bytearray>
    4260:	60 91 4c 02 	lds	r22, 0x024C
    4264:	83 e5       	ldi	r24, 0x53	; 83
    4266:	92 e0       	ldi	r25, 0x02	; 2
    4268:	46 d4       	rcall	.+2188   	; 0x4af6 <aes256_encrypt_cbc>
    426a:	c8 2f       	mov	r28, r24
    426c:	87 e1       	ldi	r24, 0x17	; 23
    426e:	9c e0       	ldi	r25, 0x0C	; 12
    4270:	2d dc       	rcall	.-1958   	; 0x3acc <uart_putstr_P>
    4272:	6c 2f       	mov	r22, r28
    4274:	83 e5       	ldi	r24, 0x53	; 83
    4276:	92 e0       	ldi	r25, 0x02	; 2
    4278:	65 dc       	rcall	.-1846   	; 0x3b44 <print_bytearray>
    427a:	43 e5       	ldi	r20, 0x53	; 83
    427c:	52 e0       	ldi	r21, 0x02	; 2
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	8c 2f       	mov	r24, r28
    4282:	0e 94 4c 11 	call	0x2298	; 0x2298 <rfm12_tx>
    4286:	cf 91       	pop	r28
    4288:	08 95       	ret

0000428a <__limitUIntValue32>:
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	fc 01       	movw	r30, r24
    4298:	c0 80       	ld	r12, Z
    429a:	d1 80       	ldd	r13, Z+1	; 0x01
    429c:	e2 80       	ldd	r14, Z+2	; 0x02
    429e:	f3 80       	ldd	r15, Z+3	; 0x03
    42a0:	c4 16       	cp	r12, r20
    42a2:	d5 06       	cpc	r13, r21
    42a4:	e6 06       	cpc	r14, r22
    42a6:	f7 06       	cpc	r15, r23
    42a8:	20 f4       	brcc	.+8      	; 0x42b2 <__limitUIntValue32+0x28>
    42aa:	40 83       	st	Z, r20
    42ac:	51 83       	std	Z+1, r21	; 0x01
    42ae:	62 83       	std	Z+2, r22	; 0x02
    42b0:	73 83       	std	Z+3, r23	; 0x03
    42b2:	40 81       	ld	r20, Z
    42b4:	51 81       	ldd	r21, Z+1	; 0x01
    42b6:	62 81       	ldd	r22, Z+2	; 0x02
    42b8:	73 81       	ldd	r23, Z+3	; 0x03
    42ba:	04 17       	cp	r16, r20
    42bc:	15 07       	cpc	r17, r21
    42be:	26 07       	cpc	r18, r22
    42c0:	37 07       	cpc	r19, r23
    42c2:	20 f4       	brcc	.+8      	; 0x42cc <__limitUIntValue32+0x42>
    42c4:	00 83       	st	Z, r16
    42c6:	11 83       	std	Z+1, r17	; 0x01
    42c8:	22 83       	std	Z+2, r18	; 0x02
    42ca:	33 83       	std	Z+3, r19	; 0x03
    42cc:	1f 91       	pop	r17
    42ce:	0f 91       	pop	r16
    42d0:	ff 90       	pop	r15
    42d2:	ef 90       	pop	r14
    42d4:	df 90       	pop	r13
    42d6:	cf 90       	pop	r12
    42d8:	08 95       	ret

000042da <__limitIntValue32>:
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	fc 01       	movw	r30, r24
    42e8:	c0 80       	ld	r12, Z
    42ea:	d1 80       	ldd	r13, Z+1	; 0x01
    42ec:	e2 80       	ldd	r14, Z+2	; 0x02
    42ee:	f3 80       	ldd	r15, Z+3	; 0x03
    42f0:	c4 16       	cp	r12, r20
    42f2:	d5 06       	cpc	r13, r21
    42f4:	e6 06       	cpc	r14, r22
    42f6:	f7 06       	cpc	r15, r23
    42f8:	24 f4       	brge	.+8      	; 0x4302 <__limitIntValue32+0x28>
    42fa:	40 83       	st	Z, r20
    42fc:	51 83       	std	Z+1, r21	; 0x01
    42fe:	62 83       	std	Z+2, r22	; 0x02
    4300:	73 83       	std	Z+3, r23	; 0x03
    4302:	40 81       	ld	r20, Z
    4304:	51 81       	ldd	r21, Z+1	; 0x01
    4306:	62 81       	ldd	r22, Z+2	; 0x02
    4308:	73 81       	ldd	r23, Z+3	; 0x03
    430a:	04 17       	cp	r16, r20
    430c:	15 07       	cpc	r17, r21
    430e:	26 07       	cpc	r18, r22
    4310:	37 07       	cpc	r19, r23
    4312:	24 f4       	brge	.+8      	; 0x431c <__limitIntValue32+0x42>
    4314:	00 83       	st	Z, r16
    4316:	11 83       	std	Z+1, r17	; 0x01
    4318:	22 83       	std	Z+2, r18	; 0x02
    431a:	33 83       	std	Z+3, r19	; 0x03
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	df 90       	pop	r13
    4326:	cf 90       	pop	r12
    4328:	08 95       	ret

0000432a <__clear_bits>:
    432a:	e1 e0       	ldi	r30, 0x01	; 1
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	04 2e       	mov	r0, r20
    4330:	02 c0       	rjmp	.+4      	; 0x4336 <__clear_bits+0xc>
    4332:	ee 0f       	add	r30, r30
    4334:	ff 1f       	adc	r31, r31
    4336:	0a 94       	dec	r0
    4338:	e2 f7       	brpl	.-8      	; 0x4332 <__clear_bits+0x8>
    433a:	31 97       	sbiw	r30, 0x01	; 1
    433c:	28 e0       	ldi	r18, 0x08	; 8
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	24 1b       	sub	r18, r20
    4342:	31 09       	sbc	r19, r1
    4344:	26 1b       	sub	r18, r22
    4346:	31 09       	sbc	r19, r1
    4348:	af 01       	movw	r20, r30
    434a:	02 c0       	rjmp	.+4      	; 0x4350 <__clear_bits+0x26>
    434c:	44 0f       	add	r20, r20
    434e:	55 1f       	adc	r21, r21
    4350:	2a 95       	dec	r18
    4352:	e2 f7       	brpl	.-8      	; 0x434c <__clear_bits+0x22>
    4354:	9a 01       	movw	r18, r20
    4356:	20 95       	com	r18
    4358:	82 23       	and	r24, r18
    435a:	08 95       	ret

0000435c <__get_bits>:
    435c:	e0 e2       	ldi	r30, 0x20	; 32
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	e2 1b       	sub	r30, r18
    4362:	f1 09       	sbc	r31, r1
    4364:	df 01       	movw	r26, r30
    4366:	a4 1b       	sub	r26, r20
    4368:	b1 09       	sbc	r27, r1
    436a:	ad 01       	movw	r20, r26
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	04 c0       	rjmp	.+8      	; 0x437a <__get_bits+0x1e>
    4372:	b6 95       	lsr	r27
    4374:	a7 95       	ror	r26
    4376:	97 95       	ror	r25
    4378:	87 95       	ror	r24
    437a:	4a 95       	dec	r20
    437c:	d2 f7       	brpl	.-12     	; 0x4372 <__get_bits+0x16>
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	ba 01       	movw	r22, r20
    4384:	02 c0       	rjmp	.+4      	; 0x438a <__get_bits+0x2e>
    4386:	66 0f       	add	r22, r22
    4388:	77 1f       	adc	r23, r23
    438a:	2a 95       	dec	r18
    438c:	e2 f7       	brpl	.-8      	; 0x4386 <__get_bits+0x2a>
    438e:	9b 01       	movw	r18, r22
    4390:	21 50       	subi	r18, 0x01	; 1
    4392:	82 23       	and	r24, r18
    4394:	08 95       	ret

00004396 <__eeprom_read_UIntValue32>:
    4396:	3f 92       	push	r3
    4398:	4f 92       	push	r4
    439a:	5f 92       	push	r5
    439c:	6f 92       	push	r6
    439e:	7f 92       	push	r7
    43a0:	8f 92       	push	r8
    43a2:	9f 92       	push	r9
    43a4:	af 92       	push	r10
    43a6:	bf 92       	push	r11
    43a8:	cf 92       	push	r12
    43aa:	df 92       	push	r13
    43ac:	ef 92       	push	r14
    43ae:	ff 92       	push	r15
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	6b 01       	movw	r12, r22
    43ba:	89 01       	movw	r16, r18
    43bc:	5c 01       	movw	r10, r24
    43be:	b6 94       	lsr	r11
    43c0:	a7 94       	ror	r10
    43c2:	b6 94       	lsr	r11
    43c4:	a7 94       	ror	r10
    43c6:	b6 94       	lsr	r11
    43c8:	a7 94       	ror	r10
    43ca:	87 70       	andi	r24, 0x07	; 7
    43cc:	99 27       	eor	r25, r25
    43ce:	46 17       	cp	r20, r22
    43d0:	57 07       	cpc	r21, r23
    43d2:	48 f0       	brcs	.+18     	; 0x43e6 <__eeprom_read_UIntValue32+0x50>
    43d4:	ec 01       	movw	r28, r24
    43d6:	c6 0f       	add	r28, r22
    43d8:	d7 1f       	adc	r29, r23
    43da:	20 97       	sbiw	r28, 0x00	; 0
    43dc:	29 f4       	brne	.+10     	; 0x43e8 <__eeprom_read_UIntValue32+0x52>
    43de:	41 2c       	mov	r4, r1
    43e0:	51 2c       	mov	r5, r1
    43e2:	32 01       	movw	r6, r4
    43e4:	49 c0       	rjmp	.+146    	; 0x4478 <__eeprom_read_UIntValue32+0xe2>
    43e6:	2c df       	rcall	.-424    	; 0x4240 <signal_error_state>
    43e8:	98 ef       	ldi	r25, 0xF8	; 248
    43ea:	96 0f       	add	r25, r22
    43ec:	89 2e       	mov	r8, r25
    43ee:	88 0e       	add	r8, r24
    43f0:	41 2c       	mov	r4, r1
    43f2:	51 2c       	mov	r5, r1
    43f4:	32 01       	movw	r6, r4
    43f6:	91 2c       	mov	r9, r1
    43f8:	79 01       	movw	r14, r18
    43fa:	ea 0c       	add	r14, r10
    43fc:	fb 1c       	adc	r15, r11
    43fe:	38 2c       	mov	r3, r8
    4400:	01 15       	cp	r16, r1
    4402:	11 05       	cpc	r17, r1
    4404:	29 f4       	brne	.+10     	; 0x4410 <__eeprom_read_UIntValue32+0x7a>
    4406:	c5 01       	movw	r24, r10
    4408:	89 0d       	add	r24, r9
    440a:	91 1d       	adc	r25, r1
    440c:	56 d6       	rcall	.+3244   	; 0x50ba <__eerd_byte_m328>
    440e:	04 c0       	rjmp	.+8      	; 0x4418 <__eeprom_read_UIntValue32+0x82>
    4410:	f7 01       	movw	r30, r14
    4412:	e9 0d       	add	r30, r9
    4414:	f1 1d       	adc	r31, r1
    4416:	80 81       	ld	r24, Z
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	a0 e0       	ldi	r26, 0x00	; 0
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	33 20       	and	r3, r3
    4420:	64 f0       	brlt	.+24     	; 0x443a <__eeprom_read_UIntValue32+0xa4>
    4422:	04 c0       	rjmp	.+8      	; 0x442c <__eeprom_read_UIntValue32+0x96>
    4424:	88 0f       	add	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	aa 1f       	adc	r26, r26
    442a:	bb 1f       	adc	r27, r27
    442c:	3a 94       	dec	r3
    442e:	d2 f7       	brpl	.-12     	; 0x4424 <__eeprom_read_UIntValue32+0x8e>
    4430:	48 0e       	add	r4, r24
    4432:	59 1e       	adc	r5, r25
    4434:	6a 1e       	adc	r6, r26
    4436:	7b 1e       	adc	r7, r27
    4438:	11 c0       	rjmp	.+34     	; 0x445c <__eeprom_read_UIntValue32+0xc6>
    443a:	43 2d       	mov	r20, r3
    443c:	55 27       	eor	r21, r21
    443e:	41 95       	neg	r20
    4440:	0c f4       	brge	.+2      	; 0x4444 <__eeprom_read_UIntValue32+0xae>
    4442:	50 95       	com	r21
    4444:	04 2e       	mov	r0, r20
    4446:	04 c0       	rjmp	.+8      	; 0x4450 <__eeprom_read_UIntValue32+0xba>
    4448:	b6 95       	lsr	r27
    444a:	a7 95       	ror	r26
    444c:	97 95       	ror	r25
    444e:	87 95       	ror	r24
    4450:	0a 94       	dec	r0
    4452:	d2 f7       	brpl	.-12     	; 0x4448 <__eeprom_read_UIntValue32+0xb2>
    4454:	48 0e       	add	r4, r24
    4456:	59 1e       	adc	r5, r25
    4458:	6a 1e       	adc	r6, r26
    445a:	7b 1e       	adc	r7, r27
    445c:	93 94       	inc	r9
    445e:	58 ef       	ldi	r21, 0xF8	; 248
    4460:	85 0e       	add	r8, r21
    4462:	89 2d       	mov	r24, r9
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	88 0f       	add	r24, r24
    4468:	99 1f       	adc	r25, r25
    446a:	88 0f       	add	r24, r24
    446c:	99 1f       	adc	r25, r25
    446e:	88 0f       	add	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	8c 17       	cp	r24, r28
    4474:	9d 07       	cpc	r25, r29
    4476:	18 f2       	brcs	.-122    	; 0x43fe <__eeprom_read_UIntValue32+0x68>
    4478:	80 e2       	ldi	r24, 0x20	; 32
    447a:	c8 16       	cp	r12, r24
    447c:	d1 04       	cpc	r13, r1
    447e:	c0 f4       	brcc	.+48     	; 0x44b0 <__eeprom_read_UIntValue32+0x11a>
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	a0 e0       	ldi	r26, 0x00	; 0
    4486:	b0 e0       	ldi	r27, 0x00	; 0
    4488:	9c 01       	movw	r18, r24
    448a:	ad 01       	movw	r20, r26
    448c:	04 c0       	rjmp	.+8      	; 0x4496 <__eeprom_read_UIntValue32+0x100>
    448e:	22 0f       	add	r18, r18
    4490:	33 1f       	adc	r19, r19
    4492:	44 1f       	adc	r20, r20
    4494:	55 1f       	adc	r21, r21
    4496:	ca 94       	dec	r12
    4498:	d2 f7       	brpl	.-12     	; 0x448e <__eeprom_read_UIntValue32+0xf8>
    449a:	69 01       	movw	r12, r18
    449c:	7a 01       	movw	r14, r20
    449e:	31 e0       	ldi	r19, 0x01	; 1
    44a0:	c3 1a       	sub	r12, r19
    44a2:	d1 08       	sbc	r13, r1
    44a4:	e1 08       	sbc	r14, r1
    44a6:	f1 08       	sbc	r15, r1
    44a8:	4c 20       	and	r4, r12
    44aa:	5d 20       	and	r5, r13
    44ac:	6e 20       	and	r6, r14
    44ae:	7f 20       	and	r7, r15
    44b0:	c3 01       	movw	r24, r6
    44b2:	b2 01       	movw	r22, r4
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	ff 90       	pop	r15
    44be:	ef 90       	pop	r14
    44c0:	df 90       	pop	r13
    44c2:	cf 90       	pop	r12
    44c4:	bf 90       	pop	r11
    44c6:	af 90       	pop	r10
    44c8:	9f 90       	pop	r9
    44ca:	8f 90       	pop	r8
    44cc:	7f 90       	pop	r7
    44ce:	6f 90       	pop	r6
    44d0:	5f 90       	pop	r5
    44d2:	4f 90       	pop	r4
    44d4:	3f 90       	pop	r3
    44d6:	08 95       	ret

000044d8 <__eeprom_write_bits>:
    44d8:	bf 92       	push	r11
    44da:	cf 92       	push	r12
    44dc:	df 92       	push	r13
    44de:	ef 92       	push	r14
    44e0:	ff 92       	push	r15
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	8b 01       	movw	r16, r22
    44ec:	b4 2e       	mov	r11, r20
    44ee:	e9 01       	movw	r28, r18
    44f0:	6c 01       	movw	r12, r24
    44f2:	d6 94       	lsr	r13
    44f4:	c7 94       	ror	r12
    44f6:	d6 94       	lsr	r13
    44f8:	c7 94       	ror	r12
    44fa:	d6 94       	lsr	r13
    44fc:	c7 94       	ror	r12
    44fe:	7c 01       	movw	r14, r24
    4500:	27 e0       	ldi	r18, 0x07	; 7
    4502:	e2 22       	and	r14, r18
    4504:	ff 24       	eor	r15, r15
    4506:	68 30       	cpi	r22, 0x08	; 8
    4508:	71 05       	cpc	r23, r1
    450a:	68 f4       	brcc	.+26     	; 0x4526 <__eeprom_write_bits+0x4e>
    450c:	20 97       	sbiw	r28, 0x00	; 0
    450e:	19 f4       	brne	.+6      	; 0x4516 <__eeprom_write_bits+0x3e>
    4510:	c6 01       	movw	r24, r12
    4512:	d3 d5       	rcall	.+2982   	; 0x50ba <__eerd_byte_m328>
    4514:	04 c0       	rjmp	.+8      	; 0x451e <__eeprom_write_bits+0x46>
    4516:	de 01       	movw	r26, r28
    4518:	ac 0d       	add	r26, r12
    451a:	bd 1d       	adc	r27, r13
    451c:	8c 91       	ld	r24, X
    451e:	40 2f       	mov	r20, r16
    4520:	6e 2d       	mov	r22, r14
    4522:	03 df       	rcall	.-506    	; 0x432a <__clear_bits>
    4524:	01 c0       	rjmp	.+2      	; 0x4528 <__eeprom_write_bits+0x50>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	eb 2d       	mov	r30, r11
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	28 e0       	ldi	r18, 0x08	; 8
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	20 1b       	sub	r18, r16
    4532:	31 0b       	sbc	r19, r17
    4534:	2e 19       	sub	r18, r14
    4536:	3f 09       	sbc	r19, r15
    4538:	af 01       	movw	r20, r30
    453a:	02 c0       	rjmp	.+4      	; 0x4540 <__eeprom_write_bits+0x68>
    453c:	44 0f       	add	r20, r20
    453e:	55 1f       	adc	r21, r21
    4540:	2a 95       	dec	r18
    4542:	e2 f7       	brpl	.-8      	; 0x453c <__eeprom_write_bits+0x64>
    4544:	68 2f       	mov	r22, r24
    4546:	64 2b       	or	r22, r20
    4548:	20 97       	sbiw	r28, 0x00	; 0
    454a:	19 f4       	brne	.+6      	; 0x4552 <__eeprom_write_bits+0x7a>
    454c:	c6 01       	movw	r24, r12
    454e:	bd d5       	rcall	.+2938   	; 0x50ca <__eewr_byte_m328>
    4550:	03 c0       	rjmp	.+6      	; 0x4558 <__eeprom_write_bits+0x80>
    4552:	cc 0d       	add	r28, r12
    4554:	dd 1d       	adc	r29, r13
    4556:	68 83       	st	Y, r22
    4558:	df 91       	pop	r29
    455a:	cf 91       	pop	r28
    455c:	1f 91       	pop	r17
    455e:	0f 91       	pop	r16
    4560:	ff 90       	pop	r15
    4562:	ef 90       	pop	r14
    4564:	df 90       	pop	r13
    4566:	cf 90       	pop	r12
    4568:	bf 90       	pop	r11
    456a:	08 95       	ret

0000456c <_eeprom_read_UIntValue32>:
    456c:	4f 92       	push	r4
    456e:	5f 92       	push	r5
    4570:	6f 92       	push	r6
    4572:	7f 92       	push	r7
    4574:	af 92       	push	r10
    4576:	bf 92       	push	r11
    4578:	cf 92       	push	r12
    457a:	df 92       	push	r13
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	28 97       	sbiw	r28, 0x08	; 8
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	29 01       	movw	r4, r18
    459a:	3a 01       	movw	r6, r20
    459c:	ed 82       	std	Y+5, r14	; 0x05
    459e:	fe 82       	std	Y+6, r15	; 0x06
    45a0:	0f 83       	std	Y+7, r16	; 0x07
    45a2:	18 87       	std	Y+8, r17	; 0x08
    45a4:	a6 01       	movw	r20, r12
    45a6:	95 01       	movw	r18, r10
    45a8:	f6 de       	rcall	.-532    	; 0x4396 <__eeprom_read_UIntValue32>
    45aa:	69 83       	std	Y+1, r22	; 0x01
    45ac:	7a 83       	std	Y+2, r23	; 0x02
    45ae:	8b 83       	std	Y+3, r24	; 0x03
    45b0:	9c 83       	std	Y+4, r25	; 0x04
    45b2:	0d 81       	ldd	r16, Y+5	; 0x05
    45b4:	1e 81       	ldd	r17, Y+6	; 0x06
    45b6:	2f 81       	ldd	r18, Y+7	; 0x07
    45b8:	38 85       	ldd	r19, Y+8	; 0x08
    45ba:	b3 01       	movw	r22, r6
    45bc:	a2 01       	movw	r20, r4
    45be:	ce 01       	movw	r24, r28
    45c0:	01 96       	adiw	r24, 0x01	; 1
    45c2:	63 de       	rcall	.-826    	; 0x428a <__limitUIntValue32>
    45c4:	69 81       	ldd	r22, Y+1	; 0x01
    45c6:	7a 81       	ldd	r23, Y+2	; 0x02
    45c8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ca:	9c 81       	ldd	r25, Y+4	; 0x04
    45cc:	28 96       	adiw	r28, 0x08	; 8
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	1f 91       	pop	r17
    45de:	0f 91       	pop	r16
    45e0:	ff 90       	pop	r15
    45e2:	ef 90       	pop	r14
    45e4:	df 90       	pop	r13
    45e6:	cf 90       	pop	r12
    45e8:	bf 90       	pop	r11
    45ea:	af 90       	pop	r10
    45ec:	7f 90       	pop	r7
    45ee:	6f 90       	pop	r6
    45f0:	5f 90       	pop	r5
    45f2:	4f 90       	pop	r4
    45f4:	08 95       	ret

000045f6 <check_eeprom_compatibility>:
    45f6:	af 92       	push	r10
    45f8:	bf 92       	push	r11
    45fa:	cf 92       	push	r12
    45fc:	df 92       	push	r13
    45fe:	ef 92       	push	r14
    4600:	ff 92       	push	r15
    4602:	0f 93       	push	r16
    4604:	1f 93       	push	r17
    4606:	cf 93       	push	r28
    4608:	c8 2f       	mov	r28, r24
    460a:	a1 2c       	mov	r10, r1
    460c:	b1 2c       	mov	r11, r1
    460e:	68 94       	set
    4610:	cc 24       	eor	r12, r12
    4612:	c3 f8       	bld	r12, 3
    4614:	d1 2c       	mov	r13, r1
    4616:	e1 2c       	mov	r14, r1
    4618:	f1 2c       	mov	r15, r1
    461a:	87 01       	movw	r16, r14
    461c:	ea 94       	dec	r14
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	a9 01       	movw	r20, r18
    4624:	68 e0       	ldi	r22, 0x08	; 8
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9f df       	rcall	.-194    	; 0x456c <_eeprom_read_UIntValue32>
    462e:	c6 13       	cpse	r28, r22
    4630:	07 de       	rcall	.-1010   	; 0x4240 <signal_error_state>
    4632:	cf 91       	pop	r28
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	ff 90       	pop	r15
    463a:	ef 90       	pop	r14
    463c:	df 90       	pop	r13
    463e:	cf 90       	pop	r12
    4640:	bf 90       	pop	r11
    4642:	af 90       	pop	r10
    4644:	08 95       	ret

00004646 <_eeprom_read_IntValue32>:
    4646:	2f 92       	push	r2
    4648:	3f 92       	push	r3
    464a:	4f 92       	push	r4
    464c:	5f 92       	push	r5
    464e:	6f 92       	push	r6
    4650:	7f 92       	push	r7
    4652:	8f 92       	push	r8
    4654:	9f 92       	push	r9
    4656:	af 92       	push	r10
    4658:	bf 92       	push	r11
    465a:	cf 92       	push	r12
    465c:	df 92       	push	r13
    465e:	ef 92       	push	r14
    4660:	ff 92       	push	r15
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	00 d0       	rcall	.+0      	; 0x466c <_eeprom_read_IntValue32+0x26>
    466c:	00 d0       	rcall	.+0      	; 0x466e <_eeprom_read_IntValue32+0x28>
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	3b 01       	movw	r6, r22
    4674:	49 01       	movw	r8, r18
    4676:	5a 01       	movw	r10, r20
    4678:	17 01       	movw	r2, r14
    467a:	28 01       	movw	r4, r16
    467c:	96 01       	movw	r18, r12
    467e:	40 e2       	ldi	r20, 0x20	; 32
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	89 de       	rcall	.-750    	; 0x4396 <__eeprom_read_UIntValue32>
    4684:	21 e0       	ldi	r18, 0x01	; 1
    4686:	62 1a       	sub	r6, r18
    4688:	71 08       	sbc	r7, r1
    468a:	8b 01       	movw	r16, r22
    468c:	9c 01       	movw	r18, r24
    468e:	06 2c       	mov	r0, r6
    4690:	04 c0       	rjmp	.+8      	; 0x469a <_eeprom_read_IntValue32+0x54>
    4692:	36 95       	lsr	r19
    4694:	27 95       	ror	r18
    4696:	17 95       	ror	r17
    4698:	07 95       	ror	r16
    469a:	0a 94       	dec	r0
    469c:	d2 f7       	brpl	.-12     	; 0x4692 <_eeprom_read_IntValue32+0x4c>
    469e:	00 ff       	sbrs	r16, 0
    46a0:	0e c0       	rjmp	.+28     	; 0x46be <_eeprom_read_IntValue32+0x78>
    46a2:	0f ef       	ldi	r16, 0xFF	; 255
    46a4:	1f ef       	ldi	r17, 0xFF	; 255
    46a6:	98 01       	movw	r18, r16
    46a8:	04 c0       	rjmp	.+8      	; 0x46b2 <_eeprom_read_IntValue32+0x6c>
    46aa:	00 0f       	add	r16, r16
    46ac:	11 1f       	adc	r17, r17
    46ae:	22 1f       	adc	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	6a 94       	dec	r6
    46b4:	d2 f7       	brpl	.-12     	; 0x46aa <_eeprom_read_IntValue32+0x64>
    46b6:	60 2b       	or	r22, r16
    46b8:	71 2b       	or	r23, r17
    46ba:	82 2b       	or	r24, r18
    46bc:	93 2b       	or	r25, r19
    46be:	69 83       	std	Y+1, r22	; 0x01
    46c0:	7a 83       	std	Y+2, r23	; 0x02
    46c2:	8b 83       	std	Y+3, r24	; 0x03
    46c4:	9c 83       	std	Y+4, r25	; 0x04
    46c6:	92 01       	movw	r18, r4
    46c8:	81 01       	movw	r16, r2
    46ca:	b5 01       	movw	r22, r10
    46cc:	a4 01       	movw	r20, r8
    46ce:	ce 01       	movw	r24, r28
    46d0:	01 96       	adiw	r24, 0x01	; 1
    46d2:	03 de       	rcall	.-1018   	; 0x42da <__limitIntValue32>
    46d4:	69 81       	ldd	r22, Y+1	; 0x01
    46d6:	7a 81       	ldd	r23, Y+2	; 0x02
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	9c 81       	ldd	r25, Y+4	; 0x04
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	1f 91       	pop	r17
    46ea:	0f 91       	pop	r16
    46ec:	ff 90       	pop	r15
    46ee:	ef 90       	pop	r14
    46f0:	df 90       	pop	r13
    46f2:	cf 90       	pop	r12
    46f4:	bf 90       	pop	r11
    46f6:	af 90       	pop	r10
    46f8:	9f 90       	pop	r9
    46fa:	8f 90       	pop	r8
    46fc:	7f 90       	pop	r7
    46fe:	6f 90       	pop	r6
    4700:	5f 90       	pop	r5
    4702:	4f 90       	pop	r4
    4704:	3f 90       	pop	r3
    4706:	2f 90       	pop	r2
    4708:	08 95       	ret

0000470a <_eeprom_write_UIntValue>:
	return y;
}

// Write UIntValue to EEPROM.
void _eeprom_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val, uint8_t * array)
{
    470a:	2f 92       	push	r2
    470c:	3f 92       	push	r3
    470e:	4f 92       	push	r4
    4710:	5f 92       	push	r5
    4712:	7f 92       	push	r7
    4714:	8f 92       	push	r8
    4716:	9f 92       	push	r9
    4718:	af 92       	push	r10
    471a:	bf 92       	push	r11
    471c:	cf 92       	push	r12
    471e:	df 92       	push	r13
    4720:	ef 92       	push	r14
    4722:	ff 92       	push	r15
    4724:	0f 93       	push	r16
    4726:	1f 93       	push	r17
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	2c 01       	movw	r4, r24
    472e:	5b 01       	movw	r10, r22
    4730:	48 01       	movw	r8, r16
	uint16_t byte = bit / 8;
	bit = bit % 8;
    4732:	1c 01       	movw	r2, r24
    4734:	87 e0       	ldi	r24, 0x07	; 7
    4736:	28 22       	and	r2, r24
    4738:	33 24       	eor	r3, r3

	// move bits to the left border
	val = val << (32 - length);
    473a:	80 e2       	ldi	r24, 0x20	; 32
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	6c 01       	movw	r12, r24
    4740:	c6 1a       	sub	r12, r22
    4742:	d7 0a       	sbc	r13, r23
    4744:	da 01       	movw	r26, r20
    4746:	c9 01       	movw	r24, r18
    4748:	04 c0       	rjmp	.+8      	; 0x4752 <_eeprom_write_UIntValue+0x48>
    474a:	88 0f       	add	r24, r24
    474c:	99 1f       	adc	r25, r25
    474e:	aa 1f       	adc	r26, r26
    4750:	bb 1f       	adc	r27, r27
    4752:	ca 94       	dec	r12
    4754:	d2 f7       	brpl	.-12     	; 0x474a <_eeprom_write_UIntValue+0x40>
    4756:	6c 01       	movw	r12, r24
    4758:	7d 01       	movw	r14, r26
	//UART_PUTF("Moved left: val %lu\r\n", val);	
	
	// 1st byte
	uint8_t src_start = 0;
	uint8_t dst_start = bit;
	uint8_t len = MIN(length, 8 - bit);
    475a:	c8 e0       	ldi	r28, 0x08	; 8
    475c:	d0 e0       	ldi	r29, 0x00	; 0
    475e:	c2 19       	sub	r28, r2
    4760:	d3 09       	sbc	r29, r3
    4762:	6c 17       	cp	r22, r28
    4764:	7d 07       	cpc	r23, r29
    4766:	08 f4       	brcc	.+2      	; 0x476a <_eeprom_write_UIntValue+0x60>
    4768:	eb 01       	movw	r28, r22
    476a:	7c 2e       	mov	r7, r28
	uint8_t val8 = __get_bits(val, src_start, len);
    476c:	2c 2f       	mov	r18, r28
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	c7 01       	movw	r24, r14
    4772:	b6 01       	movw	r22, r12
    4774:	f3 dd       	rcall	.-1050   	; 0x435c <__get_bits>
	
	//UART_PUTF4("Write bits to byte %u, dst_start %u, len %u, val8 %u\r\n", byte, dst_start, len, val8);	
	
	__eeprom_write_bits(byte * 8 + dst_start, len, val8, array);
    4776:	dd 27       	eor	r29, r29
    4778:	82 01       	movw	r16, r4
    477a:	08 7f       	andi	r16, 0xF8	; 248
    477c:	94 01       	movw	r18, r8
    477e:	48 2f       	mov	r20, r24
    4780:	be 01       	movw	r22, r28
    4782:	c8 01       	movw	r24, r16
    4784:	82 0d       	add	r24, r2
    4786:	93 1d       	adc	r25, r3
    4788:	a7 de       	rcall	.-690    	; 0x44d8 <__eeprom_write_bits>
	
	dst_start = 0;
	src_start = len;

	while (src_start < length)
    478a:	ca 15       	cp	r28, r10
    478c:	db 05       	cpc	r29, r11
    478e:	10 f5       	brcc	.+68     	; 0x47d4 <_eeprom_write_UIntValue+0xca>
    4790:	08 5f       	subi	r16, 0xF8	; 248
    4792:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		len = MIN(length - src_start, 8);
    4794:	68 94       	set
    4796:	44 24       	eor	r4, r4
    4798:	43 f8       	bld	r4, 3
    479a:	51 2c       	mov	r5, r1
    479c:	d5 01       	movw	r26, r10
    479e:	ac 1b       	sub	r26, r28
    47a0:	bd 0b       	sbc	r27, r29
    47a2:	ed 01       	movw	r28, r26
    47a4:	a9 30       	cpi	r26, 0x09	; 9
    47a6:	b1 05       	cpc	r27, r1
    47a8:	10 f0       	brcs	.+4      	; 0x47ae <_eeprom_write_UIntValue+0xa4>
    47aa:	c4 2d       	mov	r28, r4
    47ac:	d5 2d       	mov	r29, r5
		val8 = __get_bits(val, src_start, len);
    47ae:	2c 2f       	mov	r18, r28
    47b0:	47 2d       	mov	r20, r7
    47b2:	c7 01       	movw	r24, r14
    47b4:	b6 01       	movw	r22, r12
    47b6:	d2 dd       	rcall	.-1116   	; 0x435c <__get_bits>
		byte++;

		//UART_PUTF4(" Byte nr. %d, src_start %d, len %d, val8 %d\r\n", byte, src_start, len, val8);

		__eeprom_write_bits(byte * 8 + dst_start, len, val8, array);
    47b8:	be 01       	movw	r22, r28
    47ba:	77 27       	eor	r23, r23
    47bc:	94 01       	movw	r18, r8
    47be:	48 2f       	mov	r20, r24
    47c0:	c8 01       	movw	r24, r16
    47c2:	8a de       	rcall	.-748    	; 0x44d8 <__eeprom_write_bits>
		
		src_start += len;
    47c4:	7c 0e       	add	r7, r28
	__eeprom_write_bits(byte * 8 + dst_start, len, val8, array);
	
	dst_start = 0;
	src_start = len;

	while (src_start < length)
    47c6:	c7 2d       	mov	r28, r7
    47c8:	d0 e0       	ldi	r29, 0x00	; 0
    47ca:	08 5f       	subi	r16, 0xF8	; 248
    47cc:	1f 4f       	sbci	r17, 0xFF	; 255
    47ce:	ca 15       	cp	r28, r10
    47d0:	db 05       	cpc	r29, r11
    47d2:	20 f3       	brcs	.-56     	; 0x479c <_eeprom_write_UIntValue+0x92>

		__eeprom_write_bits(byte * 8 + dst_start, len, val8, array);
		
		src_start += len;
	}
}
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
    47e4:	bf 90       	pop	r11
    47e6:	af 90       	pop	r10
    47e8:	9f 90       	pop	r9
    47ea:	8f 90       	pop	r8
    47ec:	7f 90       	pop	r7
    47ee:	5f 90       	pop	r5
    47f0:	4f 90       	pop	r4
    47f2:	3f 90       	pop	r3
    47f4:	2f 90       	pop	r2
    47f6:	08 95       	ret

000047f8 <inc_packetcounter>:

void inc_packetcounter(void)
{
    47f8:	cf 92       	push	r12
    47fa:	df 92       	push	r13
    47fc:	ef 92       	push	r14
    47fe:	ff 92       	push	r15
    4800:	0f 93       	push	r16
    4802:	1f 93       	push	r17
	packetcounter++;
    4804:	c0 90 4d 02 	lds	r12, 0x024D
    4808:	d0 90 4e 02 	lds	r13, 0x024E
    480c:	e0 90 4f 02 	lds	r14, 0x024F
    4810:	f0 90 50 02 	lds	r15, 0x0250
    4814:	8f ef       	ldi	r24, 0xFF	; 255
    4816:	c8 1a       	sub	r12, r24
    4818:	d8 0a       	sbc	r13, r24
    481a:	e8 0a       	sbc	r14, r24
    481c:	f8 0a       	sbc	r15, r24
    481e:	c0 92 4d 02 	sts	0x024D, r12
    4822:	d0 92 4e 02 	sts	0x024E, r13
    4826:	e0 92 4f 02 	sts	0x024F, r14
    482a:	f0 92 50 02 	sts	0x0250, r15
	
	if (packetcounter % PACKET_COUNTER_WRITE_CYCLE == 0)
    482e:	c7 01       	movw	r24, r14
    4830:	b6 01       	movw	r22, r12
    4832:	24 e6       	ldi	r18, 0x64	; 100
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e0       	ldi	r20, 0x00	; 0
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	0c d2       	rcall	.+1048   	; 0x4c54 <__udivmodsi4>
    483c:	67 2b       	or	r22, r23
    483e:	68 2b       	or	r22, r24
    4840:	69 2b       	or	r22, r25
    4842:	49 f4       	brne	.+18     	; 0x4856 <inc_packetcounter+0x5e>
	return _eeprom_read_IntValue32(bit, length, minval, maxval, NULL);
}

static inline void eeprom_write_UIntValue(uint16_t bit, uint16_t length, uint32_t val)
{
	_eeprom_write_UIntValue(bit, length, val, NULL);
    4844:	00 e0       	ldi	r16, 0x00	; 0
    4846:	10 e0       	ldi	r17, 0x00	; 0
    4848:	a7 01       	movw	r20, r14
    484a:	96 01       	movw	r18, r12
    484c:	68 e1       	ldi	r22, 0x18	; 24
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	80 e5       	ldi	r24, 0x50	; 80
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	5a df       	rcall	.-332    	; 0x470a <_eeprom_write_UIntValue>
	{
		e2p_generic_set_packetcounter(packetcounter);
	}
}
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	ff 90       	pop	r15
    485c:	ef 90       	pop	r14
    485e:	df 90       	pop	r13
    4860:	cf 90       	pop	r12
    4862:	08 95       	ret

00004864 <__cmpsf2>:
    4864:	6c d0       	rcall	.+216    	; 0x493e <__fp_cmp>
    4866:	08 f4       	brcc	.+2      	; 0x486a <__cmpsf2+0x6>
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	08 95       	ret

0000486c <__fixunssfsi>:
    486c:	bc d0       	rcall	.+376    	; 0x49e6 <__fp_splitA>
    486e:	88 f0       	brcs	.+34     	; 0x4892 <__fixunssfsi+0x26>
    4870:	9f 57       	subi	r25, 0x7F	; 127
    4872:	90 f0       	brcs	.+36     	; 0x4898 <__fixunssfsi+0x2c>
    4874:	b9 2f       	mov	r27, r25
    4876:	99 27       	eor	r25, r25
    4878:	b7 51       	subi	r27, 0x17	; 23
    487a:	a0 f0       	brcs	.+40     	; 0x48a4 <__fixunssfsi+0x38>
    487c:	d1 f0       	breq	.+52     	; 0x48b2 <__fixunssfsi+0x46>
    487e:	66 0f       	add	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	88 1f       	adc	r24, r24
    4884:	99 1f       	adc	r25, r25
    4886:	1a f0       	brmi	.+6      	; 0x488e <__fixunssfsi+0x22>
    4888:	ba 95       	dec	r27
    488a:	c9 f7       	brne	.-14     	; 0x487e <__fixunssfsi+0x12>
    488c:	12 c0       	rjmp	.+36     	; 0x48b2 <__fixunssfsi+0x46>
    488e:	b1 30       	cpi	r27, 0x01	; 1
    4890:	81 f0       	breq	.+32     	; 0x48b2 <__fixunssfsi+0x46>
    4892:	c3 d0       	rcall	.+390    	; 0x4a1a <__fp_zero>
    4894:	b1 e0       	ldi	r27, 0x01	; 1
    4896:	08 95       	ret
    4898:	c0 c0       	rjmp	.+384    	; 0x4a1a <__fp_zero>
    489a:	67 2f       	mov	r22, r23
    489c:	78 2f       	mov	r23, r24
    489e:	88 27       	eor	r24, r24
    48a0:	b8 5f       	subi	r27, 0xF8	; 248
    48a2:	39 f0       	breq	.+14     	; 0x48b2 <__fixunssfsi+0x46>
    48a4:	b9 3f       	cpi	r27, 0xF9	; 249
    48a6:	cc f3       	brlt	.-14     	; 0x489a <__fixunssfsi+0x2e>
    48a8:	86 95       	lsr	r24
    48aa:	77 95       	ror	r23
    48ac:	67 95       	ror	r22
    48ae:	b3 95       	inc	r27
    48b0:	d9 f7       	brne	.-10     	; 0x48a8 <__fixunssfsi+0x3c>
    48b2:	3e f4       	brtc	.+14     	; 0x48c2 <__fixunssfsi+0x56>
    48b4:	90 95       	com	r25
    48b6:	80 95       	com	r24
    48b8:	70 95       	com	r23
    48ba:	61 95       	neg	r22
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	8f 4f       	sbci	r24, 0xFF	; 255
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	08 95       	ret

000048c4 <__floatunsisf>:
    48c4:	e8 94       	clt
    48c6:	09 c0       	rjmp	.+18     	; 0x48da <__floatsisf+0x12>

000048c8 <__floatsisf>:
    48c8:	97 fb       	bst	r25, 7
    48ca:	3e f4       	brtc	.+14     	; 0x48da <__floatsisf+0x12>
    48cc:	90 95       	com	r25
    48ce:	80 95       	com	r24
    48d0:	70 95       	com	r23
    48d2:	61 95       	neg	r22
    48d4:	7f 4f       	sbci	r23, 0xFF	; 255
    48d6:	8f 4f       	sbci	r24, 0xFF	; 255
    48d8:	9f 4f       	sbci	r25, 0xFF	; 255
    48da:	99 23       	and	r25, r25
    48dc:	a9 f0       	breq	.+42     	; 0x4908 <__floatsisf+0x40>
    48de:	f9 2f       	mov	r31, r25
    48e0:	96 e9       	ldi	r25, 0x96	; 150
    48e2:	bb 27       	eor	r27, r27
    48e4:	93 95       	inc	r25
    48e6:	f6 95       	lsr	r31
    48e8:	87 95       	ror	r24
    48ea:	77 95       	ror	r23
    48ec:	67 95       	ror	r22
    48ee:	b7 95       	ror	r27
    48f0:	f1 11       	cpse	r31, r1
    48f2:	f8 cf       	rjmp	.-16     	; 0x48e4 <__floatsisf+0x1c>
    48f4:	fa f4       	brpl	.+62     	; 0x4934 <__floatsisf+0x6c>
    48f6:	bb 0f       	add	r27, r27
    48f8:	11 f4       	brne	.+4      	; 0x48fe <__floatsisf+0x36>
    48fa:	60 ff       	sbrs	r22, 0
    48fc:	1b c0       	rjmp	.+54     	; 0x4934 <__floatsisf+0x6c>
    48fe:	6f 5f       	subi	r22, 0xFF	; 255
    4900:	7f 4f       	sbci	r23, 0xFF	; 255
    4902:	8f 4f       	sbci	r24, 0xFF	; 255
    4904:	9f 4f       	sbci	r25, 0xFF	; 255
    4906:	16 c0       	rjmp	.+44     	; 0x4934 <__floatsisf+0x6c>
    4908:	88 23       	and	r24, r24
    490a:	11 f0       	breq	.+4      	; 0x4910 <__floatsisf+0x48>
    490c:	96 e9       	ldi	r25, 0x96	; 150
    490e:	11 c0       	rjmp	.+34     	; 0x4932 <__floatsisf+0x6a>
    4910:	77 23       	and	r23, r23
    4912:	21 f0       	breq	.+8      	; 0x491c <__floatsisf+0x54>
    4914:	9e e8       	ldi	r25, 0x8E	; 142
    4916:	87 2f       	mov	r24, r23
    4918:	76 2f       	mov	r23, r22
    491a:	05 c0       	rjmp	.+10     	; 0x4926 <__floatsisf+0x5e>
    491c:	66 23       	and	r22, r22
    491e:	71 f0       	breq	.+28     	; 0x493c <__floatsisf+0x74>
    4920:	96 e8       	ldi	r25, 0x86	; 134
    4922:	86 2f       	mov	r24, r22
    4924:	70 e0       	ldi	r23, 0x00	; 0
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	2a f0       	brmi	.+10     	; 0x4934 <__floatsisf+0x6c>
    492a:	9a 95       	dec	r25
    492c:	66 0f       	add	r22, r22
    492e:	77 1f       	adc	r23, r23
    4930:	88 1f       	adc	r24, r24
    4932:	da f7       	brpl	.-10     	; 0x492a <__floatsisf+0x62>
    4934:	88 0f       	add	r24, r24
    4936:	96 95       	lsr	r25
    4938:	87 95       	ror	r24
    493a:	97 f9       	bld	r25, 7
    493c:	08 95       	ret

0000493e <__fp_cmp>:
    493e:	99 0f       	add	r25, r25
    4940:	00 08       	sbc	r0, r0
    4942:	55 0f       	add	r21, r21
    4944:	aa 0b       	sbc	r26, r26
    4946:	e0 e8       	ldi	r30, 0x80	; 128
    4948:	fe ef       	ldi	r31, 0xFE	; 254
    494a:	16 16       	cp	r1, r22
    494c:	17 06       	cpc	r1, r23
    494e:	e8 07       	cpc	r30, r24
    4950:	f9 07       	cpc	r31, r25
    4952:	c0 f0       	brcs	.+48     	; 0x4984 <__fp_cmp+0x46>
    4954:	12 16       	cp	r1, r18
    4956:	13 06       	cpc	r1, r19
    4958:	e4 07       	cpc	r30, r20
    495a:	f5 07       	cpc	r31, r21
    495c:	98 f0       	brcs	.+38     	; 0x4984 <__fp_cmp+0x46>
    495e:	62 1b       	sub	r22, r18
    4960:	73 0b       	sbc	r23, r19
    4962:	84 0b       	sbc	r24, r20
    4964:	95 0b       	sbc	r25, r21
    4966:	39 f4       	brne	.+14     	; 0x4976 <__fp_cmp+0x38>
    4968:	0a 26       	eor	r0, r26
    496a:	61 f0       	breq	.+24     	; 0x4984 <__fp_cmp+0x46>
    496c:	23 2b       	or	r18, r19
    496e:	24 2b       	or	r18, r20
    4970:	25 2b       	or	r18, r21
    4972:	21 f4       	brne	.+8      	; 0x497c <__fp_cmp+0x3e>
    4974:	08 95       	ret
    4976:	0a 26       	eor	r0, r26
    4978:	09 f4       	brne	.+2      	; 0x497c <__fp_cmp+0x3e>
    497a:	a1 40       	sbci	r26, 0x01	; 1
    497c:	a6 95       	lsr	r26
    497e:	8f ef       	ldi	r24, 0xFF	; 255
    4980:	81 1d       	adc	r24, r1
    4982:	81 1d       	adc	r24, r1
    4984:	08 95       	ret

00004986 <__fp_inf>:
    4986:	97 f9       	bld	r25, 7
    4988:	9f 67       	ori	r25, 0x7F	; 127
    498a:	80 e8       	ldi	r24, 0x80	; 128
    498c:	70 e0       	ldi	r23, 0x00	; 0
    498e:	60 e0       	ldi	r22, 0x00	; 0
    4990:	08 95       	ret

00004992 <__fp_nan>:
    4992:	9f ef       	ldi	r25, 0xFF	; 255
    4994:	80 ec       	ldi	r24, 0xC0	; 192
    4996:	08 95       	ret

00004998 <__fp_pscA>:
    4998:	00 24       	eor	r0, r0
    499a:	0a 94       	dec	r0
    499c:	16 16       	cp	r1, r22
    499e:	17 06       	cpc	r1, r23
    49a0:	18 06       	cpc	r1, r24
    49a2:	09 06       	cpc	r0, r25
    49a4:	08 95       	ret

000049a6 <__fp_pscB>:
    49a6:	00 24       	eor	r0, r0
    49a8:	0a 94       	dec	r0
    49aa:	12 16       	cp	r1, r18
    49ac:	13 06       	cpc	r1, r19
    49ae:	14 06       	cpc	r1, r20
    49b0:	05 06       	cpc	r0, r21
    49b2:	08 95       	ret

000049b4 <__fp_round>:
    49b4:	09 2e       	mov	r0, r25
    49b6:	03 94       	inc	r0
    49b8:	00 0c       	add	r0, r0
    49ba:	11 f4       	brne	.+4      	; 0x49c0 <__fp_round+0xc>
    49bc:	88 23       	and	r24, r24
    49be:	52 f0       	brmi	.+20     	; 0x49d4 <__fp_round+0x20>
    49c0:	bb 0f       	add	r27, r27
    49c2:	40 f4       	brcc	.+16     	; 0x49d4 <__fp_round+0x20>
    49c4:	bf 2b       	or	r27, r31
    49c6:	11 f4       	brne	.+4      	; 0x49cc <__fp_round+0x18>
    49c8:	60 ff       	sbrs	r22, 0
    49ca:	04 c0       	rjmp	.+8      	; 0x49d4 <__fp_round+0x20>
    49cc:	6f 5f       	subi	r22, 0xFF	; 255
    49ce:	7f 4f       	sbci	r23, 0xFF	; 255
    49d0:	8f 4f       	sbci	r24, 0xFF	; 255
    49d2:	9f 4f       	sbci	r25, 0xFF	; 255
    49d4:	08 95       	ret

000049d6 <__fp_split3>:
    49d6:	57 fd       	sbrc	r21, 7
    49d8:	90 58       	subi	r25, 0x80	; 128
    49da:	44 0f       	add	r20, r20
    49dc:	55 1f       	adc	r21, r21
    49de:	59 f0       	breq	.+22     	; 0x49f6 <__fp_splitA+0x10>
    49e0:	5f 3f       	cpi	r21, 0xFF	; 255
    49e2:	71 f0       	breq	.+28     	; 0x4a00 <__fp_splitA+0x1a>
    49e4:	47 95       	ror	r20

000049e6 <__fp_splitA>:
    49e6:	88 0f       	add	r24, r24
    49e8:	97 fb       	bst	r25, 7
    49ea:	99 1f       	adc	r25, r25
    49ec:	61 f0       	breq	.+24     	; 0x4a06 <__fp_splitA+0x20>
    49ee:	9f 3f       	cpi	r25, 0xFF	; 255
    49f0:	79 f0       	breq	.+30     	; 0x4a10 <__fp_splitA+0x2a>
    49f2:	87 95       	ror	r24
    49f4:	08 95       	ret
    49f6:	12 16       	cp	r1, r18
    49f8:	13 06       	cpc	r1, r19
    49fa:	14 06       	cpc	r1, r20
    49fc:	55 1f       	adc	r21, r21
    49fe:	f2 cf       	rjmp	.-28     	; 0x49e4 <__fp_split3+0xe>
    4a00:	46 95       	lsr	r20
    4a02:	f1 df       	rcall	.-30     	; 0x49e6 <__fp_splitA>
    4a04:	08 c0       	rjmp	.+16     	; 0x4a16 <__fp_splitA+0x30>
    4a06:	16 16       	cp	r1, r22
    4a08:	17 06       	cpc	r1, r23
    4a0a:	18 06       	cpc	r1, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	f1 cf       	rjmp	.-30     	; 0x49f2 <__fp_splitA+0xc>
    4a10:	86 95       	lsr	r24
    4a12:	71 05       	cpc	r23, r1
    4a14:	61 05       	cpc	r22, r1
    4a16:	08 94       	sec
    4a18:	08 95       	ret

00004a1a <__fp_zero>:
    4a1a:	e8 94       	clt

00004a1c <__fp_szero>:
    4a1c:	bb 27       	eor	r27, r27
    4a1e:	66 27       	eor	r22, r22
    4a20:	77 27       	eor	r23, r23
    4a22:	cb 01       	movw	r24, r22
    4a24:	97 f9       	bld	r25, 7
    4a26:	08 95       	ret

00004a28 <__gesf2>:
    4a28:	8a df       	rcall	.-236    	; 0x493e <__fp_cmp>
    4a2a:	08 f4       	brcc	.+2      	; 0x4a2e <__gesf2+0x6>
    4a2c:	8f ef       	ldi	r24, 0xFF	; 255
    4a2e:	08 95       	ret

00004a30 <__mulsf3>:
    4a30:	0b d0       	rcall	.+22     	; 0x4a48 <__mulsf3x>
    4a32:	c0 cf       	rjmp	.-128    	; 0x49b4 <__fp_round>
    4a34:	b1 df       	rcall	.-158    	; 0x4998 <__fp_pscA>
    4a36:	28 f0       	brcs	.+10     	; 0x4a42 <__mulsf3+0x12>
    4a38:	b6 df       	rcall	.-148    	; 0x49a6 <__fp_pscB>
    4a3a:	18 f0       	brcs	.+6      	; 0x4a42 <__mulsf3+0x12>
    4a3c:	95 23       	and	r25, r21
    4a3e:	09 f0       	breq	.+2      	; 0x4a42 <__mulsf3+0x12>
    4a40:	a2 cf       	rjmp	.-188    	; 0x4986 <__fp_inf>
    4a42:	a7 cf       	rjmp	.-178    	; 0x4992 <__fp_nan>
    4a44:	11 24       	eor	r1, r1
    4a46:	ea cf       	rjmp	.-44     	; 0x4a1c <__fp_szero>

00004a48 <__mulsf3x>:
    4a48:	c6 df       	rcall	.-116    	; 0x49d6 <__fp_split3>
    4a4a:	a0 f3       	brcs	.-24     	; 0x4a34 <__mulsf3+0x4>

00004a4c <__mulsf3_pse>:
    4a4c:	95 9f       	mul	r25, r21
    4a4e:	d1 f3       	breq	.-12     	; 0x4a44 <__mulsf3+0x14>
    4a50:	95 0f       	add	r25, r21
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	55 1f       	adc	r21, r21
    4a56:	62 9f       	mul	r22, r18
    4a58:	f0 01       	movw	r30, r0
    4a5a:	72 9f       	mul	r23, r18
    4a5c:	bb 27       	eor	r27, r27
    4a5e:	f0 0d       	add	r31, r0
    4a60:	b1 1d       	adc	r27, r1
    4a62:	63 9f       	mul	r22, r19
    4a64:	aa 27       	eor	r26, r26
    4a66:	f0 0d       	add	r31, r0
    4a68:	b1 1d       	adc	r27, r1
    4a6a:	aa 1f       	adc	r26, r26
    4a6c:	64 9f       	mul	r22, r20
    4a6e:	66 27       	eor	r22, r22
    4a70:	b0 0d       	add	r27, r0
    4a72:	a1 1d       	adc	r26, r1
    4a74:	66 1f       	adc	r22, r22
    4a76:	82 9f       	mul	r24, r18
    4a78:	22 27       	eor	r18, r18
    4a7a:	b0 0d       	add	r27, r0
    4a7c:	a1 1d       	adc	r26, r1
    4a7e:	62 1f       	adc	r22, r18
    4a80:	73 9f       	mul	r23, r19
    4a82:	b0 0d       	add	r27, r0
    4a84:	a1 1d       	adc	r26, r1
    4a86:	62 1f       	adc	r22, r18
    4a88:	83 9f       	mul	r24, r19
    4a8a:	a0 0d       	add	r26, r0
    4a8c:	61 1d       	adc	r22, r1
    4a8e:	22 1f       	adc	r18, r18
    4a90:	74 9f       	mul	r23, r20
    4a92:	33 27       	eor	r19, r19
    4a94:	a0 0d       	add	r26, r0
    4a96:	61 1d       	adc	r22, r1
    4a98:	23 1f       	adc	r18, r19
    4a9a:	84 9f       	mul	r24, r20
    4a9c:	60 0d       	add	r22, r0
    4a9e:	21 1d       	adc	r18, r1
    4aa0:	82 2f       	mov	r24, r18
    4aa2:	76 2f       	mov	r23, r22
    4aa4:	6a 2f       	mov	r22, r26
    4aa6:	11 24       	eor	r1, r1
    4aa8:	9f 57       	subi	r25, 0x7F	; 127
    4aaa:	50 40       	sbci	r21, 0x00	; 0
    4aac:	8a f0       	brmi	.+34     	; 0x4ad0 <__mulsf3_pse+0x84>
    4aae:	e1 f0       	breq	.+56     	; 0x4ae8 <__mulsf3_pse+0x9c>
    4ab0:	88 23       	and	r24, r24
    4ab2:	4a f0       	brmi	.+18     	; 0x4ac6 <__mulsf3_pse+0x7a>
    4ab4:	ee 0f       	add	r30, r30
    4ab6:	ff 1f       	adc	r31, r31
    4ab8:	bb 1f       	adc	r27, r27
    4aba:	66 1f       	adc	r22, r22
    4abc:	77 1f       	adc	r23, r23
    4abe:	88 1f       	adc	r24, r24
    4ac0:	91 50       	subi	r25, 0x01	; 1
    4ac2:	50 40       	sbci	r21, 0x00	; 0
    4ac4:	a9 f7       	brne	.-22     	; 0x4ab0 <__mulsf3_pse+0x64>
    4ac6:	9e 3f       	cpi	r25, 0xFE	; 254
    4ac8:	51 05       	cpc	r21, r1
    4aca:	70 f0       	brcs	.+28     	; 0x4ae8 <__mulsf3_pse+0x9c>
    4acc:	5c cf       	rjmp	.-328    	; 0x4986 <__fp_inf>
    4ace:	a6 cf       	rjmp	.-180    	; 0x4a1c <__fp_szero>
    4ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ad2:	ec f3       	brlt	.-6      	; 0x4ace <__mulsf3_pse+0x82>
    4ad4:	98 3e       	cpi	r25, 0xE8	; 232
    4ad6:	dc f3       	brlt	.-10     	; 0x4ace <__mulsf3_pse+0x82>
    4ad8:	86 95       	lsr	r24
    4ada:	77 95       	ror	r23
    4adc:	67 95       	ror	r22
    4ade:	b7 95       	ror	r27
    4ae0:	f7 95       	ror	r31
    4ae2:	e7 95       	ror	r30
    4ae4:	9f 5f       	subi	r25, 0xFF	; 255
    4ae6:	c1 f7       	brne	.-16     	; 0x4ad8 <__mulsf3_pse+0x8c>
    4ae8:	fe 2b       	or	r31, r30
    4aea:	88 0f       	add	r24, r24
    4aec:	91 1d       	adc	r25, r1
    4aee:	96 95       	lsr	r25
    4af0:	87 95       	ror	r24
    4af2:	97 f9       	bld	r25, 7
    4af4:	08 95       	ret

00004af6 <aes256_encrypt_cbc>:
    4af6:	ef 92       	push	r14
    4af8:	ff 92       	push	r15
    4afa:	0f 93       	push	r16
    4afc:	1f 93       	push	r17
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	ec 01       	movw	r28, r24
    4b04:	e6 2e       	mov	r14, r22
    4b06:	86 2f       	mov	r24, r22
    4b08:	8f 70       	andi	r24, 0x0F	; 15
    4b0a:	59 f0       	breq	.+22     	; 0x4b22 <aes256_encrypt_cbc+0x2c>
    4b0c:	10 e1       	ldi	r17, 0x10	; 16
    4b0e:	18 1b       	sub	r17, r24
    4b10:	41 2f       	mov	r20, r17
    4b12:	50 e0       	ldi	r21, 0x00	; 0
    4b14:	60 e0       	ldi	r22, 0x00	; 0
    4b16:	70 e0       	ldi	r23, 0x00	; 0
    4b18:	ce 01       	movw	r24, r28
    4b1a:	8e 0d       	add	r24, r14
    4b1c:	91 1d       	adc	r25, r1
    4b1e:	d4 d0       	rcall	.+424    	; 0x4cc8 <memset>
    4b20:	e1 0e       	add	r14, r17
    4b22:	69 e1       	ldi	r22, 0x19	; 25
    4b24:	74 e0       	ldi	r23, 0x04	; 4
    4b26:	89 ef       	ldi	r24, 0xF9	; 249
    4b28:	93 e0       	ldi	r25, 0x03	; 3
    4b2a:	0e 94 00 0b 	call	0x1600	; 0x1600 <aes256_init>
    4b2e:	f1 2c       	mov	r15, r1
    4b30:	fe 14       	cp	r15, r14
    4b32:	08 f5       	brcc	.+66     	; 0x4b76 <aes256_encrypt_cbc+0x80>
    4b34:	4f 2d       	mov	r20, r15
    4b36:	50 e0       	ldi	r21, 0x00	; 0
    4b38:	ff 20       	and	r15, r15
    4b3a:	99 f0       	breq	.+38     	; 0x4b62 <aes256_encrypt_cbc+0x6c>
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	8e 01       	movw	r16, r28
    4b42:	04 0f       	add	r16, r20
    4b44:	15 1f       	adc	r17, r21
    4b46:	f8 01       	movw	r30, r16
    4b48:	e2 0f       	add	r30, r18
    4b4a:	f3 1f       	adc	r31, r19
    4b4c:	df 01       	movw	r26, r30
    4b4e:	50 97       	sbiw	r26, 0x10	; 16
    4b50:	80 81       	ld	r24, Z
    4b52:	9c 91       	ld	r25, X
    4b54:	89 27       	eor	r24, r25
    4b56:	80 83       	st	Z, r24
    4b58:	2f 5f       	subi	r18, 0xFF	; 255
    4b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5c:	20 31       	cpi	r18, 0x10	; 16
    4b5e:	31 05       	cpc	r19, r1
    4b60:	91 f7       	brne	.-28     	; 0x4b46 <aes256_encrypt_cbc+0x50>
    4b62:	69 e1       	ldi	r22, 0x19	; 25
    4b64:	74 e0       	ldi	r23, 0x04	; 4
    4b66:	ce 01       	movw	r24, r28
    4b68:	84 0f       	add	r24, r20
    4b6a:	95 1f       	adc	r25, r21
    4b6c:	0e 94 00 09 	call	0x1200	; 0x1200 <aes256_enc>
    4b70:	80 e1       	ldi	r24, 0x10	; 16
    4b72:	f8 0e       	add	r15, r24
    4b74:	dd cf       	rjmp	.-70     	; 0x4b30 <aes256_encrypt_cbc+0x3a>
    4b76:	8f 2d       	mov	r24, r15
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	1f 91       	pop	r17
    4b7e:	0f 91       	pop	r16
    4b80:	ff 90       	pop	r15
    4b82:	ef 90       	pop	r14
    4b84:	08 95       	ret

00004b86 <aes256_decrypt_cbc>:
    4b86:	ef 92       	push	r14
    4b88:	ff 92       	push	r15
    4b8a:	0f 93       	push	r16
    4b8c:	1f 93       	push	r17
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	1f 92       	push	r1
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	8c 01       	movw	r16, r24
    4b9a:	46 2f       	mov	r20, r22
    4b9c:	86 2f       	mov	r24, r22
    4b9e:	8f 70       	andi	r24, 0x0F	; 15
    4ba0:	11 f0       	breq	.+4      	; 0x4ba6 <aes256_decrypt_cbc+0x20>
    4ba2:	40 5f       	subi	r20, 0xF0	; 240
    4ba4:	48 1b       	sub	r20, r24
    4ba6:	69 e1       	ldi	r22, 0x19	; 25
    4ba8:	74 e0       	ldi	r23, 0x04	; 4
    4baa:	89 ef       	ldi	r24, 0xF9	; 249
    4bac:	93 e0       	ldi	r25, 0x03	; 3
    4bae:	49 83       	std	Y+1, r20	; 0x01
    4bb0:	0e 94 00 0b 	call	0x1600	; 0x1600 <aes256_init>
    4bb4:	49 81       	ldd	r20, Y+1	; 0x01
    4bb6:	44 23       	and	r20, r20
    4bb8:	f1 f0       	breq	.+60     	; 0x4bf6 <aes256_decrypt_cbc+0x70>
    4bba:	40 51       	subi	r20, 0x10	; 16
    4bbc:	78 01       	movw	r14, r16
    4bbe:	e4 0e       	add	r14, r20
    4bc0:	f1 1c       	adc	r15, r1
    4bc2:	69 e1       	ldi	r22, 0x19	; 25
    4bc4:	74 e0       	ldi	r23, 0x04	; 4
    4bc6:	c7 01       	movw	r24, r14
    4bc8:	49 83       	std	Y+1, r20	; 0x01
    4bca:	0e 94 80 06 	call	0xd00	; 0xd00 <aes256_dec>
    4bce:	49 81       	ldd	r20, Y+1	; 0x01
    4bd0:	44 23       	and	r20, r20
    4bd2:	89 f0       	breq	.+34     	; 0x4bf6 <aes256_decrypt_cbc+0x70>
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	f7 01       	movw	r30, r14
    4bda:	e2 0f       	add	r30, r18
    4bdc:	f3 1f       	adc	r31, r19
    4bde:	df 01       	movw	r26, r30
    4be0:	50 97       	sbiw	r26, 0x10	; 16
    4be2:	80 81       	ld	r24, Z
    4be4:	9c 91       	ld	r25, X
    4be6:	89 27       	eor	r24, r25
    4be8:	80 83       	st	Z, r24
    4bea:	2f 5f       	subi	r18, 0xFF	; 255
    4bec:	3f 4f       	sbci	r19, 0xFF	; 255
    4bee:	20 31       	cpi	r18, 0x10	; 16
    4bf0:	31 05       	cpc	r19, r1
    4bf2:	91 f7       	brne	.-28     	; 0x4bd8 <aes256_decrypt_cbc+0x52>
    4bf4:	e0 cf       	rjmp	.-64     	; 0x4bb6 <aes256_decrypt_cbc+0x30>
    4bf6:	0f 90       	pop	r0
    4bf8:	df 91       	pop	r29
    4bfa:	cf 91       	pop	r28
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	ff 90       	pop	r15
    4c02:	ef 90       	pop	r14
    4c04:	08 95       	ret

00004c06 <__udivmodhi4>:
    4c06:	aa 1b       	sub	r26, r26
    4c08:	bb 1b       	sub	r27, r27
    4c0a:	51 e1       	ldi	r21, 0x11	; 17
    4c0c:	07 c0       	rjmp	.+14     	; 0x4c1c <__udivmodhi4_ep>

00004c0e <__udivmodhi4_loop>:
    4c0e:	aa 1f       	adc	r26, r26
    4c10:	bb 1f       	adc	r27, r27
    4c12:	a6 17       	cp	r26, r22
    4c14:	b7 07       	cpc	r27, r23
    4c16:	10 f0       	brcs	.+4      	; 0x4c1c <__udivmodhi4_ep>
    4c18:	a6 1b       	sub	r26, r22
    4c1a:	b7 0b       	sbc	r27, r23

00004c1c <__udivmodhi4_ep>:
    4c1c:	88 1f       	adc	r24, r24
    4c1e:	99 1f       	adc	r25, r25
    4c20:	5a 95       	dec	r21
    4c22:	a9 f7       	brne	.-22     	; 0x4c0e <__udivmodhi4_loop>
    4c24:	80 95       	com	r24
    4c26:	90 95       	com	r25
    4c28:	bc 01       	movw	r22, r24
    4c2a:	cd 01       	movw	r24, r26
    4c2c:	08 95       	ret

00004c2e <__divmodhi4>:
    4c2e:	97 fb       	bst	r25, 7
    4c30:	07 2e       	mov	r0, r23
    4c32:	16 f4       	brtc	.+4      	; 0x4c38 <__divmodhi4+0xa>
    4c34:	00 94       	com	r0
    4c36:	06 d0       	rcall	.+12     	; 0x4c44 <__divmodhi4_neg1>
    4c38:	77 fd       	sbrc	r23, 7
    4c3a:	08 d0       	rcall	.+16     	; 0x4c4c <__divmodhi4_neg2>
    4c3c:	e4 df       	rcall	.-56     	; 0x4c06 <__udivmodhi4>
    4c3e:	07 fc       	sbrc	r0, 7
    4c40:	05 d0       	rcall	.+10     	; 0x4c4c <__divmodhi4_neg2>
    4c42:	3e f4       	brtc	.+14     	; 0x4c52 <__divmodhi4_exit>

00004c44 <__divmodhi4_neg1>:
    4c44:	90 95       	com	r25
    4c46:	81 95       	neg	r24
    4c48:	9f 4f       	sbci	r25, 0xFF	; 255
    4c4a:	08 95       	ret

00004c4c <__divmodhi4_neg2>:
    4c4c:	70 95       	com	r23
    4c4e:	61 95       	neg	r22
    4c50:	7f 4f       	sbci	r23, 0xFF	; 255

00004c52 <__divmodhi4_exit>:
    4c52:	08 95       	ret

00004c54 <__udivmodsi4>:
    4c54:	a1 e2       	ldi	r26, 0x21	; 33
    4c56:	1a 2e       	mov	r1, r26
    4c58:	aa 1b       	sub	r26, r26
    4c5a:	bb 1b       	sub	r27, r27
    4c5c:	fd 01       	movw	r30, r26
    4c5e:	0d c0       	rjmp	.+26     	; 0x4c7a <__udivmodsi4_ep>

00004c60 <__udivmodsi4_loop>:
    4c60:	aa 1f       	adc	r26, r26
    4c62:	bb 1f       	adc	r27, r27
    4c64:	ee 1f       	adc	r30, r30
    4c66:	ff 1f       	adc	r31, r31
    4c68:	a2 17       	cp	r26, r18
    4c6a:	b3 07       	cpc	r27, r19
    4c6c:	e4 07       	cpc	r30, r20
    4c6e:	f5 07       	cpc	r31, r21
    4c70:	20 f0       	brcs	.+8      	; 0x4c7a <__udivmodsi4_ep>
    4c72:	a2 1b       	sub	r26, r18
    4c74:	b3 0b       	sbc	r27, r19
    4c76:	e4 0b       	sbc	r30, r20
    4c78:	f5 0b       	sbc	r31, r21

00004c7a <__udivmodsi4_ep>:
    4c7a:	66 1f       	adc	r22, r22
    4c7c:	77 1f       	adc	r23, r23
    4c7e:	88 1f       	adc	r24, r24
    4c80:	99 1f       	adc	r25, r25
    4c82:	1a 94       	dec	r1
    4c84:	69 f7       	brne	.-38     	; 0x4c60 <__udivmodsi4_loop>
    4c86:	60 95       	com	r22
    4c88:	70 95       	com	r23
    4c8a:	80 95       	com	r24
    4c8c:	90 95       	com	r25
    4c8e:	9b 01       	movw	r18, r22
    4c90:	ac 01       	movw	r20, r24
    4c92:	bd 01       	movw	r22, r26
    4c94:	cf 01       	movw	r24, r30
    4c96:	08 95       	ret

00004c98 <__umulhisi3>:
    4c98:	a2 9f       	mul	r26, r18
    4c9a:	b0 01       	movw	r22, r0
    4c9c:	b3 9f       	mul	r27, r19
    4c9e:	c0 01       	movw	r24, r0
    4ca0:	a3 9f       	mul	r26, r19
    4ca2:	70 0d       	add	r23, r0
    4ca4:	81 1d       	adc	r24, r1
    4ca6:	11 24       	eor	r1, r1
    4ca8:	91 1d       	adc	r25, r1
    4caa:	b2 9f       	mul	r27, r18
    4cac:	70 0d       	add	r23, r0
    4cae:	81 1d       	adc	r24, r1
    4cb0:	11 24       	eor	r1, r1
    4cb2:	91 1d       	adc	r25, r1
    4cb4:	08 95       	ret

00004cb6 <memcpy>:
    4cb6:	fb 01       	movw	r30, r22
    4cb8:	dc 01       	movw	r26, r24
    4cba:	02 c0       	rjmp	.+4      	; 0x4cc0 <memcpy+0xa>
    4cbc:	01 90       	ld	r0, Z+
    4cbe:	0d 92       	st	X+, r0
    4cc0:	41 50       	subi	r20, 0x01	; 1
    4cc2:	50 40       	sbci	r21, 0x00	; 0
    4cc4:	d8 f7       	brcc	.-10     	; 0x4cbc <memcpy+0x6>
    4cc6:	08 95       	ret

00004cc8 <memset>:
    4cc8:	dc 01       	movw	r26, r24
    4cca:	01 c0       	rjmp	.+2      	; 0x4cce <memset+0x6>
    4ccc:	6d 93       	st	X+, r22
    4cce:	41 50       	subi	r20, 0x01	; 1
    4cd0:	50 40       	sbci	r21, 0x00	; 0
    4cd2:	e0 f7       	brcc	.-8      	; 0x4ccc <memset+0x4>
    4cd4:	08 95       	ret

00004cd6 <sprintf_P>:
    4cd6:	ae e0       	ldi	r26, 0x0E	; 14
    4cd8:	b0 e0       	ldi	r27, 0x00	; 0
    4cda:	e0 e7       	ldi	r30, 0x70	; 112
    4cdc:	f6 e2       	ldi	r31, 0x26	; 38
    4cde:	b7 c2       	rjmp	.+1390   	; 0x524e <__prologue_saves__+0x1c>
    4ce0:	0d 89       	ldd	r16, Y+21	; 0x15
    4ce2:	1e 89       	ldd	r17, Y+22	; 0x16
    4ce4:	8e e0       	ldi	r24, 0x0E	; 14
    4ce6:	8c 83       	std	Y+4, r24	; 0x04
    4ce8:	1a 83       	std	Y+2, r17	; 0x02
    4cea:	09 83       	std	Y+1, r16	; 0x01
    4cec:	8f ef       	ldi	r24, 0xFF	; 255
    4cee:	9f e7       	ldi	r25, 0x7F	; 127
    4cf0:	9e 83       	std	Y+6, r25	; 0x06
    4cf2:	8d 83       	std	Y+5, r24	; 0x05
    4cf4:	ae 01       	movw	r20, r28
    4cf6:	47 5e       	subi	r20, 0xE7	; 231
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfa:	6f 89       	ldd	r22, Y+23	; 0x17
    4cfc:	78 8d       	ldd	r23, Y+24	; 0x18
    4cfe:	ce 01       	movw	r24, r28
    4d00:	01 96       	adiw	r24, 0x01	; 1
    4d02:	08 d0       	rcall	.+16     	; 0x4d14 <vfprintf>
    4d04:	ef 81       	ldd	r30, Y+7	; 0x07
    4d06:	f8 85       	ldd	r31, Y+8	; 0x08
    4d08:	e0 0f       	add	r30, r16
    4d0a:	f1 1f       	adc	r31, r17
    4d0c:	10 82       	st	Z, r1
    4d0e:	2e 96       	adiw	r28, 0x0e	; 14
    4d10:	e4 e0       	ldi	r30, 0x04	; 4
    4d12:	b9 c2       	rjmp	.+1394   	; 0x5286 <__epilogue_restores__+0x1c>

00004d14 <vfprintf>:
    4d14:	ac e0       	ldi	r26, 0x0C	; 12
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	ef e8       	ldi	r30, 0x8F	; 143
    4d1a:	f6 e2       	ldi	r31, 0x26	; 38
    4d1c:	8a c2       	rjmp	.+1300   	; 0x5232 <__prologue_saves__>
    4d1e:	7c 01       	movw	r14, r24
    4d20:	6b 01       	movw	r12, r22
    4d22:	8a 01       	movw	r16, r20
    4d24:	fc 01       	movw	r30, r24
    4d26:	17 82       	std	Z+7, r1	; 0x07
    4d28:	16 82       	std	Z+6, r1	; 0x06
    4d2a:	83 81       	ldd	r24, Z+3	; 0x03
    4d2c:	81 ff       	sbrs	r24, 1
    4d2e:	b0 c1       	rjmp	.+864    	; 0x5090 <vfprintf+0x37c>
    4d30:	ce 01       	movw	r24, r28
    4d32:	01 96       	adiw	r24, 0x01	; 1
    4d34:	4c 01       	movw	r8, r24
    4d36:	f7 01       	movw	r30, r14
    4d38:	93 81       	ldd	r25, Z+3	; 0x03
    4d3a:	f6 01       	movw	r30, r12
    4d3c:	93 fd       	sbrc	r25, 3
    4d3e:	85 91       	lpm	r24, Z+
    4d40:	93 ff       	sbrs	r25, 3
    4d42:	81 91       	ld	r24, Z+
    4d44:	6f 01       	movw	r12, r30
    4d46:	88 23       	and	r24, r24
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <vfprintf+0x38>
    4d4a:	9e c1       	rjmp	.+828    	; 0x5088 <vfprintf+0x374>
    4d4c:	85 32       	cpi	r24, 0x25	; 37
    4d4e:	39 f4       	brne	.+14     	; 0x4d5e <vfprintf+0x4a>
    4d50:	93 fd       	sbrc	r25, 3
    4d52:	85 91       	lpm	r24, Z+
    4d54:	93 ff       	sbrs	r25, 3
    4d56:	81 91       	ld	r24, Z+
    4d58:	6f 01       	movw	r12, r30
    4d5a:	85 32       	cpi	r24, 0x25	; 37
    4d5c:	21 f4       	brne	.+8      	; 0x4d66 <vfprintf+0x52>
    4d5e:	b7 01       	movw	r22, r14
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	d7 d1       	rcall	.+942    	; 0x5112 <fputc>
    4d64:	e8 cf       	rjmp	.-48     	; 0x4d36 <vfprintf+0x22>
    4d66:	51 2c       	mov	r5, r1
    4d68:	31 2c       	mov	r3, r1
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	20 32       	cpi	r18, 0x20	; 32
    4d6e:	a0 f4       	brcc	.+40     	; 0x4d98 <vfprintf+0x84>
    4d70:	8b 32       	cpi	r24, 0x2B	; 43
    4d72:	69 f0       	breq	.+26     	; 0x4d8e <vfprintf+0x7a>
    4d74:	30 f4       	brcc	.+12     	; 0x4d82 <vfprintf+0x6e>
    4d76:	80 32       	cpi	r24, 0x20	; 32
    4d78:	59 f0       	breq	.+22     	; 0x4d90 <vfprintf+0x7c>
    4d7a:	83 32       	cpi	r24, 0x23	; 35
    4d7c:	69 f4       	brne	.+26     	; 0x4d98 <vfprintf+0x84>
    4d7e:	20 61       	ori	r18, 0x10	; 16
    4d80:	2c c0       	rjmp	.+88     	; 0x4dda <vfprintf+0xc6>
    4d82:	8d 32       	cpi	r24, 0x2D	; 45
    4d84:	39 f0       	breq	.+14     	; 0x4d94 <vfprintf+0x80>
    4d86:	80 33       	cpi	r24, 0x30	; 48
    4d88:	39 f4       	brne	.+14     	; 0x4d98 <vfprintf+0x84>
    4d8a:	21 60       	ori	r18, 0x01	; 1
    4d8c:	26 c0       	rjmp	.+76     	; 0x4dda <vfprintf+0xc6>
    4d8e:	22 60       	ori	r18, 0x02	; 2
    4d90:	24 60       	ori	r18, 0x04	; 4
    4d92:	23 c0       	rjmp	.+70     	; 0x4dda <vfprintf+0xc6>
    4d94:	28 60       	ori	r18, 0x08	; 8
    4d96:	21 c0       	rjmp	.+66     	; 0x4dda <vfprintf+0xc6>
    4d98:	27 fd       	sbrc	r18, 7
    4d9a:	27 c0       	rjmp	.+78     	; 0x4dea <vfprintf+0xd6>
    4d9c:	30 ed       	ldi	r19, 0xD0	; 208
    4d9e:	38 0f       	add	r19, r24
    4da0:	3a 30       	cpi	r19, 0x0A	; 10
    4da2:	78 f4       	brcc	.+30     	; 0x4dc2 <vfprintf+0xae>
    4da4:	26 ff       	sbrs	r18, 6
    4da6:	06 c0       	rjmp	.+12     	; 0x4db4 <vfprintf+0xa0>
    4da8:	fa e0       	ldi	r31, 0x0A	; 10
    4daa:	5f 9e       	mul	r5, r31
    4dac:	30 0d       	add	r19, r0
    4dae:	11 24       	eor	r1, r1
    4db0:	53 2e       	mov	r5, r19
    4db2:	13 c0       	rjmp	.+38     	; 0x4dda <vfprintf+0xc6>
    4db4:	8a e0       	ldi	r24, 0x0A	; 10
    4db6:	38 9e       	mul	r3, r24
    4db8:	30 0d       	add	r19, r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	33 2e       	mov	r3, r19
    4dbe:	20 62       	ori	r18, 0x20	; 32
    4dc0:	0c c0       	rjmp	.+24     	; 0x4dda <vfprintf+0xc6>
    4dc2:	8e 32       	cpi	r24, 0x2E	; 46
    4dc4:	21 f4       	brne	.+8      	; 0x4dce <vfprintf+0xba>
    4dc6:	26 fd       	sbrc	r18, 6
    4dc8:	5f c1       	rjmp	.+702    	; 0x5088 <vfprintf+0x374>
    4dca:	20 64       	ori	r18, 0x40	; 64
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <vfprintf+0xc6>
    4dce:	8c 36       	cpi	r24, 0x6C	; 108
    4dd0:	11 f4       	brne	.+4      	; 0x4dd6 <vfprintf+0xc2>
    4dd2:	20 68       	ori	r18, 0x80	; 128
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <vfprintf+0xc6>
    4dd6:	88 36       	cpi	r24, 0x68	; 104
    4dd8:	41 f4       	brne	.+16     	; 0x4dea <vfprintf+0xd6>
    4dda:	f6 01       	movw	r30, r12
    4ddc:	93 fd       	sbrc	r25, 3
    4dde:	85 91       	lpm	r24, Z+
    4de0:	93 ff       	sbrs	r25, 3
    4de2:	81 91       	ld	r24, Z+
    4de4:	6f 01       	movw	r12, r30
    4de6:	81 11       	cpse	r24, r1
    4de8:	c1 cf       	rjmp	.-126    	; 0x4d6c <vfprintf+0x58>
    4dea:	98 2f       	mov	r25, r24
    4dec:	9f 7d       	andi	r25, 0xDF	; 223
    4dee:	95 54       	subi	r25, 0x45	; 69
    4df0:	93 30       	cpi	r25, 0x03	; 3
    4df2:	28 f4       	brcc	.+10     	; 0x4dfe <vfprintf+0xea>
    4df4:	0c 5f       	subi	r16, 0xFC	; 252
    4df6:	1f 4f       	sbci	r17, 0xFF	; 255
    4df8:	ff e3       	ldi	r31, 0x3F	; 63
    4dfa:	f9 83       	std	Y+1, r31	; 0x01
    4dfc:	0d c0       	rjmp	.+26     	; 0x4e18 <vfprintf+0x104>
    4dfe:	83 36       	cpi	r24, 0x63	; 99
    4e00:	31 f0       	breq	.+12     	; 0x4e0e <vfprintf+0xfa>
    4e02:	83 37       	cpi	r24, 0x73	; 115
    4e04:	71 f0       	breq	.+28     	; 0x4e22 <vfprintf+0x10e>
    4e06:	83 35       	cpi	r24, 0x53	; 83
    4e08:	09 f0       	breq	.+2      	; 0x4e0c <vfprintf+0xf8>
    4e0a:	57 c0       	rjmp	.+174    	; 0x4eba <vfprintf+0x1a6>
    4e0c:	21 c0       	rjmp	.+66     	; 0x4e50 <vfprintf+0x13c>
    4e0e:	f8 01       	movw	r30, r16
    4e10:	80 81       	ld	r24, Z
    4e12:	89 83       	std	Y+1, r24	; 0x01
    4e14:	0e 5f       	subi	r16, 0xFE	; 254
    4e16:	1f 4f       	sbci	r17, 0xFF	; 255
    4e18:	44 24       	eor	r4, r4
    4e1a:	43 94       	inc	r4
    4e1c:	51 2c       	mov	r5, r1
    4e1e:	54 01       	movw	r10, r8
    4e20:	14 c0       	rjmp	.+40     	; 0x4e4a <vfprintf+0x136>
    4e22:	38 01       	movw	r6, r16
    4e24:	f2 e0       	ldi	r31, 0x02	; 2
    4e26:	6f 0e       	add	r6, r31
    4e28:	71 1c       	adc	r7, r1
    4e2a:	f8 01       	movw	r30, r16
    4e2c:	a0 80       	ld	r10, Z
    4e2e:	b1 80       	ldd	r11, Z+1	; 0x01
    4e30:	26 ff       	sbrs	r18, 6
    4e32:	03 c0       	rjmp	.+6      	; 0x4e3a <vfprintf+0x126>
    4e34:	65 2d       	mov	r22, r5
    4e36:	70 e0       	ldi	r23, 0x00	; 0
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <vfprintf+0x12a>
    4e3a:	6f ef       	ldi	r22, 0xFF	; 255
    4e3c:	7f ef       	ldi	r23, 0xFF	; 255
    4e3e:	c5 01       	movw	r24, r10
    4e40:	2c 87       	std	Y+12, r18	; 0x0c
    4e42:	5c d1       	rcall	.+696    	; 0x50fc <strnlen>
    4e44:	2c 01       	movw	r4, r24
    4e46:	83 01       	movw	r16, r6
    4e48:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e4a:	2f 77       	andi	r18, 0x7F	; 127
    4e4c:	22 2e       	mov	r2, r18
    4e4e:	16 c0       	rjmp	.+44     	; 0x4e7c <vfprintf+0x168>
    4e50:	38 01       	movw	r6, r16
    4e52:	f2 e0       	ldi	r31, 0x02	; 2
    4e54:	6f 0e       	add	r6, r31
    4e56:	71 1c       	adc	r7, r1
    4e58:	f8 01       	movw	r30, r16
    4e5a:	a0 80       	ld	r10, Z
    4e5c:	b1 80       	ldd	r11, Z+1	; 0x01
    4e5e:	26 ff       	sbrs	r18, 6
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <vfprintf+0x154>
    4e62:	65 2d       	mov	r22, r5
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <vfprintf+0x158>
    4e68:	6f ef       	ldi	r22, 0xFF	; 255
    4e6a:	7f ef       	ldi	r23, 0xFF	; 255
    4e6c:	c5 01       	movw	r24, r10
    4e6e:	2c 87       	std	Y+12, r18	; 0x0c
    4e70:	3a d1       	rcall	.+628    	; 0x50e6 <strnlen_P>
    4e72:	2c 01       	movw	r4, r24
    4e74:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e76:	20 68       	ori	r18, 0x80	; 128
    4e78:	22 2e       	mov	r2, r18
    4e7a:	83 01       	movw	r16, r6
    4e7c:	23 fc       	sbrc	r2, 3
    4e7e:	19 c0       	rjmp	.+50     	; 0x4eb2 <vfprintf+0x19e>
    4e80:	83 2d       	mov	r24, r3
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	48 16       	cp	r4, r24
    4e86:	59 06       	cpc	r5, r25
    4e88:	a0 f4       	brcc	.+40     	; 0x4eb2 <vfprintf+0x19e>
    4e8a:	b7 01       	movw	r22, r14
    4e8c:	80 e2       	ldi	r24, 0x20	; 32
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	40 d1       	rcall	.+640    	; 0x5112 <fputc>
    4e92:	3a 94       	dec	r3
    4e94:	f5 cf       	rjmp	.-22     	; 0x4e80 <vfprintf+0x16c>
    4e96:	f5 01       	movw	r30, r10
    4e98:	27 fc       	sbrc	r2, 7
    4e9a:	85 91       	lpm	r24, Z+
    4e9c:	27 fe       	sbrs	r2, 7
    4e9e:	81 91       	ld	r24, Z+
    4ea0:	5f 01       	movw	r10, r30
    4ea2:	b7 01       	movw	r22, r14
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	35 d1       	rcall	.+618    	; 0x5112 <fputc>
    4ea8:	31 10       	cpse	r3, r1
    4eaa:	3a 94       	dec	r3
    4eac:	f1 e0       	ldi	r31, 0x01	; 1
    4eae:	4f 1a       	sub	r4, r31
    4eb0:	51 08       	sbc	r5, r1
    4eb2:	41 14       	cp	r4, r1
    4eb4:	51 04       	cpc	r5, r1
    4eb6:	79 f7       	brne	.-34     	; 0x4e96 <vfprintf+0x182>
    4eb8:	de c0       	rjmp	.+444    	; 0x5076 <vfprintf+0x362>
    4eba:	84 36       	cpi	r24, 0x64	; 100
    4ebc:	11 f0       	breq	.+4      	; 0x4ec2 <vfprintf+0x1ae>
    4ebe:	89 36       	cpi	r24, 0x69	; 105
    4ec0:	31 f5       	brne	.+76     	; 0x4f0e <vfprintf+0x1fa>
    4ec2:	f8 01       	movw	r30, r16
    4ec4:	27 ff       	sbrs	r18, 7
    4ec6:	07 c0       	rjmp	.+14     	; 0x4ed6 <vfprintf+0x1c2>
    4ec8:	60 81       	ld	r22, Z
    4eca:	71 81       	ldd	r23, Z+1	; 0x01
    4ecc:	82 81       	ldd	r24, Z+2	; 0x02
    4ece:	93 81       	ldd	r25, Z+3	; 0x03
    4ed0:	0c 5f       	subi	r16, 0xFC	; 252
    4ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed4:	08 c0       	rjmp	.+16     	; 0x4ee6 <vfprintf+0x1d2>
    4ed6:	60 81       	ld	r22, Z
    4ed8:	71 81       	ldd	r23, Z+1	; 0x01
    4eda:	88 27       	eor	r24, r24
    4edc:	77 fd       	sbrc	r23, 7
    4ede:	80 95       	com	r24
    4ee0:	98 2f       	mov	r25, r24
    4ee2:	0e 5f       	subi	r16, 0xFE	; 254
    4ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee6:	2f 76       	andi	r18, 0x6F	; 111
    4ee8:	b2 2e       	mov	r11, r18
    4eea:	97 ff       	sbrs	r25, 7
    4eec:	09 c0       	rjmp	.+18     	; 0x4f00 <vfprintf+0x1ec>
    4eee:	90 95       	com	r25
    4ef0:	80 95       	com	r24
    4ef2:	70 95       	com	r23
    4ef4:	61 95       	neg	r22
    4ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    4efa:	9f 4f       	sbci	r25, 0xFF	; 255
    4efc:	20 68       	ori	r18, 0x80	; 128
    4efe:	b2 2e       	mov	r11, r18
    4f00:	2a e0       	ldi	r18, 0x0A	; 10
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	a4 01       	movw	r20, r8
    4f06:	37 d1       	rcall	.+622    	; 0x5176 <__ultoa_invert>
    4f08:	a8 2e       	mov	r10, r24
    4f0a:	a8 18       	sub	r10, r8
    4f0c:	43 c0       	rjmp	.+134    	; 0x4f94 <vfprintf+0x280>
    4f0e:	85 37       	cpi	r24, 0x75	; 117
    4f10:	29 f4       	brne	.+10     	; 0x4f1c <vfprintf+0x208>
    4f12:	2f 7e       	andi	r18, 0xEF	; 239
    4f14:	b2 2e       	mov	r11, r18
    4f16:	2a e0       	ldi	r18, 0x0A	; 10
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	25 c0       	rjmp	.+74     	; 0x4f66 <vfprintf+0x252>
    4f1c:	f2 2f       	mov	r31, r18
    4f1e:	f9 7f       	andi	r31, 0xF9	; 249
    4f20:	bf 2e       	mov	r11, r31
    4f22:	8f 36       	cpi	r24, 0x6F	; 111
    4f24:	c1 f0       	breq	.+48     	; 0x4f56 <vfprintf+0x242>
    4f26:	18 f4       	brcc	.+6      	; 0x4f2e <vfprintf+0x21a>
    4f28:	88 35       	cpi	r24, 0x58	; 88
    4f2a:	79 f0       	breq	.+30     	; 0x4f4a <vfprintf+0x236>
    4f2c:	ad c0       	rjmp	.+346    	; 0x5088 <vfprintf+0x374>
    4f2e:	80 37       	cpi	r24, 0x70	; 112
    4f30:	19 f0       	breq	.+6      	; 0x4f38 <vfprintf+0x224>
    4f32:	88 37       	cpi	r24, 0x78	; 120
    4f34:	21 f0       	breq	.+8      	; 0x4f3e <vfprintf+0x22a>
    4f36:	a8 c0       	rjmp	.+336    	; 0x5088 <vfprintf+0x374>
    4f38:	2f 2f       	mov	r18, r31
    4f3a:	20 61       	ori	r18, 0x10	; 16
    4f3c:	b2 2e       	mov	r11, r18
    4f3e:	b4 fe       	sbrs	r11, 4
    4f40:	0d c0       	rjmp	.+26     	; 0x4f5c <vfprintf+0x248>
    4f42:	8b 2d       	mov	r24, r11
    4f44:	84 60       	ori	r24, 0x04	; 4
    4f46:	b8 2e       	mov	r11, r24
    4f48:	09 c0       	rjmp	.+18     	; 0x4f5c <vfprintf+0x248>
    4f4a:	24 ff       	sbrs	r18, 4
    4f4c:	0a c0       	rjmp	.+20     	; 0x4f62 <vfprintf+0x24e>
    4f4e:	9f 2f       	mov	r25, r31
    4f50:	96 60       	ori	r25, 0x06	; 6
    4f52:	b9 2e       	mov	r11, r25
    4f54:	06 c0       	rjmp	.+12     	; 0x4f62 <vfprintf+0x24e>
    4f56:	28 e0       	ldi	r18, 0x08	; 8
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	05 c0       	rjmp	.+10     	; 0x4f66 <vfprintf+0x252>
    4f5c:	20 e1       	ldi	r18, 0x10	; 16
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <vfprintf+0x252>
    4f62:	20 e1       	ldi	r18, 0x10	; 16
    4f64:	32 e0       	ldi	r19, 0x02	; 2
    4f66:	f8 01       	movw	r30, r16
    4f68:	b7 fe       	sbrs	r11, 7
    4f6a:	07 c0       	rjmp	.+14     	; 0x4f7a <vfprintf+0x266>
    4f6c:	60 81       	ld	r22, Z
    4f6e:	71 81       	ldd	r23, Z+1	; 0x01
    4f70:	82 81       	ldd	r24, Z+2	; 0x02
    4f72:	93 81       	ldd	r25, Z+3	; 0x03
    4f74:	0c 5f       	subi	r16, 0xFC	; 252
    4f76:	1f 4f       	sbci	r17, 0xFF	; 255
    4f78:	06 c0       	rjmp	.+12     	; 0x4f86 <vfprintf+0x272>
    4f7a:	60 81       	ld	r22, Z
    4f7c:	71 81       	ldd	r23, Z+1	; 0x01
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	0e 5f       	subi	r16, 0xFE	; 254
    4f84:	1f 4f       	sbci	r17, 0xFF	; 255
    4f86:	a4 01       	movw	r20, r8
    4f88:	f6 d0       	rcall	.+492    	; 0x5176 <__ultoa_invert>
    4f8a:	a8 2e       	mov	r10, r24
    4f8c:	a8 18       	sub	r10, r8
    4f8e:	fb 2d       	mov	r31, r11
    4f90:	ff 77       	andi	r31, 0x7F	; 127
    4f92:	bf 2e       	mov	r11, r31
    4f94:	b6 fe       	sbrs	r11, 6
    4f96:	0b c0       	rjmp	.+22     	; 0x4fae <vfprintf+0x29a>
    4f98:	2b 2d       	mov	r18, r11
    4f9a:	2e 7f       	andi	r18, 0xFE	; 254
    4f9c:	a5 14       	cp	r10, r5
    4f9e:	50 f4       	brcc	.+20     	; 0x4fb4 <vfprintf+0x2a0>
    4fa0:	b4 fe       	sbrs	r11, 4
    4fa2:	0a c0       	rjmp	.+20     	; 0x4fb8 <vfprintf+0x2a4>
    4fa4:	b2 fc       	sbrc	r11, 2
    4fa6:	08 c0       	rjmp	.+16     	; 0x4fb8 <vfprintf+0x2a4>
    4fa8:	2b 2d       	mov	r18, r11
    4faa:	2e 7e       	andi	r18, 0xEE	; 238
    4fac:	05 c0       	rjmp	.+10     	; 0x4fb8 <vfprintf+0x2a4>
    4fae:	7a 2c       	mov	r7, r10
    4fb0:	2b 2d       	mov	r18, r11
    4fb2:	03 c0       	rjmp	.+6      	; 0x4fba <vfprintf+0x2a6>
    4fb4:	7a 2c       	mov	r7, r10
    4fb6:	01 c0       	rjmp	.+2      	; 0x4fba <vfprintf+0x2a6>
    4fb8:	75 2c       	mov	r7, r5
    4fba:	24 ff       	sbrs	r18, 4
    4fbc:	0d c0       	rjmp	.+26     	; 0x4fd8 <vfprintf+0x2c4>
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	ea 0d       	add	r30, r10
    4fc2:	f1 1d       	adc	r31, r1
    4fc4:	80 81       	ld	r24, Z
    4fc6:	80 33       	cpi	r24, 0x30	; 48
    4fc8:	11 f4       	brne	.+4      	; 0x4fce <vfprintf+0x2ba>
    4fca:	29 7e       	andi	r18, 0xE9	; 233
    4fcc:	09 c0       	rjmp	.+18     	; 0x4fe0 <vfprintf+0x2cc>
    4fce:	22 ff       	sbrs	r18, 2
    4fd0:	06 c0       	rjmp	.+12     	; 0x4fde <vfprintf+0x2ca>
    4fd2:	73 94       	inc	r7
    4fd4:	73 94       	inc	r7
    4fd6:	04 c0       	rjmp	.+8      	; 0x4fe0 <vfprintf+0x2cc>
    4fd8:	82 2f       	mov	r24, r18
    4fda:	86 78       	andi	r24, 0x86	; 134
    4fdc:	09 f0       	breq	.+2      	; 0x4fe0 <vfprintf+0x2cc>
    4fde:	73 94       	inc	r7
    4fe0:	23 fd       	sbrc	r18, 3
    4fe2:	12 c0       	rjmp	.+36     	; 0x5008 <vfprintf+0x2f4>
    4fe4:	20 ff       	sbrs	r18, 0
    4fe6:	06 c0       	rjmp	.+12     	; 0x4ff4 <vfprintf+0x2e0>
    4fe8:	5a 2c       	mov	r5, r10
    4fea:	73 14       	cp	r7, r3
    4fec:	18 f4       	brcc	.+6      	; 0x4ff4 <vfprintf+0x2e0>
    4fee:	53 0c       	add	r5, r3
    4ff0:	57 18       	sub	r5, r7
    4ff2:	73 2c       	mov	r7, r3
    4ff4:	73 14       	cp	r7, r3
    4ff6:	60 f4       	brcc	.+24     	; 0x5010 <vfprintf+0x2fc>
    4ff8:	b7 01       	movw	r22, r14
    4ffa:	80 e2       	ldi	r24, 0x20	; 32
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	2c 87       	std	Y+12, r18	; 0x0c
    5000:	88 d0       	rcall	.+272    	; 0x5112 <fputc>
    5002:	73 94       	inc	r7
    5004:	2c 85       	ldd	r18, Y+12	; 0x0c
    5006:	f6 cf       	rjmp	.-20     	; 0x4ff4 <vfprintf+0x2e0>
    5008:	73 14       	cp	r7, r3
    500a:	10 f4       	brcc	.+4      	; 0x5010 <vfprintf+0x2fc>
    500c:	37 18       	sub	r3, r7
    500e:	01 c0       	rjmp	.+2      	; 0x5012 <vfprintf+0x2fe>
    5010:	31 2c       	mov	r3, r1
    5012:	24 ff       	sbrs	r18, 4
    5014:	11 c0       	rjmp	.+34     	; 0x5038 <vfprintf+0x324>
    5016:	b7 01       	movw	r22, r14
    5018:	80 e3       	ldi	r24, 0x30	; 48
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	2c 87       	std	Y+12, r18	; 0x0c
    501e:	79 d0       	rcall	.+242    	; 0x5112 <fputc>
    5020:	2c 85       	ldd	r18, Y+12	; 0x0c
    5022:	22 ff       	sbrs	r18, 2
    5024:	16 c0       	rjmp	.+44     	; 0x5052 <vfprintf+0x33e>
    5026:	21 ff       	sbrs	r18, 1
    5028:	03 c0       	rjmp	.+6      	; 0x5030 <vfprintf+0x31c>
    502a:	88 e5       	ldi	r24, 0x58	; 88
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	02 c0       	rjmp	.+4      	; 0x5034 <vfprintf+0x320>
    5030:	88 e7       	ldi	r24, 0x78	; 120
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	b7 01       	movw	r22, r14
    5036:	0c c0       	rjmp	.+24     	; 0x5050 <vfprintf+0x33c>
    5038:	82 2f       	mov	r24, r18
    503a:	86 78       	andi	r24, 0x86	; 134
    503c:	51 f0       	breq	.+20     	; 0x5052 <vfprintf+0x33e>
    503e:	21 fd       	sbrc	r18, 1
    5040:	02 c0       	rjmp	.+4      	; 0x5046 <vfprintf+0x332>
    5042:	80 e2       	ldi	r24, 0x20	; 32
    5044:	01 c0       	rjmp	.+2      	; 0x5048 <vfprintf+0x334>
    5046:	8b e2       	ldi	r24, 0x2B	; 43
    5048:	27 fd       	sbrc	r18, 7
    504a:	8d e2       	ldi	r24, 0x2D	; 45
    504c:	b7 01       	movw	r22, r14
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	60 d0       	rcall	.+192    	; 0x5112 <fputc>
    5052:	a5 14       	cp	r10, r5
    5054:	30 f4       	brcc	.+12     	; 0x5062 <vfprintf+0x34e>
    5056:	b7 01       	movw	r22, r14
    5058:	80 e3       	ldi	r24, 0x30	; 48
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	5a d0       	rcall	.+180    	; 0x5112 <fputc>
    505e:	5a 94       	dec	r5
    5060:	f8 cf       	rjmp	.-16     	; 0x5052 <vfprintf+0x33e>
    5062:	aa 94       	dec	r10
    5064:	f4 01       	movw	r30, r8
    5066:	ea 0d       	add	r30, r10
    5068:	f1 1d       	adc	r31, r1
    506a:	80 81       	ld	r24, Z
    506c:	b7 01       	movw	r22, r14
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	50 d0       	rcall	.+160    	; 0x5112 <fputc>
    5072:	a1 10       	cpse	r10, r1
    5074:	f6 cf       	rjmp	.-20     	; 0x5062 <vfprintf+0x34e>
    5076:	33 20       	and	r3, r3
    5078:	09 f4       	brne	.+2      	; 0x507c <vfprintf+0x368>
    507a:	5d ce       	rjmp	.-838    	; 0x4d36 <vfprintf+0x22>
    507c:	b7 01       	movw	r22, r14
    507e:	80 e2       	ldi	r24, 0x20	; 32
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	47 d0       	rcall	.+142    	; 0x5112 <fputc>
    5084:	3a 94       	dec	r3
    5086:	f7 cf       	rjmp	.-18     	; 0x5076 <vfprintf+0x362>
    5088:	f7 01       	movw	r30, r14
    508a:	86 81       	ldd	r24, Z+6	; 0x06
    508c:	97 81       	ldd	r25, Z+7	; 0x07
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <vfprintf+0x380>
    5090:	8f ef       	ldi	r24, 0xFF	; 255
    5092:	9f ef       	ldi	r25, 0xFF	; 255
    5094:	2c 96       	adiw	r28, 0x0c	; 12
    5096:	e2 e1       	ldi	r30, 0x12	; 18
    5098:	e8 c0       	rjmp	.+464    	; 0x526a <__epilogue_restores__>

0000509a <__eerd_block_m328>:
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22

0000509e <__eerd_blraw_m328>:
    509e:	fc 01       	movw	r30, r24
    50a0:	f9 99       	sbic	0x1f, 1	; 31
    50a2:	fe cf       	rjmp	.-4      	; 0x50a0 <__eerd_blraw_m328+0x2>
    50a4:	06 c0       	rjmp	.+12     	; 0x50b2 <__eerd_blraw_m328+0x14>
    50a6:	f2 bd       	out	0x22, r31	; 34
    50a8:	e1 bd       	out	0x21, r30	; 33
    50aa:	f8 9a       	sbi	0x1f, 0	; 31
    50ac:	31 96       	adiw	r30, 0x01	; 1
    50ae:	00 b4       	in	r0, 0x20	; 32
    50b0:	0d 92       	st	X+, r0
    50b2:	41 50       	subi	r20, 0x01	; 1
    50b4:	50 40       	sbci	r21, 0x00	; 0
    50b6:	b8 f7       	brcc	.-18     	; 0x50a6 <__eerd_blraw_m328+0x8>
    50b8:	08 95       	ret

000050ba <__eerd_byte_m328>:
    50ba:	f9 99       	sbic	0x1f, 1	; 31
    50bc:	fe cf       	rjmp	.-4      	; 0x50ba <__eerd_byte_m328>
    50be:	92 bd       	out	0x22, r25	; 34
    50c0:	81 bd       	out	0x21, r24	; 33
    50c2:	f8 9a       	sbi	0x1f, 0	; 31
    50c4:	99 27       	eor	r25, r25
    50c6:	80 b5       	in	r24, 0x20	; 32
    50c8:	08 95       	ret

000050ca <__eewr_byte_m328>:
    50ca:	26 2f       	mov	r18, r22

000050cc <__eewr_r18_m328>:
    50cc:	f9 99       	sbic	0x1f, 1	; 31
    50ce:	fe cf       	rjmp	.-4      	; 0x50cc <__eewr_r18_m328>
    50d0:	1f ba       	out	0x1f, r1	; 31
    50d2:	92 bd       	out	0x22, r25	; 34
    50d4:	81 bd       	out	0x21, r24	; 33
    50d6:	20 bd       	out	0x20, r18	; 32
    50d8:	0f b6       	in	r0, 0x3f	; 63
    50da:	f8 94       	cli
    50dc:	fa 9a       	sbi	0x1f, 2	; 31
    50de:	f9 9a       	sbi	0x1f, 1	; 31
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	01 96       	adiw	r24, 0x01	; 1
    50e4:	08 95       	ret

000050e6 <strnlen_P>:
    50e6:	fc 01       	movw	r30, r24
    50e8:	05 90       	lpm	r0, Z+
    50ea:	61 50       	subi	r22, 0x01	; 1
    50ec:	70 40       	sbci	r23, 0x00	; 0
    50ee:	01 10       	cpse	r0, r1
    50f0:	d8 f7       	brcc	.-10     	; 0x50e8 <strnlen_P+0x2>
    50f2:	80 95       	com	r24
    50f4:	90 95       	com	r25
    50f6:	8e 0f       	add	r24, r30
    50f8:	9f 1f       	adc	r25, r31
    50fa:	08 95       	ret

000050fc <strnlen>:
    50fc:	fc 01       	movw	r30, r24
    50fe:	61 50       	subi	r22, 0x01	; 1
    5100:	70 40       	sbci	r23, 0x00	; 0
    5102:	01 90       	ld	r0, Z+
    5104:	01 10       	cpse	r0, r1
    5106:	d8 f7       	brcc	.-10     	; 0x50fe <strnlen+0x2>
    5108:	80 95       	com	r24
    510a:	90 95       	com	r25
    510c:	8e 0f       	add	r24, r30
    510e:	9f 1f       	adc	r25, r31
    5110:	08 95       	ret

00005112 <fputc>:
    5112:	0f 93       	push	r16
    5114:	1f 93       	push	r17
    5116:	cf 93       	push	r28
    5118:	df 93       	push	r29
    511a:	18 2f       	mov	r17, r24
    511c:	09 2f       	mov	r16, r25
    511e:	eb 01       	movw	r28, r22
    5120:	8b 81       	ldd	r24, Y+3	; 0x03
    5122:	81 fd       	sbrc	r24, 1
    5124:	03 c0       	rjmp	.+6      	; 0x512c <fputc+0x1a>
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	9f ef       	ldi	r25, 0xFF	; 255
    512a:	20 c0       	rjmp	.+64     	; 0x516c <fputc+0x5a>
    512c:	82 ff       	sbrs	r24, 2
    512e:	10 c0       	rjmp	.+32     	; 0x5150 <fputc+0x3e>
    5130:	4e 81       	ldd	r20, Y+6	; 0x06
    5132:	5f 81       	ldd	r21, Y+7	; 0x07
    5134:	2c 81       	ldd	r18, Y+4	; 0x04
    5136:	3d 81       	ldd	r19, Y+5	; 0x05
    5138:	42 17       	cp	r20, r18
    513a:	53 07       	cpc	r21, r19
    513c:	7c f4       	brge	.+30     	; 0x515c <fputc+0x4a>
    513e:	e8 81       	ld	r30, Y
    5140:	f9 81       	ldd	r31, Y+1	; 0x01
    5142:	9f 01       	movw	r18, r30
    5144:	2f 5f       	subi	r18, 0xFF	; 255
    5146:	3f 4f       	sbci	r19, 0xFF	; 255
    5148:	39 83       	std	Y+1, r19	; 0x01
    514a:	28 83       	st	Y, r18
    514c:	10 83       	st	Z, r17
    514e:	06 c0       	rjmp	.+12     	; 0x515c <fputc+0x4a>
    5150:	e8 85       	ldd	r30, Y+8	; 0x08
    5152:	f9 85       	ldd	r31, Y+9	; 0x09
    5154:	81 2f       	mov	r24, r17
    5156:	09 95       	icall
    5158:	89 2b       	or	r24, r25
    515a:	29 f7       	brne	.-54     	; 0x5126 <fputc+0x14>
    515c:	2e 81       	ldd	r18, Y+6	; 0x06
    515e:	3f 81       	ldd	r19, Y+7	; 0x07
    5160:	2f 5f       	subi	r18, 0xFF	; 255
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	3f 83       	std	Y+7, r19	; 0x07
    5166:	2e 83       	std	Y+6, r18	; 0x06
    5168:	81 2f       	mov	r24, r17
    516a:	90 2f       	mov	r25, r16
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	1f 91       	pop	r17
    5172:	0f 91       	pop	r16
    5174:	08 95       	ret

00005176 <__ultoa_invert>:
    5176:	fa 01       	movw	r30, r20
    5178:	aa 27       	eor	r26, r26
    517a:	28 30       	cpi	r18, 0x08	; 8
    517c:	51 f1       	breq	.+84     	; 0x51d2 <__ultoa_invert+0x5c>
    517e:	20 31       	cpi	r18, 0x10	; 16
    5180:	81 f1       	breq	.+96     	; 0x51e2 <__ultoa_invert+0x6c>
    5182:	e8 94       	clt
    5184:	6f 93       	push	r22
    5186:	6e 7f       	andi	r22, 0xFE	; 254
    5188:	6e 5f       	subi	r22, 0xFE	; 254
    518a:	7f 4f       	sbci	r23, 0xFF	; 255
    518c:	8f 4f       	sbci	r24, 0xFF	; 255
    518e:	9f 4f       	sbci	r25, 0xFF	; 255
    5190:	af 4f       	sbci	r26, 0xFF	; 255
    5192:	b1 e0       	ldi	r27, 0x01	; 1
    5194:	3e d0       	rcall	.+124    	; 0x5212 <__ultoa_invert+0x9c>
    5196:	b4 e0       	ldi	r27, 0x04	; 4
    5198:	3c d0       	rcall	.+120    	; 0x5212 <__ultoa_invert+0x9c>
    519a:	67 0f       	add	r22, r23
    519c:	78 1f       	adc	r23, r24
    519e:	89 1f       	adc	r24, r25
    51a0:	9a 1f       	adc	r25, r26
    51a2:	a1 1d       	adc	r26, r1
    51a4:	68 0f       	add	r22, r24
    51a6:	79 1f       	adc	r23, r25
    51a8:	8a 1f       	adc	r24, r26
    51aa:	91 1d       	adc	r25, r1
    51ac:	a1 1d       	adc	r26, r1
    51ae:	6a 0f       	add	r22, r26
    51b0:	71 1d       	adc	r23, r1
    51b2:	81 1d       	adc	r24, r1
    51b4:	91 1d       	adc	r25, r1
    51b6:	a1 1d       	adc	r26, r1
    51b8:	20 d0       	rcall	.+64     	; 0x51fa <__ultoa_invert+0x84>
    51ba:	09 f4       	brne	.+2      	; 0x51be <__ultoa_invert+0x48>
    51bc:	68 94       	set
    51be:	3f 91       	pop	r19
    51c0:	2a e0       	ldi	r18, 0x0A	; 10
    51c2:	26 9f       	mul	r18, r22
    51c4:	11 24       	eor	r1, r1
    51c6:	30 19       	sub	r19, r0
    51c8:	30 5d       	subi	r19, 0xD0	; 208
    51ca:	31 93       	st	Z+, r19
    51cc:	de f6       	brtc	.-74     	; 0x5184 <__ultoa_invert+0xe>
    51ce:	cf 01       	movw	r24, r30
    51d0:	08 95       	ret
    51d2:	46 2f       	mov	r20, r22
    51d4:	47 70       	andi	r20, 0x07	; 7
    51d6:	40 5d       	subi	r20, 0xD0	; 208
    51d8:	41 93       	st	Z+, r20
    51da:	b3 e0       	ldi	r27, 0x03	; 3
    51dc:	0f d0       	rcall	.+30     	; 0x51fc <__ultoa_invert+0x86>
    51de:	c9 f7       	brne	.-14     	; 0x51d2 <__ultoa_invert+0x5c>
    51e0:	f6 cf       	rjmp	.-20     	; 0x51ce <__ultoa_invert+0x58>
    51e2:	46 2f       	mov	r20, r22
    51e4:	4f 70       	andi	r20, 0x0F	; 15
    51e6:	40 5d       	subi	r20, 0xD0	; 208
    51e8:	4a 33       	cpi	r20, 0x3A	; 58
    51ea:	18 f0       	brcs	.+6      	; 0x51f2 <__ultoa_invert+0x7c>
    51ec:	49 5d       	subi	r20, 0xD9	; 217
    51ee:	31 fd       	sbrc	r19, 1
    51f0:	40 52       	subi	r20, 0x20	; 32
    51f2:	41 93       	st	Z+, r20
    51f4:	02 d0       	rcall	.+4      	; 0x51fa <__ultoa_invert+0x84>
    51f6:	a9 f7       	brne	.-22     	; 0x51e2 <__ultoa_invert+0x6c>
    51f8:	ea cf       	rjmp	.-44     	; 0x51ce <__ultoa_invert+0x58>
    51fa:	b4 e0       	ldi	r27, 0x04	; 4
    51fc:	a6 95       	lsr	r26
    51fe:	97 95       	ror	r25
    5200:	87 95       	ror	r24
    5202:	77 95       	ror	r23
    5204:	67 95       	ror	r22
    5206:	ba 95       	dec	r27
    5208:	c9 f7       	brne	.-14     	; 0x51fc <__ultoa_invert+0x86>
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	61 05       	cpc	r22, r1
    520e:	71 05       	cpc	r23, r1
    5210:	08 95       	ret
    5212:	9b 01       	movw	r18, r22
    5214:	ac 01       	movw	r20, r24
    5216:	0a 2e       	mov	r0, r26
    5218:	06 94       	lsr	r0
    521a:	57 95       	ror	r21
    521c:	47 95       	ror	r20
    521e:	37 95       	ror	r19
    5220:	27 95       	ror	r18
    5222:	ba 95       	dec	r27
    5224:	c9 f7       	brne	.-14     	; 0x5218 <__ultoa_invert+0xa2>
    5226:	62 0f       	add	r22, r18
    5228:	73 1f       	adc	r23, r19
    522a:	84 1f       	adc	r24, r20
    522c:	95 1f       	adc	r25, r21
    522e:	a0 1d       	adc	r26, r0
    5230:	08 95       	ret

00005232 <__prologue_saves__>:
    5232:	2f 92       	push	r2
    5234:	3f 92       	push	r3
    5236:	4f 92       	push	r4
    5238:	5f 92       	push	r5
    523a:	6f 92       	push	r6
    523c:	7f 92       	push	r7
    523e:	8f 92       	push	r8
    5240:	9f 92       	push	r9
    5242:	af 92       	push	r10
    5244:	bf 92       	push	r11
    5246:	cf 92       	push	r12
    5248:	df 92       	push	r13
    524a:	ef 92       	push	r14
    524c:	ff 92       	push	r15
    524e:	0f 93       	push	r16
    5250:	1f 93       	push	r17
    5252:	cf 93       	push	r28
    5254:	df 93       	push	r29
    5256:	cd b7       	in	r28, 0x3d	; 61
    5258:	de b7       	in	r29, 0x3e	; 62
    525a:	ca 1b       	sub	r28, r26
    525c:	db 0b       	sbc	r29, r27
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	f8 94       	cli
    5262:	de bf       	out	0x3e, r29	; 62
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	cd bf       	out	0x3d, r28	; 61
    5268:	09 94       	ijmp

0000526a <__epilogue_restores__>:
    526a:	2a 88       	ldd	r2, Y+18	; 0x12
    526c:	39 88       	ldd	r3, Y+17	; 0x11
    526e:	48 88       	ldd	r4, Y+16	; 0x10
    5270:	5f 84       	ldd	r5, Y+15	; 0x0f
    5272:	6e 84       	ldd	r6, Y+14	; 0x0e
    5274:	7d 84       	ldd	r7, Y+13	; 0x0d
    5276:	8c 84       	ldd	r8, Y+12	; 0x0c
    5278:	9b 84       	ldd	r9, Y+11	; 0x0b
    527a:	aa 84       	ldd	r10, Y+10	; 0x0a
    527c:	b9 84       	ldd	r11, Y+9	; 0x09
    527e:	c8 84       	ldd	r12, Y+8	; 0x08
    5280:	df 80       	ldd	r13, Y+7	; 0x07
    5282:	ee 80       	ldd	r14, Y+6	; 0x06
    5284:	fd 80       	ldd	r15, Y+5	; 0x05
    5286:	0c 81       	ldd	r16, Y+4	; 0x04
    5288:	1b 81       	ldd	r17, Y+3	; 0x03
    528a:	aa 81       	ldd	r26, Y+2	; 0x02
    528c:	b9 81       	ldd	r27, Y+1	; 0x01
    528e:	ce 0f       	add	r28, r30
    5290:	d1 1d       	adc	r29, r1
    5292:	0f b6       	in	r0, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	de bf       	out	0x3e, r29	; 62
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	cd bf       	out	0x3d, r28	; 61
    529c:	ed 01       	movw	r28, r26
    529e:	08 95       	ret

000052a0 <_exit>:
    52a0:	f8 94       	cli

000052a2 <__stop_program>:
    52a2:	ff cf       	rjmp	.-2      	; 0x52a2 <__stop_program>
