/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2014 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_DIMMER_H
#define _E2P_DIMMER_H

#include "e2p_access.h"

// E2P Block "Dimmer"
// ==================
// Start offset (bit): 512
// Overall block length: 7680 bits

// BaseStationPacketCounter (UIntValue)
// Description: This is the last remembered packet counter of a command from the base station. Packets with the same or lower number are ignored.

// Set BaseStationPacketCounter (UIntValue)
// Offset: 512, length bits 24, min val 0, max val 16777215
static inline void e2p_dimmer_set_basestationpacketcounter(uint32_t val)
{
  eeprom_write_UIntValue(512, 24, val);
}

// Get BaseStationPacketCounter (UIntValue)
// Offset: 512, length bits 24, min val 0, max val 16777215
static inline uint32_t e2p_dimmer_get_basestationpacketcounter(void)
{
  return eeprom_read_UIntValue32(512, 24, 0, 16777215);
}

// BrightnessTranslationTable (ByteArray)
// Description: These are the target values (one byte each) for the input brightness of 0, 1, ... 100% to adapt the specific brightness curve of your lamps. Set first byte to FF to not use it.

// Set BrightnessTranslationTable (ByteArray)
// Offset: 536, length bits 808
static inline void e2p_dimmer_set_brightnesstranslationtable(void *src)
{
  eeprom_write_block(src, (uint8_t *)((536) / 8), 101);
}

// Get BrightnessTranslationTable (ByteArray)
// Offset: 536, length bits 808
static inline void e2p_dimmer_get_brightnesstranslationtable(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((536) / 8), 101);
}

// TransceiverWatchdogTimeout (UIntValue)
// Description: Reset RFM12B module if no data is received until timeout is reached. Use this function if your specific transceiver hangs sometimes. Value is in 10 * x seconds. Set 0 to disable (default).

// Set TransceiverWatchdogTimeout (UIntValue)
// Offset: 1344, length bits 8, min val 0, max val 255
static inline void e2p_dimmer_set_transceiverwatchdogtimeout(uint8_t val)
{
  eeprom_write_UIntValue(1344, 8, val);
}

// Get TransceiverWatchdogTimeout (UIntValue)
// Offset: 1344, length bits 8, min val 0, max val 255
static inline uint8_t e2p_dimmer_get_transceiverwatchdogtimeout(void)
{
  return eeprom_read_UIntValue8(1344, 8, 0, 255);
}

// Reserved area with 6840 bits
// Offset: 1352


#endif /* _E2P_DIMMER_H */
