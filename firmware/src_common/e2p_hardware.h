/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2014 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_HARDWARE_H
#define _E2P_HARDWARE_H

#include "e2p_access.h"

// E2P Block "Hardware"
// ====================
// Start offset (bit): 0
// Overall block length: 64 bits

// DeviceType (EnumValue)
// Description: The device can check with this value if the EEPROM data is meant for the actual type of device. If not, the device goes into an error mode.

typedef enum {
  DEVICETYPE_BASESTATION = 0,
  DEVICETYPE_ENVSENSOR = 20,
  DEVICETYPE_POWERSWITCH = 40,
  DEVICETYPE_DIMMER = 60,
  DEVICETYPE_THERMOSTAT = 80
} DeviceTypeEnum;

// Set DeviceType (EnumValue)
// Byte offset: 0, bit offset: 0, length bits 8
static inline void e2p_hardware_set_devicetype(DeviceTypeEnum val)
{
  eeprom_write_UIntValue(0, 0, 8, val);
}

// Get DeviceType (EnumValue)
// Byte offset: 0, bit offset: 0, length bits 8
static inline DeviceTypeEnum e2p_hardware_get_devicetype(void)
{
  return eeprom_read_UIntValue8(0, 0, 8, 0, 255);
}

// OsccalMode (IntValue)
// Description: This value is used to change the speed of the internal oscillator. 0 = don't use OSCCAL calibration (e.g. external crystal oszillator is used). -128 = OSCCAL measure mode: the LED blinks every 60s, so the user can measure the original speed. -127..+127 = The speed is adjusted by the given amount in per mill (e.g. 10 means to speed up the device by +1%).

// Set OsccalMode (IntValue)
// Byte offset: 1, bit offset: 0, length bits 8, min val -128, max val 127
static inline void e2p_hardware_set_osccalmode(int8_t val)
{
  eeprom_write_IntValue(1, 0, 8, val);
}

// Get OsccalMode (IntValue)
// Byte offset: 1, bit offset: 0, length bits 8, min val -128, max val 127
static inline int8_t e2p_hardware_get_osccalmode(void)
{
  return eeprom_read_IntValue32(1, 0, 8, -128, 127);
}

// Reserved area with 48 bits


#endif /* _E2P_HARDWARE_H */
