/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _MSGGRP_AUDIO_H
#define _MSGGRP_AUDIO_H

#include "packet_header.h"
#include "packet_headerext_common.h"
#include "packet_headerext_ackstatus.h"
#include "packet_headerext_ack.h"
#include "packet_headerext_status.h"
#include "packet_headerext_deliver.h"
#include "packet_headerext_setget.h"
#include "packet_headerext_set.h"
#include "packet_headerext_get.h"
#include "e2p_access.h"

// Message Group "audio"
// =====================
// MessageGroupID: 50
// Description: This message group contains messages for audio input/output.

// ENUM for MessageIDs of this MessageGroup
typedef enum {
  MESSAGEID_AUDIO_TONE = 1,
  MESSAGEID_AUDIO_MELODY = 2
} AUDIO_MessageIDEnum;


// Message "audio_tone"
// --------------------
// MessageGroupID: 50
// MessageID: 1
// Possible MessageTypes: Get, Set, SetGet, Status, Ack, AckStatus
// Validity: test
// Length w/o Header + HeaderExtension: 7 bits
// Data fields: Tone
// Description: This is a message to get/set playback of a continuous tone which doesn't stop until another one is requested.

// Function to initialize header for the MessageType "Get".
static inline void pkg_header_init_audio_tone_get(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(0);
  pkg_headerext_get_set_messagegroupid(50);
  pkg_headerext_get_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 0;
}

// Function to initialize header for the MessageType "Set".
static inline void pkg_header_init_audio_tone_set(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(1);
  pkg_headerext_set_set_messagegroupid(50);
  pkg_headerext_set_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 1;
}

// Function to initialize header for the MessageType "SetGet".
static inline void pkg_header_init_audio_tone_setget(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(2);
  pkg_headerext_setget_set_messagegroupid(50);
  pkg_headerext_setget_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 2;
}

// Function to initialize header for the MessageType "Status".
static inline void pkg_header_init_audio_tone_status(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(8);
  pkg_headerext_status_set_messagegroupid(50);
  pkg_headerext_status_set_messageid(1);
  __HEADEROFFSETBITS = 83;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 8;
}

// Function to initialize header for the MessageType "Ack".
static inline void pkg_header_init_audio_tone_ack(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(9);
  __HEADEROFFSETBITS = 109;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 9;
}

// Function to initialize header for the MessageType "AckStatus".
static inline void pkg_header_init_audio_tone_ackstatus(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(10);
  pkg_headerext_ackstatus_set_messagegroupid(50);
  pkg_headerext_ackstatus_set_messageid(1);
  __HEADEROFFSETBITS = 120;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 10;
}

// Tone (UIntValue)
// Description: Tone according frequency table. 0 means OFF.

// Set Tone (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 7, min val 0, max val 116
static inline void msg_audio_tone_set_tone(uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 0, 7, val, bufx);
}

// Get Tone (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 7, min val 0, max val 116
static inline uint32_t msg_audio_tone_get_tone(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 7, 0, 116, bufx);
}


// Message "audio_melody"
// ----------------------
// MessageGroupID: 50
// MessageID: 2
// Possible MessageTypes: Get, Set, SetGet, Status, Ack, AckStatus
// Validity: test
// Length w/o Header + HeaderExtension: 380 bits
// Data fields: Repeat, AutoReverse, Time, Effect, Tone
// Description: This is a message to play a series of tones (set) or get the currently playing one.

// Function to initialize header for the MessageType "Get".
static inline void pkg_header_init_audio_melody_get(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(0);
  pkg_headerext_get_set_messagegroupid(50);
  pkg_headerext_get_set_messageid(2);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 0;
}

// Function to initialize header for the MessageType "Set".
static inline void pkg_header_init_audio_melody_set(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(1);
  pkg_headerext_set_set_messagegroupid(50);
  pkg_headerext_set_set_messageid(2);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 1;
}

// Function to initialize header for the MessageType "SetGet".
static inline void pkg_header_init_audio_melody_setget(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(2);
  pkg_headerext_setget_set_messagegroupid(50);
  pkg_headerext_setget_set_messageid(2);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 2;
}

// Function to initialize header for the MessageType "Status".
static inline void pkg_header_init_audio_melody_status(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(8);
  pkg_headerext_status_set_messagegroupid(50);
  pkg_headerext_status_set_messageid(2);
  __HEADEROFFSETBITS = 83;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 8;
}

// Function to initialize header for the MessageType "Ack".
static inline void pkg_header_init_audio_melody_ack(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(9);
  __HEADEROFFSETBITS = 109;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 9;
}

// Function to initialize header for the MessageType "AckStatus".
static inline void pkg_header_init_audio_melody_ackstatus(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(10);
  pkg_headerext_ackstatus_set_messagegroupid(50);
  pkg_headerext_ackstatus_set_messageid(2);
  __HEADEROFFSETBITS = 120;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 10;
}

// Repeat (UIntValue)
// Description: The number of times the melody will be repeated. 0 means infinitely.

// Set Repeat (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 4, min val 0, max val 15
static inline void msg_audio_melody_set_repeat(uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 0, 4, val, bufx);
}

// Get Repeat (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 4, min val 0, max val 15
static inline uint32_t msg_audio_melody_get_repeat(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 4, 0, 15, bufx);
}

// AutoReverse (BoolValue)
// Description: If true, the melody will be played back in the normal direction and then in reverse order.

// Set AutoReverse (BoolValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 4, length bits 1
static inline void msg_audio_melody_set_autoreverse(bool val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 4, 1, val ? 1 : 0, bufx);
}

// Get AutoReverse (BoolValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 4, length bits 1
static inline bool msg_audio_melody_get_autoreverse(void)
{
  return array_read_UIntValue8((uint16_t)__HEADEROFFSETBITS + 4, 1, 0, 1, bufx) == 1;
}

// Time (UIntValue[25])
// This sub-element with 5 bits is part of an element with 15 bits in a structured array.
// Description: The playback time between the previous tone and the new one. The number of seconds used is 0.05 * 1.3 ^ Time and covers the range from 0.03s to 170s. Use 0 to mark the end of the melody. Further values will be ignored.

// Set Time (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 5 + (uint16_t)index * 15, length bits 5, min val 0, max val 31
static inline void msg_audio_melody_set_time(uint8_t index, uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 5 + (uint16_t)index * 15, 5, val, bufx);
}

// Get Time (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 5 + (uint16_t)index * 15, length bits 5, min val 0, max val 31
static inline uint32_t msg_audio_melody_get_time(uint8_t index)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 5 + (uint16_t)index * 15, 5, 0, 31, bufx);
}

// Effect (UIntValue[25])
// This sub-element with 3 bits is part of an element with 15 bits in a structured array.
// Description: Define how the tone is played. 0: Tone is played immediately (default). 1: A sliding tone from the previous to the new one. A sliding tone from or to tone index 0 (off) is not possible. The new tone / no tone will be played back immediately in this case. 3: With Interruptions.

// Set Effect (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 10 + (uint16_t)index * 15, length bits 3, min val 0, max val 7
static inline void msg_audio_melody_set_effect(uint8_t index, uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 10 + (uint16_t)index * 15, 3, val, bufx);
}

// Get Effect (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 10 + (uint16_t)index * 15, length bits 3, min val 0, max val 7
static inline uint32_t msg_audio_melody_get_effect(uint8_t index)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 10 + (uint16_t)index * 15, 3, 0, 7, bufx);
}

// Tone (UIntValue[25])
// This sub-element with 7 bits is part of an element with 15 bits in a structured array.
// Description: Index according frequency table. 0 means OFF. The last index (or the first when AutoReverse is true) of the melody will remain audible after the melody is completed.

// Set Tone (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 13 + (uint16_t)index * 15, length bits 7, min val 0, max val 116
static inline void msg_audio_melody_set_tone(uint8_t index, uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 13 + (uint16_t)index * 15, 7, val, bufx);
}

// Get Tone (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 13 + (uint16_t)index * 15, length bits 7, min val 0, max val 116
static inline uint32_t msg_audio_melody_get_tone(uint8_t index)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 13 + (uint16_t)index * 15, 7, 0, 116, bufx);
}

#endif /* _MSGGRP_AUDIO_H */
