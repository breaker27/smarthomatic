/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _MSGGRP_CONTROLLER_H
#define _MSGGRP_CONTROLLER_H

#include "packet_header.h"
#include "packet_headerext_common.h"
#include "packet_headerext_ackstatus.h"
#include "packet_headerext_ack.h"
#include "packet_headerext_status.h"
#include "packet_headerext_deliver.h"
#include "packet_headerext_setget.h"
#include "packet_headerext_set.h"
#include "packet_headerext_get.h"
#include "e2p_access.h"

// Message Group "controller"
// ==========================
// MessageGroupID: 45
// Description: This message group contains messages for controller / HMI devices.

// ENUM for MessageIDs of this MessageGroup
typedef enum {
  MESSAGEID_CONTROLLER_MENUSELECTION = 1
} CONTROLLER_MessageIDEnum;


// Message "controller_menuselection"
// ----------------------------------
// MessageGroupID: 45
// MessageID: 1
// Possible MessageTypes: Get, Set, SetGet, Deliver, Status, Ack, AckStatus
// Validity: test
// Length w/o Header + HeaderExtension: 128 bits
// Data fields: Index
// Description: These are the value indexes of selected menu items. It depends on the configuration of a specific controller device which value each index represents. The indexes of selected menu entries should start with 1, and 0 should be treated as 'not updated' (in a Status/AckStatus/Deliver message) or 'not to be updated' (in a Set/SetGet request). This is to allow smaller (16 byte) packets when there are few menu entries.

// Function to initialize header for the MessageType "Get".
static inline void pkg_header_init_controller_menuselection_get(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(0);
  pkg_headerext_get_set_messagegroupid(45);
  pkg_headerext_get_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 0;
}

// Function to initialize header for the MessageType "Set".
static inline void pkg_header_init_controller_menuselection_set(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(1);
  pkg_headerext_set_set_messagegroupid(45);
  pkg_headerext_set_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 32;
  __MESSAGETYPE = 1;
}

// Function to initialize header for the MessageType "SetGet".
static inline void pkg_header_init_controller_menuselection_setget(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(2);
  pkg_headerext_setget_set_messagegroupid(45);
  pkg_headerext_setget_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 32;
  __MESSAGETYPE = 2;
}

// Function to initialize header for the MessageType "Deliver".
static inline void pkg_header_init_controller_menuselection_deliver(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(3);
  pkg_headerext_deliver_set_messagegroupid(45);
  pkg_headerext_deliver_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 32;
  __MESSAGETYPE = 3;
}

// Function to initialize header for the MessageType "Status".
static inline void pkg_header_init_controller_menuselection_status(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(8);
  pkg_headerext_status_set_messagegroupid(45);
  pkg_headerext_status_set_messageid(1);
  __HEADEROFFSETBITS = 83;
  __PACKETSIZEBYTES = 32;
  __MESSAGETYPE = 8;
}

// Function to initialize header for the MessageType "Ack".
static inline void pkg_header_init_controller_menuselection_ack(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(9);
  __HEADEROFFSETBITS = 109;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 9;
}

// Function to initialize header for the MessageType "AckStatus".
static inline void pkg_header_init_controller_menuselection_ackstatus(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(10);
  pkg_headerext_ackstatus_set_messagegroupid(45);
  pkg_headerext_ackstatus_set_messageid(1);
  __HEADEROFFSETBITS = 120;
  __PACKETSIZEBYTES = 32;
  __MESSAGETYPE = 10;
}

// Index (UIntValue[16])
// Description: The index of the selected value of a menu entry.

// Set Index (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0 + (uint16_t)index * 8, length bits 8, min val 0, max val 255
static inline void msg_controller_menuselection_set_index(uint8_t index, uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 0 + (uint16_t)index * 8, 8, val, bufx);
}

// Get Index (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0 + (uint16_t)index * 8, length bits 8, min val 0, max val 255
static inline uint32_t msg_controller_menuselection_get_index(uint8_t index)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0 + (uint16_t)index * 8, 8, 0, 255, bufx);
}

#endif /* _MSGGRP_CONTROLLER_H */
