/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _MSGGRP_DISPLAY_H
#define _MSGGRP_DISPLAY_H

#include "packet_header.h"
#include "packet_headerext_common.h"
#include "packet_headerext_ackstatus.h"
#include "packet_headerext_ack.h"
#include "packet_headerext_status.h"
#include "packet_headerext_deliver.h"
#include "packet_headerext_setget.h"
#include "packet_headerext_set.h"
#include "packet_headerext_get.h"
#include "e2p_access.h"

// Message Group "display"
// =======================
// MessageGroupID: 40
// Description: This message group contains messages for displays.

// ENUM for MessageIDs of this MessageGroup
typedef enum {
  MESSAGEID_DISPLAY_TEXT = 1
} DISPLAY_MessageIDEnum;


// Message "display_text"
// ----------------------
// MessageGroupID: 40
// MessageID: 1
// Possible MessageTypes: Get, Set, SetGet, Status, Ack, AckStatus
// Validity: test
// Length w/o Header + HeaderExtension: 336 bits
// Data fields: PosY, PosX, Format, Text
// Description: This is a message to get/set text content at a specified position.

// Function to initialize header for the MessageType "Get".
static inline void pkg_header_init_display_text_get(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(0);
  pkg_headerext_get_set_messagegroupid(40);
  pkg_headerext_get_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 0;
}

// Function to initialize header for the MessageType "Set".
static inline void pkg_header_init_display_text_set(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(1);
  pkg_headerext_set_set_messagegroupid(40);
  pkg_headerext_set_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 1;
}

// Function to initialize header for the MessageType "SetGet".
static inline void pkg_header_init_display_text_setget(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(2);
  pkg_headerext_setget_set_messagegroupid(40);
  pkg_headerext_setget_set_messageid(1);
  __HEADEROFFSETBITS = 95;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 2;
}

// Function to initialize header for the MessageType "Status".
static inline void pkg_header_init_display_text_status(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(8);
  pkg_headerext_status_set_messagegroupid(40);
  pkg_headerext_status_set_messageid(1);
  __HEADEROFFSETBITS = 83;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 8;
}

// Function to initialize header for the MessageType "Ack".
static inline void pkg_header_init_display_text_ack(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(9);
  __HEADEROFFSETBITS = 109;
  __PACKETSIZEBYTES = 16;
  __MESSAGETYPE = 9;
}

// Function to initialize header for the MessageType "AckStatus".
static inline void pkg_header_init_display_text_ackstatus(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagetype(10);
  pkg_headerext_ackstatus_set_messagegroupid(40);
  pkg_headerext_ackstatus_set_messageid(1);
  __HEADEROFFSETBITS = 120;
  __PACKETSIZEBYTES = 64;
  __MESSAGETYPE = 10;
}

// PosY (UIntValue)
// Description: Y (line) position at which the text shall be displayed. Line numbers above 3 are for the corresponding virtual lines / pages.

// Set PosY (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 5, min val 0, max val 31
static inline void msg_display_text_set_posy(uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 0, 5, val, bufx);
}

// Get PosY (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 0, length bits 5, min val 0, max val 31
static inline uint32_t msg_display_text_get_posy(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 0, 5, 0, 31, bufx);
}

// PosX (UIntValue)
// Description: X (character) position at which the text shall be displayed.

// Set PosX (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 5, length bits 7, min val 0, max val 79
static inline void msg_display_text_set_posx(uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 5, 7, val, bufx);
}

// Get PosX (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 5, length bits 7, min val 0, max val 79
static inline uint32_t msg_display_text_get_posx(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 5, 7, 0, 79, bufx);
}

// Format (UIntValue)
// Description: Format, font, or other value which modifies how the text is displayed. Depends on the implementation of the device.

// Set Format (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 12, length bits 4, min val 0, max val 15
static inline void msg_display_text_set_format(uint32_t val)
{
  array_write_UIntValue((uint16_t)__HEADEROFFSETBITS + 12, 4, val, bufx);
}

// Get Format (UIntValue)
// Offset: (uint16_t)__HEADEROFFSETBITS + 12, length bits 4, min val 0, max val 15
static inline uint32_t msg_display_text_get_format(void)
{
  return array_read_UIntValue32((uint16_t)__HEADEROFFSETBITS + 12, 4, 0, 15, bufx);
}

// Text (ByteArray)
// Description: 40 bytes for the text that shall be displayed. The end of the text is marked with a 0 byte if it's shorter than 40 characters.

// Set Text (ByteArray)
// Offset: (uint16_t)__HEADEROFFSETBITS + 16, length bytes 40
static inline void msg_display_text_set_text(void *src)
{
  array_write_ByteArray((uint16_t)__HEADEROFFSETBITS + 16, 40, src, bufx);
}

// Get Text (ByteArray)
// Offset: (uint16_t)__HEADEROFFSETBITS + 16, length bytes 40
static inline void msg_display_text_get_text(void *dst)
{
  array_read_ByteArray((uint16_t)__HEADEROFFSETBITS + 16, 40, dst, bufx);
}

#endif /* _MSGGRP_DISPLAY_H */
