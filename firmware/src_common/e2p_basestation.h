/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2014 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_BASESTATION_H
#define _E2P_BASESTATION_H

// E2P Block "BaseStation"
// =======================
// Start offset (bit): 512
// Overall block length: 7680 bits

// AesKeyCount (UIntValue)
// Description: This is the number of AES keys to use from the AesKeys block. Limit the number to the needed amount to avoid that the base station tries decoding with every one.

// Set AesKeyCount (UIntValue)
// Byte offset: 64, bit offset: 0, length bits 8, min val 1, max val 16
static inline void e2p_basestation_set_aeskeycount(uint8_t val)
{
  eeprom_write_UIntValue(64, 0, 8, val);
}

// Get AesKeyCount (UIntValue)
// Byte offset: 64, bit offset: 0, length bits 8, min val 1, max val 16
static inline uint8_t e2p_basestation_get_aeskeycount(void)
{
  return eeprom_read_UIntValue8(64, 0, 8, 1, 16);
}

// AesKey (ByteArray[16])
// Description: These are all AES keys which can be used to encrypt or decrypt packages at the base station.

// Set AesKey (ByteArray)
// Byte offset: 65, bit offset: 0, length bits 256
static inline void e2p_basestation_set_aeskey(uint8_t index, void *src)
{
  eeprom_write_block(src, (uint8_t *)(65 + (uint16_t)index * 32), 32);
}

// Get AesKey (ByteArray)
// Byte offset: 65, bit offset: 0, length bits 256
static inline void e2p_basestation_get_aeskey(uint8_t index, void *dst)
{
  eeprom_read_block(dst, (uint8_t *)(65 + (uint16_t)index * 32), 32);
}

// Reserved area with 3576 bits


#endif /* _E2P_BASESTATION_H */
