/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_BASESTATION_H
#define _E2P_BASESTATION_H

#include "e2p_access.h"

// E2P Block "BaseStation"
// =======================
// Start offset (bit): 512
// Overall block length: 7680 bits

// AesKeyCount (UIntValue)
// Description: This is the number of AES keys to use from the AesKeys block. Limit the number to the needed amount to avoid that the base station tries decoding with every one.

// Set AesKeyCount (UIntValue)
// Offset: 512, length bits 8, min val 1, max val 16
static inline void e2p_basestation_set_aeskeycount(uint8_t val)
{
  eeprom_write_UIntValue(512, 8, val);
}

// Get AesKeyCount (UIntValue)
// Offset: 512, length bits 8, min val 1, max val 16
static inline uint8_t e2p_basestation_get_aeskeycount(void)
{
  return eeprom_read_UIntValue8(512, 8, 1, 16);
}

// AesKey (ByteArray[16])
// Description: These are all AES keys which can be used to encrypt or decrypt packages at the base station.

// Set AesKey (ByteArray)
// Offset: 520, length bits 256
static inline void e2p_basestation_set_aeskey(uint8_t index, void *src)
{
  eeprom_write_block(src, (uint8_t *)((520 + (uint16_t)index * 256) / 8), 32);
}

// Get AesKey (ByteArray)
// Offset: 520, length bits 256
static inline void e2p_basestation_get_aeskey(uint8_t index, void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((520 + (uint16_t)index * 256) / 8), 32);
}

// UartBaudRate (EnumValue)
// Description: Select which baud rate to use for communication with the base station. Use 19200 (0,2% baud rate error @20 MHz) for standard speed, which should work with any connected device. Use 115200 (1,4% baud rate error @20 MHz) to speed up communication to the base station.

#ifndef _ENUM_UartBaudRate
#define _ENUM_UartBaudRate
typedef enum {
  UARTBAUDRATE_19200 = 19,
  UARTBAUDRATE_115200 = 115
} UartBaudRateEnum;
#endif /* _ENUM_UartBaudRate */

// Set UartBaudRate (EnumValue)
// Offset: 4616, length bits 8
static inline void e2p_basestation_set_uartbaudrate(UartBaudRateEnum val)
{
  eeprom_write_UIntValue(4616, 8, val);
}

// Get UartBaudRate (EnumValue)
// Offset: 4616, length bits 8
static inline UartBaudRateEnum e2p_basestation_get_uartbaudrate(void)
{
  return eeprom_read_UIntValue8(4616, 8, 0, 255);
}

// TransceiverWatchdogTimeout (UIntValue)
// Description: Reset RFM12B module if no data is received until timeout is reached. Use this function if your specific transceiver hangs sometimes. Value is in deca seconds. Suggested setting is 48 (for 8 minutes). Set 0 to disable.

// Set TransceiverWatchdogTimeout (UIntValue)
// Offset: 4624, length bits 8, min val 0, max val 255
static inline void e2p_basestation_set_transceiverwatchdogtimeout(uint8_t val)
{
  eeprom_write_UIntValue(4624, 8, val);
}

// Get TransceiverWatchdogTimeout (UIntValue)
// Offset: 4624, length bits 8, min val 0, max val 255
static inline uint8_t e2p_basestation_get_transceiverwatchdogtimeout(void)
{
  return eeprom_read_UIntValue8(4624, 8, 0, 255);
}

// Reserved area with 3560 bits
// Offset: 4632


#endif /* _E2P_BASESTATION_H */
