/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2014 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_GENERIC_H
#define _E2P_GENERIC_H

// E2P Block "Generic"
// ===================
// Start offset (bit): 64
// Overall block length: 448 bits

// DeviceID (UIntValue)
// Description: The DeviceID identifies the specific unit in the SHC network. It is used to address the device and in messages the device sends. Every device has to have a different DeviceID.

// Set DeviceID (UIntValue)
// Byte offset: 8, bit offset: 0, length bits 12, min val 0, max val 4095
static inline void e2p_generic_set_deviceid(uint16_t val)
{
  eeprom_write_UIntValue(8, 0, 12, val);
}

// Get DeviceID (UIntValue)
// Byte offset: 8, bit offset: 0, length bits 12, min val 0, max val 4095
static inline uint16_t e2p_generic_get_deviceid(void)
{
  return eeprom_read_UIntValue16(8, 0, 12, 0, 4095);
}

// Reserved area with 4 bits

// PacketCounter (UIntValue)
// Description: The PacketCounter is counted up throughout the whole lifetime of the device and is used to make the encrypted packets differently from each other every time.

// Set PacketCounter (UIntValue)
// Byte offset: 10, bit offset: 0, length bits 24, min val 0, max val 16777215
static inline void e2p_generic_set_packetcounter(uint32_t val)
{
  eeprom_write_UIntValue(10, 0, 24, val);
}

// Get PacketCounter (UIntValue)
// Byte offset: 10, bit offset: 0, length bits 24, min val 0, max val 16777215
static inline uint32_t e2p_generic_get_packetcounter(void)
{
  return eeprom_read_UIntValue32(10, 0, 24, 0, 16777215);
}

// Reserved area with 152 bits

// AesKey (ByteArray)
// Description: This key is used to encrypt packets before sending and also used as primary key to decrypt packets. Special devices may have additional keys in their device specific block.

// Set AesKey (ByteArray)
// Byte offset: 32, bit offset: 0, length bits 256
static inline void e2p_generic_set_aeskey(void *src)
{
  eeprom_write_block(src, (uint8_t *)(32), 32);
}

// Get AesKey (ByteArray)
// Byte offset: 32, bit offset: 0, length bits 256
static inline void e2p_generic_get_aeskey(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)(32), 32);
}


#endif /* _E2P_GENERIC_H */
