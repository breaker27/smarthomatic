/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _PACKET_HEADEREXT_ACKSTATUS_H
#define _PACKET_HEADEREXT_ACKSTATUS_H

#include "packet_header.h"

// AckSenderID (UIntValue)
// Description: The ID of the requestor whose request is acknowledged.

// Set AckSenderID (UIntValue)
// Offset: 72, length bits 12, min val 0, max val 4095
static inline void pkg_headerext_ackstatus_set_acksenderid(uint32_t val)
{
  array_write_UIntValue(72, 12, val, bufx);
}

// Get AckSenderID (UIntValue)
// Offset: 72, length bits 12, min val 0, max val 4095
static inline uint32_t pkg_headerext_ackstatus_get_acksenderid(void)
{
  return array_read_UIntValue32(72, 12, 0, 4095, bufx);
}

// AckPacketCounter (UIntValue)
// Description: The PacketCounter of the request that is acknowledged.

// Set AckPacketCounter (UIntValue)
// Offset: 84, length bits 24, min val 0, max val 16777215
static inline void pkg_headerext_ackstatus_set_ackpacketcounter(uint32_t val)
{
  array_write_UIntValue(84, 24, val, bufx);
}

// Get AckPacketCounter (UIntValue)
// Offset: 84, length bits 24, min val 0, max val 16777215
static inline uint32_t pkg_headerext_ackstatus_get_ackpacketcounter(void)
{
  return array_read_UIntValue32(84, 24, 0, 16777215, bufx);
}

// Error (BoolValue)
// Description: Tells if there was an error fulfilling the request or not.

// Set Error (BoolValue)
// Offset: 108, length bits 1
static inline void pkg_headerext_ackstatus_set_error(bool val)
{
  array_write_UIntValue(108, 1, val ? 1 : 0, bufx);
}

// Get Error (BoolValue)
// Offset: 108, length bits 1
static inline bool pkg_headerext_ackstatus_get_error(void)
{
  return array_read_UIntValue8(108, 1, 0, 1, bufx) == 1;
}

// MessageGroupID (UIntValue)
// Description: 0 = Generic, 1..9 = Reserved, others are arbitrary

// Set MessageGroupID (UIntValue)
// Offset: 109, length bits 7, min val 0, max val 127
static inline void pkg_headerext_ackstatus_set_messagegroupid(uint32_t val)
{
  array_write_UIntValue(109, 7, val, bufx);
}

// Get MessageGroupID (UIntValue)
// Offset: 109, length bits 7, min val 0, max val 127
static inline uint32_t pkg_headerext_ackstatus_get_messagegroupid(void)
{
  return array_read_UIntValue32(109, 7, 0, 127, bufx);
}

// MessageID (UIntValue)

// Set MessageID (UIntValue)
// Offset: 116, length bits 4, min val 0, max val 15
static inline void pkg_headerext_ackstatus_set_messageid(uint32_t val)
{
  array_write_UIntValue(116, 4, val, bufx);
}

// Get MessageID (UIntValue)
// Offset: 116, length bits 4, min val 0, max val 15
static inline uint32_t pkg_headerext_ackstatus_get_messageid(void)
{
  return array_read_UIntValue32(116, 4, 0, 15, bufx);
}


// overall length: 120 bits
// message data follows: yes

#endif /* _PACKET_HEADEREXT_ACKSTATUS_H */
