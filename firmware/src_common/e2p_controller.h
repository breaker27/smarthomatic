/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2019 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_CONTROLLER_H
#define _E2P_CONTROLLER_H

#include "e2p_access.h"

// E2P Block "Controller"
// ======================
// Start offset (bit): 512
// Overall block length: 15880 bits

// BaseStationPacketCounter (UIntValue)
// Description: This is the last remembered packet counter of a command from the base station. Packets with the same or lower number are ignored.

// Set BaseStationPacketCounter (UIntValue)
// Offset: 512, length bits 24, min val 0, max val 16777215
static inline void e2p_controller_set_basestationpacketcounter(uint32_t val)
{
  eeprom_write_UIntValue(512, 24, val);
}

// Get BaseStationPacketCounter (UIntValue)
// Offset: 512, length bits 24, min val 0, max val 16777215
static inline uint32_t e2p_controller_get_basestationpacketcounter(void)
{
  return eeprom_read_UIntValue32(512, 24, 0, 16777215);
}

// BrightnessFactor (UIntValue)
// Description: This value reduces the overall brightness. This is to easily adjust it to your needs without changing the LED series resistors. WARNING: It is recommended to use this only for testing, because it reduces the amount of different brightness levels. Changing the resistors is to be preferred.

// Set BrightnessFactor (UIntValue)
// Offset: 536, length bits 8, min val 1, max val 100
static inline void e2p_controller_set_brightnessfactor(uint8_t val)
{
  eeprom_write_UIntValue(536, 8, val);
}

// Get BrightnessFactor (UIntValue)
// Offset: 536, length bits 8, min val 1, max val 100
static inline uint8_t e2p_controller_get_brightnessfactor(void)
{
  return eeprom_read_UIntValue8(536, 8, 1, 100);
}

// TransceiverWatchdogTimeout (UIntValue)
// Description: Reset RFM12B module if no data is received until timeout is reached. Use this function if your specific transceiver hangs sometimes. Value is in deca seconds. Suggested setting is 48 (for 8 minutes). Set 0 to disable.

// Set TransceiverWatchdogTimeout (UIntValue)
// Offset: 544, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_transceiverwatchdogtimeout(uint8_t val)
{
  eeprom_write_UIntValue(544, 8, val);
}

// Get TransceiverWatchdogTimeout (UIntValue)
// Offset: 544, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_transceiverwatchdogtimeout(void)
{
  return eeprom_read_UIntValue8(544, 8, 0, 255);
}

// MenuSelectionStatusCycle (UIntValue)
// Description: This is the number of minutes after which the menu selection should be resent, so in case of a lost message it can be received again. Since MenuSelection updates are sent with a Deliver message, it's usually not necessary to send it often. Set 0 to disable.

// Set MenuSelectionStatusCycle (UIntValue)
// Offset: 552, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_menuselectionstatuscycle(uint8_t val)
{
  eeprom_write_UIntValue(552, 8, val);
}

// Get MenuSelectionStatusCycle (UIntValue)
// Offset: 552, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_menuselectionstatuscycle(void)
{
  return eeprom_read_UIntValue8(552, 8, 0, 255);
}

// BacklightStatusCycle (UIntValue)
// Description: This is the number of minutes after which the backlight setting should be resent, so in case of a lost message it can be received again. Set 0 to disable.

// Set BacklightStatusCycle (UIntValue)
// Offset: 560, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_backlightstatuscycle(uint8_t val)
{
  eeprom_write_UIntValue(560, 8, val);
}

// Get BacklightStatusCycle (UIntValue)
// Offset: 560, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_backlightstatuscycle(void)
{
  return eeprom_read_UIntValue8(560, 8, 0, 255);
}

// Sound (EnumValue)
// Description: Defines if key presses and saving menu entries / cancelling the menu are acknowledged with sounds.

#ifndef _ENUM_Sound
#define _ENUM_Sound
typedef enum {
  SOUND_SILENT = 0,
  SOUND_KEY = 1,
  SOUND_SAVECANCEL = 2,
  SOUND_KEY_SAVECANCEL = 3
} SoundEnum;
#endif /* _ENUM_Sound */

// Set Sound (EnumValue)
// Offset: 568, length bits 8
static inline void e2p_controller_set_sound(SoundEnum val)
{
  eeprom_write_UIntValue(568, 8, val);
}

// Get Sound (EnumValue)
// Offset: 568, length bits 8
static inline SoundEnum e2p_controller_get_sound(void)
{
  return eeprom_read_UIntValue8(568, 8, 0, 255);
}

// LCDType (EnumValue)
// Description: Define if an LCD is connected and of which type (size) it is. Only HD44780 compatible text displays are currently supported.

#ifndef _ENUM_LCDType
#define _ENUM_LCDType
typedef enum {
  LCDTYPE_NONE = 0,
  LCDTYPE_4X20 = 1,
  LCDTYPE_4X40 = 2
} LCDTypeEnum;
#endif /* _ENUM_LCDType */

// Set LCDType (EnumValue)
// Offset: 576, length bits 8
static inline void e2p_controller_set_lcdtype(LCDTypeEnum val)
{
  eeprom_write_UIntValue(576, 8, val);
}

// Get LCDType (EnumValue)
// Offset: 576, length bits 8
static inline LCDTypeEnum e2p_controller_get_lcdtype(void)
{
  return eeprom_read_UIntValue8(576, 8, 0, 255);
}

// LCDPages (UIntValue)
// Description: This is the number of pages that may be addressed virtually and selected with Up/Down buttons. If you fill less than 8 pages with content and want to avoid that the user can switch to empty pages, reduce the number accordingly.

// Set LCDPages (UIntValue)
// Offset: 584, length bits 8, min val 1, max val 8
static inline void e2p_controller_set_lcdpages(uint8_t val)
{
  eeprom_write_UIntValue(584, 8, val);
}

// Get LCDPages (UIntValue)
// Offset: 584, length bits 8, min val 1, max val 8
static inline uint8_t e2p_controller_get_lcdpages(void)
{
  return eeprom_read_UIntValue8(584, 8, 1, 8);
}

// PageJumpBackSeconds (UIntValue)
// Description: This defines after how many seconds the display shows the first page again after the user pressed the button to show the additional virtual lines. Set 0 to disable.

// Set PageJumpBackSeconds (UIntValue)
// Offset: 592, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_pagejumpbackseconds(uint8_t val)
{
  eeprom_write_UIntValue(592, 8, val);
}

// Get PageJumpBackSeconds (UIntValue)
// Offset: 592, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_pagejumpbackseconds(void)
{
  return eeprom_read_UIntValue8(592, 8, 0, 255);
}

// MenuJumpBackSeconds (UIntValue)
// Description: This defines after how many seconds the selection of menu options is cancelled if the user doesn't press any button anymore. The menu options are not saved in this case. Set 0 to disable.

// Set MenuJumpBackSeconds (UIntValue)
// Offset: 600, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_menujumpbackseconds(uint8_t val)
{
  eeprom_write_UIntValue(600, 8, val);
}

// Get MenuJumpBackSeconds (UIntValue)
// Offset: 600, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_menujumpbackseconds(void)
{
  return eeprom_read_UIntValue8(600, 8, 0, 255);
}

// BacklightMode (EnumValue)
// Description: Defines the initial behaviour for the backlight after startup. Can be changed by the Controller-Backlight message. On: Backlight is always on. Off: Backlight is always off. Auto: Backlight is switched on for AutoBacklightTimeSec seconds when a key is pressed or after startup. Otherwise it's off.

#ifndef _ENUM_BacklightMode
#define _ENUM_BacklightMode
typedef enum {
  BACKLIGHTMODE_ON = 0,
  BACKLIGHTMODE_OFF = 1,
  BACKLIGHTMODE_AUTO = 2
} BacklightModeEnum;
#endif /* _ENUM_BacklightMode */

// Set BacklightMode (EnumValue)
// Offset: 608, length bits 8
static inline void e2p_controller_set_backlightmode(BacklightModeEnum val)
{
  eeprom_write_UIntValue(608, 8, val);
}

// Get BacklightMode (EnumValue)
// Offset: 608, length bits 8
static inline BacklightModeEnum e2p_controller_get_backlightmode(void)
{
  return eeprom_read_UIntValue8(608, 8, 0, 255);
}

// AutoBacklightTimeSec (UIntValue)
// Description: This defines after how many seconds the backlight is switched off in mode Auto.

// Set AutoBacklightTimeSec (UIntValue)
// Offset: 616, length bits 8, min val 1, max val 255
static inline void e2p_controller_set_autobacklighttimesec(uint8_t val)
{
  eeprom_write_UIntValue(616, 8, val);
}

// Get AutoBacklightTimeSec (UIntValue)
// Offset: 616, length bits 8, min val 1, max val 255
static inline uint8_t e2p_controller_get_autobacklighttimesec(void)
{
  return eeprom_read_UIntValue8(616, 8, 1, 255);
}

// MenuOption (ByteArray[8])
// Description: These are up to 16 strings that define options that the user can select. Each entry is defined with a name and several options to select, which are separated with a pipe character '|'. Leave the string empty when there shall be no more options to select. Currently, only the first 4 entries are supported.

// Set MenuOption (ByteArray)
// Offset: 624, length bits 960
static inline void e2p_controller_set_menuoption(uint8_t index, void *src)
{
  eeprom_write_block(src, (uint8_t *)((624 + (uint16_t)index * 960) / 8), 120);
}

// Get MenuOption (ByteArray)
// Offset: 624, length bits 960
static inline void e2p_controller_get_menuoption(uint8_t index, void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((624 + (uint16_t)index * 960) / 8), 120);
}

// MenuOptionIndex (UIntValue[8])
// Description: This is the index of the currently selected value. It's saved to the E2P to be available also after power loss.

// Set MenuOptionIndex (UIntValue)
// Offset: 8304, length bits 8, min val 0, max val 255
static inline void e2p_controller_set_menuoptionindex(uint8_t index, uint8_t val)
{
  eeprom_write_UIntValue(8304 + (uint16_t)index * 8, 8, val);
}

// Get MenuOptionIndex (UIntValue)
// Offset: 8304, length bits 8, min val 0, max val 255
static inline uint8_t e2p_controller_get_menuoptionindex(uint8_t index)
{
  return eeprom_read_UIntValue8(8304 + (uint16_t)index * 8, 8, 0, 255);
}

// MenuTextSendOptions (ByteArray)
// Description: This text is shown when menu options are sent. The default text is 'Sending Options'. You can use 'Sende Optionen' as german translation.

// Set MenuTextSendOptions (ByteArray)
// Offset: 8368, length bits 160
static inline void e2p_controller_set_menutextsendoptions(void *src)
{
  eeprom_write_block(src, (uint8_t *)((8368) / 8), 20);
}

// Get MenuTextSendOptions (ByteArray)
// Offset: 8368, length bits 160
static inline void e2p_controller_get_menutextsendoptions(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((8368) / 8), 20);
}

// MenuTextSuccess (ByteArray)
// Description: This text is shown when sending menu options was successful. The default text is 'Success'. You can use 'Erfolgreich' as german translation.

// Set MenuTextSuccess (ByteArray)
// Offset: 8528, length bits 160
static inline void e2p_controller_set_menutextsuccess(void *src)
{
  eeprom_write_block(src, (uint8_t *)((8528) / 8), 20);
}

// Get MenuTextSuccess (ByteArray)
// Offset: 8528, length bits 160
static inline void e2p_controller_get_menutextsuccess(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((8528) / 8), 20);
}

// MenuTextFailed (ByteArray)
// Description: This text is shown when sending menu options failed. The default text is 'Failed'. You can use 'Fehlgeschlagen' as german translation.

// Set MenuTextFailed (ByteArray)
// Offset: 8688, length bits 160
static inline void e2p_controller_set_menutextfailed(void *src)
{
  eeprom_write_block(src, (uint8_t *)((8688) / 8), 20);
}

// Get MenuTextFailed (ByteArray)
// Offset: 8688, length bits 160
static inline void e2p_controller_get_menutextfailed(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((8688) / 8), 20);
}

// MenuTextCancel (ByteArray)
// Description: This text is shown when sending menu options was cancelled. The default text is 'Cancelled'. You can use 'Abbruch' as german translation.

// Set MenuTextCancel (ByteArray)
// Offset: 8848, length bits 160
static inline void e2p_controller_set_menutextcancel(void *src)
{
  eeprom_write_block(src, (uint8_t *)((8848) / 8), 20);
}

// Get MenuTextCancel (ByteArray)
// Offset: 8848, length bits 160
static inline void e2p_controller_get_menutextcancel(void *dst)
{
  eeprom_read_block(dst, (uint8_t *)((8848) / 8), 20);
}

// Reserved area with 7384 bits
// Offset: 9008


#endif /* _E2P_CONTROLLER_H */
